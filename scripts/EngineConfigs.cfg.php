<?php
$autoGeneratedPricesSettings = array(
	'lower_stage' => array(
		'base_cost' => 200,
		'cost_coeff' => 0.2,
		'ISP_coeff' => 310,
		'ISP_power' => 3,
		'entry_cost_coeff' => 10,
		'upgrade_cost_coeff' => 5,
	),
	'sustainer' => array(
		'base_cost' => 200,
		'cost_coeff' => 0.2,
		'ISP_coeff' => 320,
		'ISP_power' => 3,
		'entry_cost_coeff' => 10,
		'upgrade_cost_coeff' => 5,
	),
	'upper_stage' => array(
		'base_cost' => 150,
		'cost_coeff' => 0.2,
		'ISP_coeff' => 335,
		'ISP_power' => 3,
		'entry_cost_coeff' => 10,
		'upgrade_cost_coeff' => 5,
	),
	'OMS' => array(
		'base_cost' => 25,
		'cost_coeff' => 0.2,
		'ISP_coeff' => 350,
		'ISP_power' => 2.5,
		'pressureFed_coeff' => 0.5,
		'ignitions_infinite_eq' => 100,
		'ignitions_power' => 0.1,
		'entry_cost_coeff' => 10,
		'upgrade_cost_coeff' => 5,
	),
	'nuclear' => array(
		'base_cost' => 25000,
		'cost_coeff' => 0.2,
		'ISP_coeff' => 1000,
		'ISP_power' => 0.5,
		'thrust_power' => 0.9,
		'TWR_power' => 0.5,
		'pressureFed_coeff' => 0.5,
		'ignitions_infinite_eq' => 100,
		'ignitions_power' => 0.05,
		'entry_cost_coeff' => 15,
		'upgrade_cost_coeff' => 5,
	),
	'SRB' => array(
		'base_cost' => 10,
		'cost_coeff' => 1,
		'ISP_coeff' => 260,
		'ISP_power' => 3,
		'massRatio_power' => 0.5,
		'entry_cost_coeff' => 10,
		'upgrade_cost_coeff' => 5,
	),
);



$autoGenerateEnginesPricesTemplateHeader = '@RS_ENGINE_CONFIGS:FOR[1_RealismSimplified]
{
	@%CONFIG%
	{
		%RS_AutoGenerateEnginesPrices = #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices$
	}
}
';
$autoGenerateEnginesPricesTemplateLowerStage = '@RS_ENGINE_CONFIGS:FOR[1_RealismSimplified]
{
	@%CONFIG%:HAS[#RS_AutoGenerateEnginesPrices[*rue],#maxThrust[>0],#minThrust[*],#ispVac[>0],#ispSL[>0]]
	{
		// Lower stage engine prices are generated as follows:
		// cost = ISPCoeff * (((ISP(vacuum, s) + ISP(sea level, s)) / (2 * ISPCoeff)) ^ ISPPower)  * (2 * MaxThrust(vacuum, KN) - MinThrust(vacuum, KN)) * CostCoeff / 10
		// upgradeCost = cost * UpgradeCostCoeff
		// entryCost = cost * EntryCostCoeff
		%RS_Temp = #$ispVac$
		@RS_Temp += #$ispSL$
		%RS_Temp1 = #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_LowerStage_ISPCoeff$
		@RS_Temp1 *= 2
		@RS_Temp /= #$RS_Temp1$
		@RS_Temp != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_LowerStage_ISPPower$
		%cost = #$maxThrust$
		@cost *= 2
		@cost -= #$minThrust$
		@cost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_LowerStage_ISPCoeff$
		@cost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_LowerStage_CostCoeff$
		@cost /= 10
		@cost *= #$RS_Temp$
		@cost += #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_LowerStage_BaseCost$
		%dryCost = #$cost$
		%entryCost = #$cost$
		@entryCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_LowerStage_EntryCostCoeff$
		%upgradeCost = #$cost$
		@upgradeCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_LowerStage_UpgradeCostCoeff$
		%costsAutoGenerated = true
	}
}
';
$autoGenerateEnginesPricesTemplateSustainer = '@RS_ENGINE_CONFIGS:FOR[1_RealismSimplified]
{
	@%CONFIG%:HAS[#RS_AutoGenerateEnginesPrices[*rue],#maxThrust[>0],#minThrust[*],#ispVac[>0],#ispSL[>0]]
	{
		// Sustainer engine prices are generated as follows:
		// cost = ISPCoeff * (((ISP(vacuum, s) + ISP(sea level, s)) / (2 * ISPCoeff)) ^ ISPPower)  * (2 * MaxThrust(vacuum, KN) - MinThrust(vacuum, KN)) * CostCoeff / 10
		// upgradeCost = cost * UpgradeCostCoeff
		// entryCost = cost * EntryCostCoeff
		%RS_Temp = #$ispVac$
		@RS_Temp += #$ispSL$
		%RS_Temp1 = #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Sustainer_ISPCoeff$
		@RS_Temp1 *= 2
		@RS_Temp /= #$RS_Temp1$
		@RS_Temp != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Sustainer_ISPPower$
		%cost = #$maxThrust$
		@cost *= 2
		@cost -= #$minThrust$
		@cost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Sustainer_ISPCoeff$
		@cost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Sustainer_CostCoeff$
		@cost /= 10
		@cost *= #$RS_Temp$
		@cost += #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Sustainer_BaseCost$
		%dryCost = #$cost$
		%entryCost = #$cost$
		@entryCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Sustainer_EntryCostCoeff$
		%upgradeCost = #$cost$
		@upgradeCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Sustainer_UpgradeCostCoeff$
		%costsAutoGenerated = true
	}
}
';
$autoGenerateEnginesPricesTemplateUpperStage = '@RS_ENGINE_CONFIGS:FOR[1_RealismSimplified]
{
	@%CONFIG%:HAS[#RS_AutoGenerateEnginesPrices[*rue],#maxThrust[>0],#minThrust[*],#ispVac[>0]]
	{
		// Upper stage engine prices are generated as follows:
		// cost = ISPCoeff * ((ISP(vacuum, s) / ISPCoeff) ^ ISPPower)  * (2 * MaxThrust(vacuum, KN) - MinThrust(vacuum, KN)) * CostCoeff / 10
		// upgradeCost = cost * UpgradeCostCoeff
		// entryCost = cost * EntryCostCoeff
		%RS_Temp = #$ispVac$
		@RS_Temp /= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_UpperStage_ISPCoeff$
		@RS_Temp != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_UpperStage_ISPPower$
		%cost = #$maxThrust$
		@cost *= 2
		@cost -= #$minThrust$
		@cost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_UpperStage_ISPCoeff$
		@cost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_UpperStage_CostCoeff$
		@cost /= 10
		@cost *= #$RS_Temp$
		@cost += #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_UpperStage_BaseCost$
		%dryCost = #$cost$
		%entryCost = #$cost$
		@entryCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_UpperStage_EntryCostCoeff$
		%upgradeCost = #$cost$
		@upgradeCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_UpperStage_UpgradeCostCoeff$
		%costsAutoGenerated = true
	}
}
';
$autoGenerateEnginesPricesTemplateOMS = '// OMS engines prices are generated as follows:
// cost = ISPCoeff * ((ISP(vacuum, s) / ISPCoeff) ^ ISPPower) * MaxThrust(vacuum, KN) * PressureFedCostCoeff * (IgnitionsCount ^ IgnitionsPower) * CostCoeff
// upgradeCost = cost * UpgradeCostCoeff
// entryCost = cost * EntryCostCoeff
@RS_ENGINE_CONFIGS:FOR[1_RealismSimplified]
{
	@%CONFIG%:HAS[#RS_AutoGenerateEnginesPrices[*rue],#pressureFed[*rue],#maxThrust[>0],#ispVac[>0],#ignitions[>0]]
	{
		%RS_Temp = #$ispVac$
		@RS_Temp /= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_ISPCoeff$
		@RS_Temp != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_ISPPower$
		%cost = #$ignitions$
		@cost != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_IgnitionsPower$
		@cost *= #$maxThrust$
		@cost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_CostCoeff$
		@cost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_PressureFedCostCoeff$
		@cost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_ISPCoeff$
		@cost *= #$RS_Temp$
		@cost += #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_BaseCost$
		%dryCost = #$cost$
		%entryCost = #$cost$
		@entryCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_EntryCostCoeff$
		%upgradeCost = #$cost$
		@upgradeCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_UpgradeCostCoeff$
		%costsAutoGenerated = true
	}
	@%CONFIG%:HAS[#RS_AutoGenerateEnginesPrices[*rue],#pressureFed[*rue],#maxThrust[>0],#ispVac[>0],#ignitions[-1]]
	{
		%RS_Temp = #$ispVac$
		@RS_Temp /= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_ISPCoeff$
		@RS_Temp != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_ISPPower$
		%cost = #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_InfiniteIgnitionsFiniteEquivalent$
		@cost != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_IgnitionsPower$
		@cost *= #$maxThrust$
		@cost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_CostCoeff$
		@cost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_PressureFedCostCoeff$
		@cost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_ISPCoeff$
		@cost *= #$RS_Temp$
		@cost += #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_BaseCost$
		%dryCost = #$cost$
		%entryCost = #$cost$
		@entryCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_EntryCostCoeff$
		%upgradeCost = #$cost$
		@upgradeCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_UpgradeCostCoeff$
		%costsAutoGenerated = true
	}
	@%CONFIG%:HAS[#RS_AutoGenerateEnginesPrices[*rue],~pressureFed[*rue],#maxThrust[>0],#ispVac[>0],#ignitions[>0]]
	{
		%RS_Temp = #$ispVac$
		@RS_Temp /= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_ISPCoeff$
		@RS_Temp != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_ISPPower$
		%cost = #$ignitions$
		@cost != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_IgnitionsPower$
		@cost *= #$maxThrust$
		@cost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_CostCoeff$
		@cost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_ISPCoeff$
		@cost *= #$RS_Temp$
		@cost += #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_BaseCost$
		%dryCost = #$cost$
		%entryCost = #$cost$
		@entryCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_EntryCostCoeff$
		%upgradeCost = #$cost$
		@upgradeCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_UpgradeCostCoeff$
		%costsAutoGenerated = true
	}
	@%CONFIG%:HAS[#RS_AutoGenerateEnginesPrices[*rue],~pressureFed[*rue],#maxThrust[>0],#ispVac[>0],#ignitions[-1]]
	{
		%RS_Temp = #$ispVac$
		@RS_Temp /= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_ISPCoeff$
		@RS_Temp != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_ISPPower$
		%cost = #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_InfiniteIgnitionsFiniteEquivalent$
		@cost != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_IgnitionsPower$
		@cost *= #$maxThrust$
		@cost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_CostCoeff$
		@cost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_ISPCoeff$
		@cost *= #$RS_Temp$
		@cost += #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_BaseCost$
		%dryCost = #$cost$
		%entryCost = #$cost$
		@entryCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_EntryCostCoeff$
		%upgradeCost = #$cost$
		@upgradeCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_UpgradeCostCoeff$
		%costsAutoGenerated = true
	}
}
';
$autoGenerateEnginesPricesTemplateNuclear = '// Nuclear engines prices are generated as follows:
// cost = ISPCoeff * ((ISP(vacuum, s) / ISPCoeff) ^ ISPPower) * (MaxThrust(vacuum, KN) ^ ThrustPower) * ((MaxThrust(vacuum, KN) / (EngineMass(t) * 9.81)) ^ TWRPower) * (IgnitionsCount ^ IgnitionsPower) * CostCoeff + BaseCost
// upgradeCost = cost * UpgradeCostCoeff
// entryCost = cost * EntryCostCoeff
@RS_ENGINE_CONFIGS:FOR[1_RealismSimplified]
{
	@%CONFIG%:HAS[#RS_AutoGenerateEnginesPrices[*rue],#dryMass[>0],#maxThrust[>0],#ispVac[>0],#ignitions[-1]]
	{
		%RS_Temp = #$ispVac$
		@RS_Temp /= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_ISPCoeff$
		@RS_Temp != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_ISPPower$
		%RS_Temp1 = #$maxThrust$
		@RS_Temp1 /= #$dryMass$
		@RS_Temp1 /= 9.81
		@RS_Temp1 != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_TWRPower$
		%RS_Temp2 = #$maxThrust$
		@RS_Temp2 != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_ThrustPower$
		%cost = #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_InfiniteIgnitionsFiniteEquivalent$
		@cost != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_IgnitionsPower$
		@cost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_CostCoeff$
		@cost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_ISPCoeff$
		@cost *= #$RS_Temp$
		@cost *= #$RS_Temp1$
		@cost *= #$RS_Temp2$
		@cost += #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_BaseCost$
		%dryCost = #$cost$
		%entryCost = #$cost$
		@entryCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_EntryCostCoeff$
		%upgradeCost = #$cost$
		@upgradeCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_UpgradeCostCoeff$
		%costsAutoGenerated = true
	}
	@%CONFIG%:HAS[#RS_AutoGenerateEnginesPrices[*rue],#dryMass[>0],#maxThrust[>0],#ispVac[>0],#ignitions[>0]]
	{
		%RS_Temp = #$ispVac$
		@RS_Temp /= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_ISPCoeff$
		@RS_Temp != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_ISPPower$
		%RS_Temp1 = #$maxThrust$
		@RS_Temp1 /= #$dryMass$
		@RS_Temp1 /= 9.81
		@RS_Temp1 != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_TWRPower$
		%RS_Temp2 = #$maxThrust$
		@RS_Temp2 != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_ThrustPower$
		%cost = #$ignitions$
		@cost != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_IgnitionsPower$
		@cost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_CostCoeff$
		@cost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_ISPCoeff$
		@cost *= #$RS_Temp$
		@cost *= #$RS_Temp1$
		@cost *= #$RS_Temp2$
		@cost += #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_BaseCost$
		%dryCost = #$cost$
		%entryCost = #$cost$
		@entryCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_EntryCostCoeff$
		%upgradeCost = #$cost$
		@upgradeCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_UpgradeCostCoeff$
		%costsAutoGenerated = true
	}
}
';
$autoGenerateEnginesPricesTemplateSRB = '// SRBs prices are generated as follows:
// cost = ((ISPCoeff * ((ISP(vacuum, s) / ISPCoeff) ^ ISPPower) * MaxThrust(vacuum, KN) * ((Full SRB mass / Dry SRB mass) ^ MassRatioPower) * CostCoeff + Solid fuel cost + BaseCost
// upgradeCost = cost * UpgradeCostCoeff
// entryCost = cost * EntryCostCoeff
@RS_ENGINE_CONFIGS:FOR[1_RealismSimplified]
{
	@%CONFIG%:HAS[#RS_AutoGenerateEnginesPrices[*rue],#dryMass[>0],#maxThrust[>0],#ispVac[>0],#solidFuelMass[>0]]
	{
		%RS_Temp = #$ispVac$
		@RS_Temp /= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_SRB_ISPCoeff$
		@RS_Temp != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_SRB_ISPPower$
		%RS_Temp1 = #$solidFuelMass$
		@RS_Temp1 += #$dryMass$
		@RS_Temp1 /= #$dryMass$
		@RS_Temp1 != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_SRB_MassRatioPower$
		%RS_Temp2 = #$solidFuelMass$
		@RS_Temp2 *= #$@RESOURCE_DEFINITION[SolidFuel]/unitCost$
		@RS_Temp2 /= #$@RESOURCE_DEFINITION[SolidFuel]/density$
		%cost = #$maxThrust$
		@cost *= #$RS_Temp$
		@cost *= #$RS_Temp1$
		@cost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_SRB_CostCoeff$
		@cost += #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_SRB_BaseCost$
		%dryCost = #$cost$
		@cost += #$RS_Temp2$
		%entryCost = #$cost$
		@entryCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_SRB_EntryCostCoeff$
		%upgradeCost = #$cost$
		@upgradeCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_SRB_UpgradeCostCoeff$
		%costsAutoGenerated = true
	}
}
';
$autoGenerateEnginesPricesTemplateFooter = '@RS_ENGINE_CONFIGS:FOR[1_RealismSimplified]
{
	@%CONFIG%:HAS[#costsAutoGenerated[*rue]]
	{
		@cost ^= :^(\d+)\.[^56789]\d*$:$1:
		@cost ^= :^(\d+)\.[56789]\d*$:$1+increment:
		@dryCost ^= :^(\d+)\.[^56789]\d*$:$1:
		@dryCost ^= :^(\d+)\.[56789]\d*$:$1+increment:
		@entryCost ^= :^(\d+)\.[^56789]\d*$:$1:
		@entryCost ^= :^(\d+)\.[56789]\d*$:$1+increment:
		@upgradeCost ^= :^(\d+)\.[^56789]\d*$:$1:
		@upgradeCost ^= :^(\d+)\.[56789]\d*$:$1+increment:
	}
}
@RS_ENGINE_CONFIGS:FOR[1_RealismSimplified]
{
	@%CONFIG%:HAS[#costsAutoGenerated[*rue],#cost[*+increment]]
	{
		@cost ^= :\+increment$::
		@cost += 1
	}
}
@RS_ENGINE_CONFIGS:FOR[1_RealismSimplified]
{
	@%CONFIG%:HAS[#costsAutoGenerated[*rue],#dryCost[*+increment]]
	{
		@dryCost ^= :\+increment$::
		@dryCost += 1
	}
}
@RS_ENGINE_CONFIGS:FOR[1_RealismSimplified]
{
	@%CONFIG%:HAS[#costsAutoGenerated[*rue],#entryCost[*+increment]]
	{
		@entryCost ^= :\+increment$::
		@entryCost += 1
	}
}
@RS_ENGINE_CONFIGS:FOR[1_RealismSimplified]
{
	@%CONFIG%:HAS[#costsAutoGenerated[*rue],#upgradeCost[*+increment]]
	{
		@upgradeCost ^= :\+increment$::
		@upgradeCost += 1
	}
}

';

$engineCFGParamTemplate = '	@MODULE[ModuleEngines*]:HAS[#RS_EngineConfig[%CONFIG%],~%RS_PARAM%[],~RS_IgnoreEngine[]],*
	{
		%RS_PARAM% = #$@RS_ENGINE_CONFIGS/%CONFIG%/%PARAM%$
	}
';
$engineThrustCurveTemplate = '	@MODULE[ModuleEngines*]:HAS[#RS_EngineConfig[%CONFIG%],~RS_PreserveThrustCurve[*rue],~RS_IgnoreEngine[]],*
	{
		%useThrustCurve = true
		!thrustCurve {}
		thrustCurve
		{
%CURVE%		}
	}
';

$engineB9PSConfigTemplate = '
// B9 Part Switch engine variants
@PART[*]:HAS[~RS_IgnorePart[],@MODULE[ModuleEngines*]:HAS[#RS_EngineConfig[%CONFIG%]],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch],!SUBTYPE[%CONFIG%]]]:AFTER[zzzRealismSimplified]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		SUBTYPE,0
		{
			name = %CONFIG%
			title = %TITLE%
			descriptionDetail = %DESC%
			RS_EngineDefaultVariant = true
		}
	}
}
';
$engineB9PSParamTemplate = '@PART[*]:HAS[~RS_IgnorePart[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch],@SUBTYPE[%CONFIG%]]]:AFTER[zzzRealismSimplified]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE[%CONFIG%]:HAS[~%RS_PARAM%[]],*
		{
			%RS_PARAM% = #$@RS_ENGINE_CONFIGS/%CONFIG%/%PARAM%$
		}
	}
}
';
$engineB9PSThrustCurveTemplate = '@PART[*]:HAS[~RS_IgnorePart[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch],@SUBTYPE[%CONFIG%]]]:AFTER[zzzRealismSimplified]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE[%CONFIG%]:HAS[~RS_PreserveThrustCurve[*rue],@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[!thrustCurve]]],*
		{
			%useThrustCurve = true
			thrustCurve
			{
%CURVE%			}
		}
	}
}
';

$payToPlaySiblingsTemplate = '
!ENGINE_SIBLING_RELIABILITY:HAS[#engineModelId[%CONFIG%]]
ENGINE_SIBLING_RELIABILITY:NEEDS[PayToPlay]
{
	engineModelId = %CONFIG%

	SIBLINGS
	{
%SIBLINGS%	}
}
';

$partUpgradeTemplate = '
PARTUPGRADE
{
	name = RS_Engine_%CONFIG%_Upgrade
	partIcon = %ICON%
	entryCost = 0
	title = %TITLE%
	manufacturer = Kerbodyne
	description = %DESC%
%PARAMS%
}
@PARTUPGRADE[RS_Engine_%CONFIG%_Upgrade]:BEFORE[zzzzRealismSimplifiedTechTree]
{
	%entryCost = #$@RS_ENGINE_CONFIGS/%CONFIG%/upgradeCost$
}
';

$partUpgradeIconTemplate = '@PARTUPGRADE[RS_Engine_%CONFIG%_Upgrade]:HAS[~RS_PartUpgradeIconUpdated[*rue]]%NEEDS%:BEFORE[zzzzRealismSimplifiedTechTree]
{
	%RS_PartUpgradeIconUpdated = true
	%partIcon = %ICON%
}
';
?>
