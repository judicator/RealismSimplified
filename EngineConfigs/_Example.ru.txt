// Имя конфигурации (модели) двигателя. Должно включать лишь латинские буквы, цифры, знак подчёркивания и минус
My-Cool-Engine-1
{
	// Используемое топливо/окислитель. Возможные варианты:
	// - AlcoLOX - этанол 75% + ж. кислород
	// - KeroLOX - керосин + ж. кислород
	// - HydroLOX - ж. водород + ж. кислород
	// - MethaLOX - ж. метан + ж. кислород
	// - Hypergolics - некриогенные самовоспламеняющиеся топливные компоненты. По умолчанию аэрозин + тетраксид азота
	// - MonoPropellant - монопропеллент. По умолчанию гидразин
	// - SolidFuel - твёрдое топливо
	// - LqdHydrogen - ж. водород
	// - LqdMethane - ж. метан
	// - Kerosene - керосин
	// - AvGas - авиационный бензин
	//
	propellants = AlcoLOX

	// Тип двигателя. Возможные варианты:
	// - SRB           - твердотопливный двигатель
	// - nuclear       - ядерный двигатель (пример: NERVA)
	// - electric      - электрический двигатель (например, ионный)
	// - air_breathing - атмосферный двигатель, использующий ресурсы IntakeAir или IntakeAtm
	// - lower_stage   - ЖРД для нижних ступеней ракет
	// - sustainer     - маршевый ЖРД
	// - upper_stage   - ЖРД для верхних ступеней ракет
	// - OMS           - вакуумный ЖРД (для орбитальных манёвров)
	//
	type = lower_stage

	// Двигатель с вытеснительной подачей топлива? (true / false)
	// Если true, в дополнение к propellants, двигатель будет потреблять также pressurizationGas (по умолчанию гелий)
	// Соответственно, для работы такому двигателю будут нужны более тяжелые баки высокого давления
	//
	pressureFed = false

	// Минимальная тяга двигателя в вакууме, КН
	//
	minThrust = 312

	// Максимальная тяга двигателя в вакууме, КН
	//
	maxThrust = 312

	// Удельный импульс двигателя на уровне моря (при давлении 1 атм), сек.
	//
	ispSL = 203

	// Удельный импульс двигателя в вакууме, сек.
	//
	ispVac = 239

	// Кол-во зажиганий двигателя. -1 - бесконечное кол-во зажиганий
	// Используется только при наличии любого из модов: Kerbalism, EngineIgnitor, PayToPlay
	//
	ignitions = 1

	// Двигатель требует осадки топлива для зажигания? (true / false)
	// Используется только при наличии мода EngineIgnitor
	//
	ullage = true

	// Расчётное время непрерывной работы, в секундах. Двигатель может выйти из строя, если превысит это время работы
	// Используется только при наличии любого из модов: Kerbalism, PayToPlay
	// Конкретная механика расчёта времени наработки на отказ и поломок зависит от используемого мода
	//
	ratedBurnTime = 70

	// Отклоняемый вектор тяги - макс. отклонение в градусах
	// Будет использоваться только если деталь с двигателем имеет партмодуль ModuleGimbal
	//
	gimbalRange = 2.0

	// Сухая масса двигателя в тоннах. Можно использовать как этот параметр, так и dryMass - они идентичны
	// Приоритет отдаётся значению параметра dryMass
	//
	mass = 0.931

	// Сухая масса двигателя в тоннах. Можно использовать как этот параметр, так и mass - они идентичны
	// Приоритет отдаётся значению параметра dryMass
	//
	dryMass = 0.931

	// Масса твёрдого топлива внутри двигателя в тоннах. Имеет смысл только для type = SRB
	// Это именно масса твёрдого топлива, а не его количество!
	//
	solidFuelMass = 0

	// Генерировать стоимость двигателя автоматически? (true / false)
	// Если true, параметры cost, entryCost и upgradeCost будут заданы автоматически скриптом, генерирующим .cfg-файлы.
	// Пара замечаний:
	// 1. Для генерации стоимости скрипт использует те же формулы, что и MM-патчи мода (формулы описаны в комментариях в файле настроек),
	//    но коэфф-ты для формул жёстко заданы в скрипте, т.е. измененные коэфф-ты из файла настроек будут проигнорированы.
	// 2. Автоматическая генерация стоимости в скрипте реализована только для двигателей типов:
	//    - SRB           - твердотопливный двигатель
	//    - lower_stage   - ЖРД для нижних ступеней ракет
	//    - sustainer     - маршевый ЖРД
	//    - upper_stage   - ЖРД для верхних ступеней ракет
	//    - OMS           - вакуумный ЖРД (для орбитальных манёвров)
	//    Для остальных типов двигателей этот параметр будет проигнорирован.
	//
	autoGenerateCosts = true

	// Полная стоимость двигателя (если это ТТУ, то вместе с твёрдым топливом)
	//
	cost = 900

	// Стоимость исследования двигателя
	//
	entryCost = 9000

	// Стоимость исследования апгрейда до данной модели двигателя, если это апгрейд (isUpgrade = true)
	//
	upgradeCost = 0

	// Эта модель двигателя - апгрейд какой-то другой? (true / false)
	// Если true, автоматически будет создана нода PART_UPGRADE, а также для всех вариантов c данной моделью двигателя
	// в B9PS-переключалке, где указан "виртуальный" апгрейд RS_AppropriateEngineUpgrade, он будет заменён на подходящий
	//
	isUpgrade = false

	// Кривая изменения тяги двигателя в зависимости от остатка топлива в ступени
	// Обычно имеет смысл только для ТТУ
	//
	thrustCurve
	{
		key =	1	0.8622
		key =	0.001	0.0614
		key =	0	0.0044
	}

	// Родственные модели двигателей
	// Используется только при наличии мода PayToPlay
	// Формат записей:
	//  модель двигателя-родственника = коэфф-т родства
	//
	siblings
	{
		A-6     = 0.6
		A-7     = 0.5
		RD-102  = 0.5
		RD-103M = 0.5
	}

	// Если isUpgrade = true, для данной модели двигателя будет автоматически создан апгрейд в одном из узлов дерева технологий
	// Для апгрейда будет задана иконка по умолчанию, в зависимости от типа двигателя
	// Эту иконку можно поменять на более подходящую. Формат записей:
	//   мод, id детали для иконки
	//      либо
	//   id детали для иконки
	// RealismSimplified создаст набор ММ-патчей, которые будут обработаны в том же порядке, что указаны значения в этом поле, и смысл которых таков:
	// Если "мод" в наличии, задать для апгрейда иконку "id детали для иконки"
	// Пример патча: @PART_UPGRADE[MyEngineUpgrade]:NEEDS[Bluedog_DB/Parts/Delta/DeltaK] { %partIcon = bluedog_AJ10_118F }
	// Если указан только "id детали для иконки", эта иконка будет задана без условия наличия какого-либо мода
	//
	upgradeIcons
	{
		Bluedog_DB/Parts/Delta/DeltaK, bluedog_AJ10_118F
		KWRocketry/Parts/Engines/1mVestaVR1, KW1mengineVestaVR1
		RS_Engine_AJ10_Family
	}
}
