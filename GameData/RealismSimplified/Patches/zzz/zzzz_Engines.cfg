// ===================================================================================================================
// FIXME
// ===================================================================================================================

// Values from settings
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*],~RS_PressureFedEngines[]]:FOR[zzzzRealismSimplifiedEngines]
{
	RS_PressureFedEngines = #$@REALISM_SIMPLIFIED/pressureFedEngines$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*],~RS_AlcoLOX_Engines[]]:FOR[zzzzRealismSimplifiedEngines]
{
	RS_AlcoLOX_Engines = #$@REALISM_SIMPLIFIED/AlcoLOX_Engines$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*],~RS_AvGas_Engines[]]:FOR[zzzzRealismSimplifiedEngines]
{
	RS_AvGas_Engines = #$@REALISM_SIMPLIFIED/AvGas_Engines$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*],~RS_SRBUniversalMinThrust[]]:FOR[zzzzRealismSimplifiedEngines]
{
	RS_SRBUniversalMinThrust = #$@REALISM_SIMPLIFIED/SRB_UniversalMinThrust$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*],~RS_SimpleOMSEngines[]]:FOR[zzzzRealismSimplifiedEngines]
{
	RS_SimpleOMSEngines = #$@REALISM_SIMPLIFIED/simpleOMSEngines$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*],~RS_SimpleLFEngines[]]:FOR[zzzzRealismSimplifiedEngines]
{
	RS_SimpleLFEngines = #$@REALISM_SIMPLIFIED/simpleLFEngines$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*],~RS_EnginesResponseTime[]]:FOR[zzzzRealismSimplifiedEngines]
{
	RS_EnginesResponseTime = #$@REALISM_SIMPLIFIED/engines_UseResponseTime$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*],~RS_EnginesGimbalResponseSpeed[]]:FOR[zzzzRealismSimplifiedEngines]
{
	RS_EnginesGimbalResponseSpeed = #$@REALISM_SIMPLIFIED/engines_UseGimbalResponseSpeed$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*],~RS_OverrideEnginesPrices[]]:FOR[zzzzRealismSimplifiedEngines]
{
	RS_OverrideEnginesPrices = #$@REALISM_SIMPLIFIED/overrideEnginesPrices$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*],~RS_AutoGenerateEnginesPrices[]]:FOR[zzzzRealismSimplifiedEngines]
{
	RS_AutoGenerateEnginesPrices = #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*],~RS_AutoGenerateEnginesPrices_ForConfiguredEngines[]]:FOR[zzzzRealismSimplifiedEngines]
{
	RS_AutoGenerateEnginesPrices_ForConfiguredEngines = #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_ForConfiguredEngines$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*],~RS_EnginesTitlesUpdate[]]:FOR[zzzzRealismSimplifiedEngines]
{
	RS_EnginesTitlesUpdate = #$@REALISM_SIMPLIFIED/engines_TitlesUpdate$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*],~RS_EnginesDescriptionsUpdate[]]:FOR[zzzzRealismSimplifiedEngines]
{
	RS_EnginesDescriptionsUpdate = #$@REALISM_SIMPLIFIED/engines_DescriptionsUpdate$
}


// ===================================================================================================================
// Multimode, primary and auxiliary engines
// ===================================================================================================================

// Multimode engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineMultimode[],@MODULE[ModuleEngines*],@MODULE[MultiModeEngine]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineMultimode = true
}

// Mark first ModuleEngines* on part as primary, any others as auxiliary
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePrimary[],~RS_EngineAuxiliary[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePrimary[],~RS_EngineAuxiliary[]],0
	{
		%RS_EnginePrimary = true
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePrimary[],~RS_EngineAuxiliary[]],1
	{
		%RS_EngineAuxiliary = true
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePrimary[],~RS_EngineAuxiliary[]],2
	{
		%RS_EngineAuxiliary = true
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePrimary[],~RS_EngineAuxiliary[]],3
	{
		%RS_EngineAuxiliary = true
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePrimary[],~RS_EngineAuxiliary[]],4
	{
		%RS_EngineAuxiliary = true
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePrimary[],~RS_EngineAuxiliary[]],5
	{
		%RS_EngineAuxiliary = true
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePrimary[],~RS_EngineAuxiliary[]],6
	{
		%RS_EngineAuxiliary = true
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePrimary[],~RS_EngineAuxiliary[]],7
	{
		%RS_EngineAuxiliary = true
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePrimary[],~RS_EngineAuxiliary[]],8
	{
		%RS_EngineAuxiliary = true
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineAuxiliary[*rue],#RS_EngineConfig[*ernier*],#RS_EngineGimbalRange[>0]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineVernierGimbalRange = #$MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineAuxiliary[*rue],#RS_EngineConfig[*ernier*],#RS_EngineGimbalRange[>0]],0/RS_EngineGimbalRange$
}

// Set engine config and other params for part from primary ModuleEngines*
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineConfig[*],#RS_EnginePrimary[*rue]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineConfig = #$MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineConfig[*],#RS_EnginePrimary[*rue]],0/RS_EngineConfig$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineGimbalRange[*],#RS_EnginePrimary[*rue]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineGimbalRange = #$MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineGimbalRange[*],#RS_EnginePrimary[*rue]],0/RS_EngineGimbalRange$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineGimbalRange[0.0*]]:FOR[zzzzRealismSimplifiedEngines]
{
	@RS_EngineGimbalRange = 0
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineIgnitions[*],#RS_EnginePrimary[*rue]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineIgnitions = #$MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineIgnitions[*],#RS_EnginePrimary[*rue]],0/RS_EngineIgnitions$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineUllage[*],#RS_EnginePrimary[*rue]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineUllage = #$MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineUllage[*],#RS_EnginePrimary[*rue]],0/RS_EngineUllage$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineRatedBurnTime[*],#RS_EnginePrimary[*rue]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineRatedBurnTime = #$MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineRatedBurnTime[*],#RS_EnginePrimary[*rue]],0/RS_EngineRatedBurnTime$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_SolidFuelMass[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_SolidFuelMass[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_SolidFuelMass = #$MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_SolidFuelMass[*],#RS_EnginePrimary[*rue]],0/RS_SolidFuelMass$
}

// Exotic engines
//
// Exotic propellants
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	// IntakeLqd - underwater engines
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[IntakeLqd]],*
	{
		%RS_IgnoreEngine = true
		%RS_EngineExotic = true
	}
	// Antimatter
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[Antimatter]],*
	{
		%RS_IgnoreEngine = true
		%RS_EngineExotic = true
	}
	// Nuclear Salt Water
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[NuclearSaltWater]],*
	{
		%RS_IgnoreEngine = true
		%RS_EngineExotic = true
	}
	// Fission Pellets
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[FissionPellets]],*
	{
		%RS_IgnoreEngine = true
		%RS_EngineExotic = true
	}
	// Fission Particles
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[FissionParticles]],*
	{
		%RS_IgnoreEngine = true
		%RS_EngineExotic = true
	}
	// Lqd. Deuterium
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[LqdDeuterium]],*
	{
		%RS_IgnoreEngine = true
		%RS_EngineExotic = true
	}
	// Lqd. Helium-3
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[LqdHe3]],*
	{
		%RS_IgnoreEngine = true
		%RS_EngineExotic = true
	}
	// Enriched Uranium only
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[EnrichedUranium],!PROPELLANT[LiquidFuel],!PROPELLANT[LqdHydrogen],!PROPELLANT[LqdMethane],!PROPELLANT[MonoPropellant]],*
	{
		%RS_IgnoreEngine = true
		%RS_EngineExotic = true
	}
	// PolyvinylChloride (KSPIE, really???)
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[PolyvinylChloride]],*
	{
		%RS_IgnoreEngine = true
		%RS_EngineExotic = true
	}
	// Aluminium
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[Aluminium]],*
	{
		%RS_IgnoreEngine = true
		%RS_EngineExotic = true
	}
	// AluLOx
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[AluLOx]],*
	{
		%RS_IgnoreEngine = true
		%RS_EngineExotic = true
	}
	// Anti-Hydrogen
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[AntiHydrogen]],*
	{
		%RS_IgnoreEngine = true
		%RS_EngineExotic = true
	}
	// Solid Hydrogen
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[SolidHydrogen]],*
	{
		%RS_IgnoreEngine = true
		%RS_EngineExotic = true
	}
	// Metallic Hydrogen
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[MtlHydrogen]],*
	{
		%RS_IgnoreEngine = true
		%RS_EngineExotic = true
	}
	// Vacuum Plasma
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[VacuumPlasma]],*
	{
		%RS_IgnoreEngine = true
		%RS_EngineExotic = true
	}
	// Ultra Dense Deuterium
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[UltraDenseDeuterium]],*
	{
		%RS_IgnoreEngine = true
		%RS_EngineExotic = true
	}
	// Diatomic Metastable Helium
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[DiatomicMetastableHelium]],*
	{
		%RS_IgnoreEngine = true
		%RS_EngineExotic = true
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EngineExotic[*rue]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_IgnoreEngine = true
}
// KSPIE engines - ignore them
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ThermalEngineController]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_IgnoreEngine = true
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[FissionEngineController]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_IgnoreEngine = true
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ElectricEngineControllerFX]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_IgnoreEngine = true
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[FusionEngineController]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_IgnoreEngine = true
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ChemicalEngineController]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_IgnoreEngine = true
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ChemicalEngine]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_IgnoreEngine = true
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEnginesWarp]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_IgnoreEngine = true
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[InterstellarFissionNTR]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_IgnoreEngine = true
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEnginesThermalNozzle]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_IgnoreEngine = true
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEnginesMagneticNozzle]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_IgnoreEngine = true
}

// Generic engines categories
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	// Air-breathing engines
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[IntakeAir]],*
	{
		%RS_EngineType = air_breathing
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[IntakeAtm]],*
	{
		%RS_EngineType = air_breathing
	}
	// Electric
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[ElectricCharge]],*
	{
		%RS_EngineType = electric
	}
	// SRBs
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[SolidFuel],!PROPELLANT[MonoPropellant],!PROPELLANT[LiquidFuel],!PROPELLANT[LqdHydrogen],!PROPELLANT[LqdMethane],!PROPELLANT[Oxidizer],!PROPELLANT[Intake*]],*
	{
		%RS_EngineType = SRB
	}
	// Nuclear
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[LiquidFuel],!PROPELLANT[LqdHydrogen],!PROPELLANT[LqdMethane],!PROPELLANT[Oxidizer],!PROPELLANT[Intake*],!PROPELLANT[SolidFuel],!PROPELLANT[MonoPropellant]],*
	{
		%RS_EngineType = nuclear
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[LqdHydrogen],!PROPELLANT[LiquidFuel],!PROPELLANT[LqdMethane],!PROPELLANT[Oxidizer],!PROPELLANT[Intake*],!PROPELLANT[SolidFuel],!PROPELLANT[MonoPropellant]],*
	{
		%RS_EngineType = nuclear
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[LqdMethane],!PROPELLANT[LiquidFuel],!PROPELLANT[LqdHydrogen],!PROPELLANT[Oxidizer],!PROPELLANT[Intake*],!PROPELLANT[SolidFuel],!PROPELLANT[MonoPropellant]],*
	{
		%RS_EngineType = nuclear
	}
	// Liquid fuel engines
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[MonoPropellant],!PROPELLANT[LiquidFuel],!PROPELLANT[LqdHydrogen],!PROPELLANT[LqdMethane],!PROPELLANT[Oxidizer],!PROPELLANT[ElectricCharge],!PROPELLANT[Intake*],!PROPELLANT[SolidFuel]],*
	{
		%RS_EngineType = liquid_fuel
		%RS_MonopropEngine = true
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[LiquidFuel],@PROPELLANT[Oxidizer],!PROPELLANT[MonoPropellant],!PROPELLANT[LqdHydrogen],!PROPELLANT[LqdMethane],!PROPELLANT[Intake*],!PROPELLANT[SolidFuel]],*
	{
		%RS_EngineType = liquid_fuel
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[LqdHydrogen],@PROPELLANT[Oxidizer],!PROPELLANT[MonoPropellant],!PROPELLANT[LiquidFuel],!PROPELLANT[LqdMethane],!PROPELLANT[Intake*],!PROPELLANT[SolidFuel]],*
	{
		%RS_EngineType = liquid_fuel
		%RS_HydroLOXEngine = true
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[],@PROPELLANT[LqdMethane],@PROPELLANT[Oxidizer],!PROPELLANT[MonoPropellant],!PROPELLANT[LqdHydrogen],!PROPELLANT[LiquidFuel],!PROPELLANT[Intake*],!PROPELLANT[SolidFuel]],*
	{
		%RS_EngineType = liquid_fuel
		%RS_MethaLOXEngine = true
	}
}

// Define engine tech level (high, medium or low) by it's tech node
//
// Low tech
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_PartTechLevel[<4],~RS_EngineTechLevel[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineTechLevel = low
}
// Mid tech
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_PartTechLevel[<6],~RS_EngineTechLevel[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineTechLevel = low
}
// Still not defined? High tech it is
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineTechLevel[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineTechLevel = high
}

// If engine has no RS_MaxThrust defined (it's usually defined from in engine config file), multiply min and max thrust by unconfigured*Engines* coeffs
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[*],~RS_MaxThrust[],~RS_EngineRetainThrust[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[liquid_fuel],~RS_MaxThrust[],#minThrust[*],#maxThrust[*]],*
	{
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_ThrustCoeff$
		@maxThrust *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_ThrustCoeff$
	}
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[OMS],~RS_MaxThrust[],#minThrust[*],#maxThrust[*]],*
	{
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_ThrustCoeff$
		@maxThrust *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_ThrustCoeff$
	}
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[upper_stage],~RS_MaxThrust[],#minThrust[*],#maxThrust[*]],*
	{
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_ThrustCoeff$
		@maxThrust *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_ThrustCoeff$
	}
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[sustainer],~RS_MaxThrust[],#minThrust[*],#maxThrust[*]],*
	{
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_ThrustCoeff$
		@maxThrust *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_ThrustCoeff$
	}
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[lower_stage],~RS_MaxThrust[],#minThrust[*],#maxThrust[*]],*
	{
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_ThrustCoeff$
		@maxThrust *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_ThrustCoeff$
	}
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[SRB],~RS_MaxThrust[],#minThrust[*],#maxThrust[*]],*
	{
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_SRB_ThrustCoeff$
		@maxThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_SRB_ThrustCoeff$
		%RS_MaxThrust = #$maxThrust$
	}
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[nuclear],~RS_MaxThrust[],#minThrust[*],#maxThrust[*]],*
	{
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Nuclear_ThrustCoeff$
		@maxThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Nuclear_ThrustCoeff$
		%RS_MaxThrust = #$maxThrust$
	}
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[electric],~RS_MaxThrust[],#minThrust[*],#maxThrust[*]],*
	{
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Electric_ThrustCoeff$
		@maxThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Electric_ThrustCoeff$
		%RS_MaxThrust = #$maxThrust$
	}
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[air_breathing],~RS_MaxThrust[],#minThrust[*],#maxThrust[*]],*
	{
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_AirBreathing_ThrustCoeff$
		@maxThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_AirBreathing_ThrustCoeff$
		%RS_MaxThrust = #$maxThrust$
	}
}

// Define vacuum and sea level ISP (if not already defined), define liquid fuel engine type from ISP ratio and other params
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[*],~RS_ISPVac[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[*],~RS_ISPVac[],@atmosphereCurve],*
	{
		%RS_ISPVac = #$atmosphereCurve/key,0$
		@RS_ISPVac ^= :^[\d\.]* ([\d\.]+) *.*$:$1:
		%RS_PreserveAtmoCurve = true
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[*],~RS_ISPSL[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[*],~RS_ISPSL[],@atmosphereCurve],*
	{
		%RS_ISPSL = #$atmosphereCurve/key,1$
		@RS_ISPSL ^= :^[\d\.]* ([\d\.]+) *.*$:$1:
		%RS_PreserveAtmoCurve = true
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[liquid_fuel],#RS_ISPVac[>0],#RS_ISPSL[>0]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[liquid_fuel],#RS_ISPVac[>0],#RS_ISPSL[>0]],*
	{
		%RS_ISPRatio = #$RS_ISPVac$
		@RS_ISPRatio /= #$RS_ISPSL$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[liquid_fuel]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[liquid_fuel],#RS_MonopropEngine[*rue]],*
	{
		@RS_EngineType = OMS
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[liquid_fuel],#RS_ISPRatio[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[liquid_fuel],#maxThrust[<300],#RS_ISPRatio[>1.499]],*
	{
		@RS_EngineType = OMS
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[liquid_fuel],#RS_ISPRatio[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[liquid_fuel],#RS_ISPRatio[>1.269]],*
	{
		@RS_EngineType = upper_stage
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[liquid_fuel],#RS_ISPRatio[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[liquid_fuel],#RS_ISPRatio[>1.149]],*
	{
		@RS_EngineType = sustainer
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[liquid_fuel]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[liquid_fuel]],*
	{
		@RS_EngineType = lower_stage
	}
}

// Liquid fuel engines propellants
// OMS
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[OMS],#RS_ISPVac[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[OMS],#RS_HydroLOXEngine[*rue],#RS_ISPVac[>379]],*
	{
		RS_EnginePropellants = HydroLOX
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[OMS],#RS_ISPVac[>399]],*
	{
		RS_EnginePropellants = HydroLOX
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[OMS],#RS_MethaLOXEngine[*rue],#RS_ISPVac[>329]],*
	{
		RS_EnginePropellants = MethaLOX
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[OMS],#RS_ISPVac[>360]],*
	{
		RS_EnginePropellants = MethaLOX
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[OMS],#RS_ISPVac[>329]],*
	{
		RS_EnginePropellants = KeroLOX
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[OMS],#RS_ISPVac[>259]],*
	{
		RS_EnginePropellants = Hypergolics
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[OMS]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[OMS]],*
	{
		RS_EnginePropellants = MonoPropellant
	}
}
// Upper stage
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[upper_stage],#RS_ISPVac[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[upper_stage],#RS_HydroLOXEngine[*rue],#RS_ISPVac[>379]],*
	{
		RS_EnginePropellants = HydroLOX
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[upper_stage],#RS_ISPVac[>399]],*
	{
		RS_EnginePropellants = HydroLOX
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[upper_stage],#RS_MethaLOXEngine[*rue],#RS_ISPVac[>329]],*
	{
		RS_EnginePropellants = MethaLOX
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[upper_stage],#RS_ISPVac[>360]],*
	{
		RS_EnginePropellants = MethaLOX
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[upper_stage],#RS_ISPVac[>299]],*
	{
		RS_EnginePropellants = KeroLOX
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[upper_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[upper_stage]],*
	{
		RS_EnginePropellants = Hypergolics
	}
}
// Sustainer
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[sustainer],#RS_ISPVac[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[sustainer],#RS_HydroLOXEngine[*rue],#RS_ISPVac[>349]],*
	{
		RS_EnginePropellants = HydroLOX
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[sustainer],#RS_ISPVac[>372]],*
	{
		RS_EnginePropellants = HydroLOX
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[sustainer],#RS_MethaLOXEngine[*rue],#RS_ISPVac[>309]],*
	{
		RS_EnginePropellants = MethaLOX
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[sustainer],#RS_ISPVac[>344]],*
	{
		RS_EnginePropellants = MethaLOX
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[sustainer],#RS_ISPVac[>269]],*
	{
		RS_EnginePropellants = KeroLOX
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[sustainer]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[sustainer]],*
	{
		RS_EnginePropellants = AlcoLOX
	}
}
// Lower stage
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[lower_stage],#RS_ISPVac[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],,~RS_EnginePropellants[],#RS_EngineType[lower_stage],#RS_HydroLOXEngine[*rue],#RS_ISPVac[>349]],*
	{
		RS_EnginePropellants = HydroLOX
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[lower_stage],#RS_ISPVac[>372]],*
	{
		RS_EnginePropellants = HydroLOX
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[lower_stage],#RS_MethaLOXEngine[*rue],#RS_ISPVac[>309]],*
	{
		RS_EnginePropellants = MethaLOX
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[lower_stage],#RS_ISPVac[>339]],*
	{
		RS_EnginePropellants = MethaLOX
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[lower_stage],#RS_ISPVac[>269]],*
	{
		RS_EnginePropellants = KeroLOX
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[lower_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[lower_stage]],*
	{
		RS_EnginePropellants = AlcoLOX
	}
}
// Nuclear engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[nuclear],@PROPELLANT[LiquidFuel],#RS_ISPVac[<451]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[nuclear],@PROPELLANT[LiquidFuel]],*
	{
		RS_EnginePropellants = MonoPropellant
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[nuclear],@PROPELLANT[LiquidFuel],#RS_ISPVac[<751]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[nuclear],@PROPELLANT[LiquidFuel]],*
	{
		%RS_EnginePropellants = LqdMethane
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[nuclear],@PROPELLANT[LiquidFuel]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[nuclear],@PROPELLANT[LiquidFuel]],*
	{
		%RS_EnginePropellants = LqdHydrogen
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[nuclear],@PROPELLANT[MonoPropellant]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[nuclear],@PROPELLANT[MonoPropellant]],*
	{
		%RS_EnginePropellants = MonoPropellant
	}
}
// Air-breathing engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineMultimode[*rue],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[air_breathing],@PROPELLANT[LiquidFuel],!PROPELLANT[Oxidizer]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[air_breathing],#RS_EnginePropellants[MethaLOX]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[air_breathing],@PROPELLANT[LiquidFuel],!PROPELLANT[Oxidizer]],*
	{
		%RS_EnginePropellants = LqdMethane
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineMultimode[*rue],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[air_breathing],@PROPELLANT[LiquidFuel],!PROPELLANT[Oxidizer]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineType[air_breathing],#RS_EnginePropellants[HydroLOX]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[air_breathing],@PROPELLANT[LiquidFuel],!PROPELLANT[Oxidizer]],*
	{
		%RS_EnginePropellants = LqdHydrogen
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[air_breathing],@PROPELLANT[LiquidFuel],!PROPELLANT[Oxidizer]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[air_breathing],@PROPELLANT[LiquidFuel],!PROPELLANT[Oxidizer]],*
	{
		%RS_EnginePropellants = Kerosene
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[air_breathing],@PROPELLANT[LiquidFuel],@PROPELLANT[Oxidizer]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[air_breathing],@PROPELLANT[LiquidFuel]],*
	{
		%RS_EnginePropellants = MethaLOX
	}
}
// Electric engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[electric],@PROPELLANT[LiquidFuel],!PROPELLANT[Oxidizer]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[electric],@PROPELLANT[LiquidFuel],!PROPELLANT[Oxidizer]],*
	{
		%RS_EnginePropellants = MonoPropellant
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[electric],@PROPELLANT[MonoPropellant]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[electric],@PROPELLANT[MonoPropellant]],*
	{
		%RS_EnginePropellants = MonoPropellant
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[electric],@PROPELLANT[LqdHydrogen],!PROPELLANT[Oxidizer]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[electric],@PROPELLANT[LqdHydrogen],!PROPELLANT[Oxidizer]],*
	{
		%RS_EnginePropellants = LqdHydrogen
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[electric],@PROPELLANT[LqdMethane],!PROPELLANT[Oxidizer]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePropellants[],#RS_EngineType[electric],@PROPELLANT[LqdMethane],!PROPELLANT[Oxidizer]],*
	{
		%RS_EnginePropellants = LqdMethane
	}
}

// Update ISP atmosphereCurve
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_ISPVac[*],#RS_ISPSL[*],~RS_PreserveAtmoCurve[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_ISPVac[*],#RS_ISPSL[*],~RS_PreserveAtmoCurve[]],*
	{
		!atmosphereCurve{}
		atmosphereCurve
		{
			key = #0 $../RS_ISPVac$
			key = #1 $../RS_ISPSL$
		}
	}
}

// Is engine pressure-fed?
// OMS
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[OMS]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[OMS],#RS_EnginePropellants[Hypergolics],#maxThrust[<91]],*
	{
		%RS_EnginePressureFed = true
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[OMS],#RS_EnginePropellants[MonoPropellant],#maxThrust[<91]],*
	{
		%RS_EnginePressureFed = true
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineTechLevel[low],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[OMS]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[OMS]],*
	{
		%RS_EnginePressureFed = #$@REALISM_SIMPLIFIED/unconfiguredEngines_OMS_LowTech_PressureFed$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineTechLevel[med],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[OMS]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[OMS]],*
	{
		%RS_EnginePressureFed = #$@REALISM_SIMPLIFIED/unconfiguredEngines_OMS_MedTech_PressureFed$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineTechLevel[high],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[OMS]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[OMS]],*
	{
		%RS_EnginePressureFed = #$@REALISM_SIMPLIFIED/unconfiguredEngines_OMS_HighTech_PressureFed$
	}
}
// Upper stage
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineTechLevel[low],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[upper_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[upper_stage]],*
	{
		%RS_EnginePressureFed = #$@REALISM_SIMPLIFIED/unconfiguredEngines_UpperStage_LowTech_PressureFed$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineTechLevel[med],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[upper_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[upper_stage]],*
	{
		%RS_EnginePressureFed = #$@REALISM_SIMPLIFIED/unconfiguredEngines_UpperStage_MidTech_PressureFed$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineTechLevel[high],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[upper_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[upper_stage]],*
	{
		%RS_EnginePressureFed = #$@REALISM_SIMPLIFIED/unconfiguredEngines_UpperStage_HighTech_PressureFed$
	}
}
// Sustainer
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineTechLevel[low],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[sustainer]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[sustainer]],*
	{
		%RS_EnginePressureFed = #$@REALISM_SIMPLIFIED/unconfiguredEngines_Sustainer_LowTech_PressureFed$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineTechLevel[med],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[sustainer]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[sustainer]],*
	{
		%RS_EnginePressureFed = #$@REALISM_SIMPLIFIED/unconfiguredEngines_Sustainer_MidTech_PressureFed$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineTechLevel[high],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[sustainer]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[sustainer]],*
	{
		%RS_EnginePressureFed = #$@REALISM_SIMPLIFIED/unconfiguredEngines_Sustainer_HighTech_PressureFed$
	}
}
// Lower stage
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineTechLevel[low],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[lower_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[lower_stage]],*
	{
		%RS_EnginePressureFed = #$@REALISM_SIMPLIFIED/unconfiguredEngines_LowerStage_LowTech_PressureFed$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineTechLevel[med],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[lower_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[lower_stage]],*
	{
		%RS_EnginePressureFed = #$@REALISM_SIMPLIFIED/unconfiguredEngines_LowerStage_MidTech_PressureFed$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineTechLevel[high],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[lower_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[lower_stage]],*
	{
		%RS_EnginePressureFed = #$@REALISM_SIMPLIFIED/unconfiguredEngines_LowerStage_HighTech_PressureFed$
	}
}
// Air-breathing engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineTechLevel[high],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[air_breathing]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[air_breathing]],*
	{
		%RS_EnginePressureFed = #$@REALISM_SIMPLIFIED/unconfiguredEngines_AirBreathing_PressureFed$
	}
}
// Nuclear engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineTechLevel[high],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[nuclear]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[nuclear]],*
	{
		%RS_EnginePressureFed = #$@REALISM_SIMPLIFIED/unconfiguredEngines_Nuclear_PressureFed$
	}
}
// Electric engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineTechLevel[high],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[electric]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePressureFed[],#RS_EngineType[electric]],*
	{
		%RS_EnginePressureFed = #$@REALISM_SIMPLIFIED/unconfiguredEngines_Electric_PressureFed$
	}
}

// Set propellants for auxiliary engines the same as for primary engine (but not for multimode engines)
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineMultimode[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[*]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineAuxiliary[*rue]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineAuxiliary[*rue]],*
	{
		%RS_EnginePropellants = #$MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[*]],0/RS_EnginePropellants$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineMultimode[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePressureFed[*]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineAuxiliary[*rue]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineAuxiliary[*rue]],*
	{
		%RS_EnginePressureFed = #$MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePressureFed[*]],0/RS_EnginePressureFed$
	}
}

// Min and max thrust coeffs for various engine types
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[*],~RS_MaxThrust[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[OMS],~RS_MaxThrust[],#minThrust[*],#maxThrust[*]],*
	{
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_OMS_ThrustCoeff$
		@maxThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_OMS_ThrustCoeff$
		%RS_MaxThrust = #$maxThrust$
	}
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[upper_stage],~RS_MaxThrust[],#minThrust[*],#maxThrust[*]],*
	{
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_UpperStage_ThrustCoeff$
		@maxThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_UpperStage_ThrustCoeff$
		%RS_MaxThrust = #$maxThrust$
	}
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[sustainer],~RS_MaxThrust[],#minThrust[*],#maxThrust[*]],*
	{
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Sustainer_ThrustCoeff$
		@maxThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Sustainer_ThrustCoeff$
		%RS_MaxThrust = #$maxThrust$
	}
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[lower_stage],~RS_MaxThrust[],#minThrust[*],#maxThrust[*]],*
	{
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_LowerStage_ThrustCoeff$
		@maxThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_LowerStage_ThrustCoeff$
		%RS_MaxThrust = #$maxThrust$
	}
}
// SRB
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[SRB],#RS_MaxThrust[*],~RS_MinThrust[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[SRB],#RS_MaxThrust[*],~RS_MinThrust[]],*
	{
		%minThrust = #$RS_MaxThrust$
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_SRB_MinThrustPercent$
		@minThrust /= 100
		%RS_MinThrust = #$minThrust$
	}
}
// Air-breathing engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[air_breathing],#RS_MaxThrust[*],~RS_MinThrust[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[air_breathing],#RS_MaxThrust[*],~RS_MinThrust[]],*
	{
		%minThrust = #$RS_MaxThrust$
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_AirBreathing_MinThrustPercent$
		@minThrust /= 100
		%RS_MinThrust = #$minThrust$
	}
}
// Nuclear engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[nuclear],#RS_MaxThrust[*],~RS_MinThrust[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[nuclear],#RS_MaxThrust[*],~RS_MinThrust[]],*
	{
		%minThrust = #$RS_MaxThrust$
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Nuclear_MinThrustPercent$
		@minThrust /= 100
		%RS_MinThrust = #$minThrust$
	}
}
// Electric engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[electric],#RS_MaxThrust[*],~RS_MinThrust[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[electric],#RS_MaxThrust[*],~RS_MinThrust[]],*
	{
		%minThrust = #$RS_MaxThrust$
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Electric_MinThrustPercent$
		@minThrust /= 100
		%RS_MinThrust = #$minThrust$
	}
}
// Low tech liquid fuel engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineTechLevel[low],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[*],#RS_MaxThrust[*],~RS_MinThrust[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[OMS],#RS_MaxThrust[*],~RS_MinThrust[]],*
	{
		%minThrust = #$RS_MaxThrust$
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_OMS_LowTech_MinThrustPercent$
		@minThrust /= 100
		%RS_MinThrust = #$minThrust$
	}
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[upper_stage],#RS_MaxThrust[*],~RS_MinThrust[]],*
	{
		%minThrust = #$RS_MaxThrust$
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_UpperStage_LowTech_MinThrustPercent$
		@minThrust /= 100
		%RS_MinThrust = #$minThrust$
	}
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[sustainer],#RS_MaxThrust[*],~RS_MinThrust[]],*
	{
		%minThrust = #$RS_MaxThrust$
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Sustainer_LowTech_MinThrustPercent$
		@minThrust /= 100
		%RS_MinThrust = #$minThrust$
	}
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[lower_stage],#RS_MaxThrust[*],~RS_MinThrust[]],*
	{
		%minThrust = #$RS_MaxThrust$
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_LowerStage_LowTech_MinThrustPercent$
		@minThrust /= 100
		%RS_MinThrust = #$minThrust$
	}
}
// Mid tech liquid fuel engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineTechLevel[mid],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[*],#RS_MaxThrust[*],~RS_MinThrust[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[OMS],#RS_MaxThrust[*],~RS_MinThrust[]],*
	{
		%minThrust = #$RS_MaxThrust$
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_OMS_MidTech_MinThrustPercent$
		@minThrust /= 100
		%RS_MinThrust = #$minThrust$
	}
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[upper_stage],#RS_MaxThrust[*],~RS_MinThrust[]],*
	{
		%minThrust = #$RS_MaxThrust$
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_UpperStage_MidTech_MinThrustPercent$
		@minThrust /= 100
		%RS_MinThrust = #$minThrust$
	}
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[sustainer],#RS_MaxThrust[*],~RS_MinThrust[]],*
	{
		%minThrust = #$RS_MaxThrust$
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Sustainer_MidTech_MinThrustPercent$
		@minThrust /= 100
		%RS_MinThrust = #$minThrust$
	}
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[lower_stage],#RS_MaxThrust[*],~RS_MinThrust[]],*
	{
		%minThrust = #$RS_MaxThrust$
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_LowerStage_MidTech_MinThrustPercent$
		@minThrust /= 100
		%RS_MinThrust = #$minThrust$
	}
}
// High tech liquid fuel engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineTechLevel[high],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[*],#RS_MaxThrust[*],~RS_MinThrust[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[OMS],#RS_MaxThrust[*],~RS_MinThrust[]],*
	{
		%minThrust = #$RS_MaxThrust$
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_OMS_HighTech_MinThrustPercent$
		@minThrust /= 100
		%RS_MinThrust = #$minThrust$
	}
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[upper_stage],#RS_MaxThrust[*],~RS_MinThrust[]],*
	{
		%minThrust = #$RS_MaxThrust$
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_UpperStage_HighTech_MinThrustPercent$
		@minThrust /= 100
		%RS_MinThrust = #$minThrust$
	}
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[sustainer],#RS_MaxThrust[*],~RS_MinThrust[]],*
	{
		%minThrust = #$RS_MaxThrust$
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Sustainer_HighTech_MinThrustPercent$
		@minThrust /= 100
		%RS_MinThrust = #$minThrust$
	}
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[lower_stage],#RS_MaxThrust[*],~RS_MinThrust[]],*
	{
		%minThrust = #$RS_MaxThrust$
		@minThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_LowerStage_HighTech_MinThrustPercent$
		@minThrust /= 100
		%RS_MinThrust = #$minThrust$
	}
}
// Set minThrust to RS_MinThrust, and maxThrust to RS_MaxThrust
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_MinThrust[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_MinThrust[*]],*
	{
		%minThrust = #$RS_MinThrust$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_MaxThrust[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_MaxThrust[*]],*
	{
		%maxThrust = #$RS_MaxThrust$
	}
}

// Default ignitions count for various engines
// SRB
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineIgnitions[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[SRB]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineIgnitions = #$@REALISM_SIMPLIFIED/unconfiguredEngines_SRB_Ignitions$
}
// Air-breathing
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineIgnitions[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[air_breathing]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineIgnitions = #$@REALISM_SIMPLIFIED/unconfiguredEngines_AirBreathing_Ignitions$
}
// Nuclear
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineIgnitions[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[nuclear]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineIgnitions = #$@REALISM_SIMPLIFIED/unconfiguredEngines_Nuclear_Ignitions$
}
// Electric
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineIgnitions[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[electric]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineIgnitions = #$@REALISM_SIMPLIFIED/unconfiguredEngines_Electric_Ignitions$
}
// Low tech OMS
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineIgnitions[],#RS_EngineTechLevel[low],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[OMS]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineIgnitions = #$@REALISM_SIMPLIFIED/unconfiguredEngines_OMS_LowTech_Ignitions$
}
// Mid tech OMS
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineIgnitions[],#RS_EngineTechLevel[mid],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[OMS]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineIgnitions = #$@REALISM_SIMPLIFIED/unconfiguredEngines_OMS_MidTech_Ignitions$
}
// High tech OMS
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineIgnitions[],#RS_EngineTechLevel[high],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[OMS]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineIgnitions = #$@REALISM_SIMPLIFIED/unconfiguredEngines_OMS_HighTech_Ignitions$
}
// Low tech upper stage
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineIgnitions[],#RS_EngineTechLevel[low],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[upper_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineIgnitions = #$@REALISM_SIMPLIFIED/unconfiguredEngines_UpperStage_LowTech_Ignitions$
}
// Mid tech upper stage
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineIgnitions[],#RS_EngineTechLevel[mid],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[upper_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineIgnitions = #$@REALISM_SIMPLIFIED/unconfiguredEngines_UpperStage_MidTech_Ignitions$
}
// High tech upper stage
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineIgnitions[],#RS_EngineTechLevel[high],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[upper_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineIgnitions = #$@REALISM_SIMPLIFIED/unconfiguredEngines_UpperStage_HighTech_Ignitions$
}
// Low tech sustainer
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineIgnitions[],#RS_EngineTechLevel[low],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[sustainer]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineIgnitions = #$@REALISM_SIMPLIFIED/unconfiguredEngines_Sustainer_LowTech_Ignitions$
}
// Mid tech sustainer
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineIgnitions[],#RS_EngineTechLevel[mid],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[sustainer]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineIgnitions = #$@REALISM_SIMPLIFIED/unconfiguredEngines_Sustainer_MidTech_Ignitions$
}
// High tech sustainer
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineIgnitions[],#RS_EngineTechLevel[high],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[sustainer]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineIgnitions = #$@REALISM_SIMPLIFIED/unconfiguredEngines_Sustainer_HighTech_Ignitions$
}
// Low tech lower stage
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineIgnitions[],#RS_EngineTechLevel[low],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[lower_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineIgnitions = #$@REALISM_SIMPLIFIED/unconfiguredEngines_LowerStage_LowTech_Ignitions$
}
// Mid tech lower stage
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineIgnitions[],#RS_EngineTechLevel[mid],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[lower_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineIgnitions = #$@REALISM_SIMPLIFIED/unconfiguredEngines_LowerStage_MidTech_Ignitions$
}
// High tech lower stage
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineIgnitions[],#RS_EngineTechLevel[high],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[lower_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineIgnitions = #$@REALISM_SIMPLIFIED/unconfiguredEngines_LowerStage_HighTech_Ignitions$
}

// Default "propellants ullage" value for various engines
// Is OMS engine subject for propellants ullage?
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineUllage[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePressureFed[*rue],#RS_EngineType[OMS],#RS_EnginePrimary[*rue],#maxThrust[<46]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineUllage = false
}
// Air-breathing
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineUllage[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[air_breathing]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineUllage = #$@REALISM_SIMPLIFIED/unconfiguredEngines_AirBreathing_Ullage$
}
// Nuclear
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineUllage[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[nuclear]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineUllage = #$@REALISM_SIMPLIFIED/unconfiguredEngines_Nuclear_Ullage$
}
// Electric
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineUllage[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[electric]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineUllage = #$@REALISM_SIMPLIFIED/unconfiguredEngines_Electric_Ullage$
}
// Low tech OMS
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineUllage[],#RS_EngineTechLevel[low],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[OMS]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineUllage = #$@REALISM_SIMPLIFIED/unconfiguredEngines_OMS_LowTech_Ullage$
}
// Mid tech OMS
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineUllage[],#RS_EngineTechLevel[mid],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[OMS]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineUllage = #$@REALISM_SIMPLIFIED/unconfiguredEngines_OMS_MidTech_Ullage$
}
// High tech OMS
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineUllage[],#RS_EngineTechLevel[high],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[OMS]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineUllage = #$@REALISM_SIMPLIFIED/unconfiguredEngines_OMS_HighTech_Ullage$
}
// Low tech upper stage
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineUllage[],#RS_EngineTechLevel[low],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[upper_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineUllage = #$@REALISM_SIMPLIFIED/unconfiguredEngines_UpperStage_LowTech_Ullage$
}
// Mid tech upper stage
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineUllage[],#RS_EngineTechLevel[mid],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[upper_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineUllage = #$@REALISM_SIMPLIFIED/unconfiguredEngines_UpperStage_MidTech_Ullage$
}
// High tech upper stage
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineUllage[],#RS_EngineTechLevel[high],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[upper_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineUllage = #$@REALISM_SIMPLIFIED/unconfiguredEngines_UpperStage_HighTech_Ullage$
}
// Low tech sustainer
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineUllage[],#RS_EngineTechLevel[low],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[sustainer]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineUllage = #$@REALISM_SIMPLIFIED/unconfiguredEngines_Sustainer_LowTech_Ullage$
}
// Mid tech sustainer
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineUllage[],#RS_EngineTechLevel[mid],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[sustainer]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineUllage = #$@REALISM_SIMPLIFIED/unconfiguredEngines_Sustainer_MidTech_Ullage$
}
// High tech sustainer
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineUllage[],#RS_EngineTechLevel[high],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[sustainer]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineUllage = #$@REALISM_SIMPLIFIED/unconfiguredEngines_Sustainer_HighTech_Ullage$
}
// Low tech lower stage
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineUllage[],#RS_EngineTechLevel[low],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[lower_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineUllage = #$@REALISM_SIMPLIFIED/unconfiguredEngines_LowerStage_LowTech_Ullage$
}
// Mid tech lower stage
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineUllage[],#RS_EngineTechLevel[mid],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[lower_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineUllage = #$@REALISM_SIMPLIFIED/unconfiguredEngines_LowerStage_MidTech_Ullage$
}
// High tech lower stage
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineUllage[],#RS_EngineTechLevel[high],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[lower_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineUllage = #$@REALISM_SIMPLIFIED/unconfiguredEngines_LowerStage_HighTech_Ullage$
}

// Default "rated burn time" value for various engines
// Air-breathing
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineRatedBurnTime[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[air_breathing]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineRatedBurnTime = #$@REALISM_SIMPLIFIED/unconfiguredEngines_AirBreathing_RatedBurnTime$
}
// Nuclear
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineRatedBurnTime[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[nuclear]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineRatedBurnTime = #$@REALISM_SIMPLIFIED/unconfiguredEngines_Nuclear_RatedBurnTime$
}
// Electric
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineRatedBurnTime[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[electric]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineRatedBurnTime = #$@REALISM_SIMPLIFIED/unconfiguredEngines_Electric_RatedBurnTime$
}
// Low tech OMS
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineRatedBurnTime[],#RS_EngineTechLevel[low],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[OMS]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineRatedBurnTime = #$@REALISM_SIMPLIFIED/unconfiguredEngines_OMS_LowTech_RatedBurnTime$
}
// Mid tech OMS
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineRatedBurnTime[],#RS_EngineTechLevel[mid],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[OMS]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineRatedBurnTime = #$@REALISM_SIMPLIFIED/unconfiguredEngines_OMS_MidTech_RatedBurnTime$
}
// High tech OMS
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineRatedBurnTime[],#RS_EngineTechLevel[high],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[OMS]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineRatedBurnTime = #$@REALISM_SIMPLIFIED/unconfiguredEngines_OMS_HighTech_RatedBurnTime$
}
// Low tech upper stage
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineRatedBurnTime[],#RS_EngineTechLevel[low],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[upper_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineRatedBurnTime = #$@REALISM_SIMPLIFIED/unconfiguredEngines_UpperStage_LowTech_RatedBurnTime$
}
// Mid tech upper stage
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineRatedBurnTime[],#RS_EngineTechLevel[mid],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[upper_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineRatedBurnTime = #$@REALISM_SIMPLIFIED/unconfiguredEngines_UpperStage_MidTech_RatedBurnTime$
}
// High tech upper stage
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineRatedBurnTime[],#RS_EngineTechLevel[high],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[upper_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineRatedBurnTime = #$@REALISM_SIMPLIFIED/unconfiguredEngines_UpperStage_HighTech_RatedBurnTime$
}
// Low tech sustainer
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineRatedBurnTime[],#RS_EngineTechLevel[low],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[sustainer]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineRatedBurnTime = #$@REALISM_SIMPLIFIED/unconfiguredEngines_Sustainer_LowTech_RatedBurnTime$
}
// Mid tech sustainer
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineRatedBurnTime[],#RS_EngineTechLevel[mid],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[sustainer]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineRatedBurnTime = #$@REALISM_SIMPLIFIED/unconfiguredEngines_Sustainer_MidTech_RatedBurnTime$
}
// High tech sustainer
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineRatedBurnTime[],#RS_EngineTechLevel[high],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[sustainer]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineRatedBurnTime = #$@REALISM_SIMPLIFIED/unconfiguredEngines_Sustainer_HighTech_RatedBurnTime$
}
// Low tech lower stage
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineRatedBurnTime[],#RS_EngineTechLevel[low],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[lower_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineRatedBurnTime = #$@REALISM_SIMPLIFIED/unconfiguredEngines_LowerStage_LowTech_RatedBurnTime$
}
// Mid tech lower stage
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineRatedBurnTime[],#RS_EngineTechLevel[mid],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[lower_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineRatedBurnTime = #$@REALISM_SIMPLIFIED/unconfiguredEngines_LowerStage_MidTech_RatedBurnTime$
}
// High tech lower stage
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineRatedBurnTime[],#RS_EngineTechLevel[high],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[lower_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineRatedBurnTime = #$@REALISM_SIMPLIFIED/unconfiguredEngines_LowerStage_HighTech_RatedBurnTime$
}

// Engines masses
// SRB
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_SolidFuelMass[],@RESOURCE[SolidFuel],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[SRB]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_SolidFuelMass = #$RESOURCE[SolidFuel]/amount$
	@RS_SolidFuelMass *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_SRB_SolidFuelAmountMultiplier$
	@RS_SolidFuelMass *= #$@RESOURCE_DEFINITION[SolidFuel]/density$
	@RS_SolidFuelMass *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_SRB_MassCoeff$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_SolidFuelMass[>0],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[SRB],~RS_EngineDryMass[],#RS_EngineMass[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[SRB],~RS_EngineDryMass[],#RS_EngineMass[*]],*
	{
		%RS_EngineDryMass = #$RS_EngineMass$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_SolidFuelMass[>0],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[SRB],~RS_EngineDryMass[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[SRB],~RS_EngineDryMass[]],*
	{
		%RS_EngineDryMass = #$../RS_SolidFuelMass$
		@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_SRB_DryMassRatio$
		@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_SRB_MassCoeff$
	}
}
// Air-breathing engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[air_breathing],~RS_EngineDryMass[],#RS_EngineMass[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[air_breathing],~RS_EngineDryMass[],#RS_EngineMass[*]],*
	{
		%RS_EngineDryMass = #$RS_EngineMass$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[air_breathing],~RS_EngineDryMass[],~RS_EngineMass[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[air_breathing],~RS_EngineDryMass[],~RS_EngineMass[*]],*
	{
		%RS_EngineDryMass = #$/mass$
		@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_AirBreathing_MassCoeff$
	}
}
// Nuclear engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[nuclear],~RS_EngineDryMass[],#RS_EngineMass[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[nuclear],~RS_EngineDryMass[],#RS_EngineMass[*]],*
	{
		%RS_EngineDryMass = #$RS_EngineMass$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[nuclear],~RS_EngineDryMass[],~RS_EngineMass[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[nuclear],~RS_EngineDryMass[],~RS_EngineMass[*]],*
	{
		%RS_EngineDryMass = #$/mass$
		@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Nuclear_MassCoeff$
	}
}
// Electric engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[electric],~RS_EngineDryMass[],#RS_EngineMass[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[electric],~RS_EngineDryMass[],#RS_EngineMass[*]],*
	{
		%RS_EngineDryMass = #$RS_EngineMass$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[electric],~RS_EngineDryMass[],~RS_EngineMass[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[electric],~RS_EngineDryMass[],~RS_EngineMass[*]],*
	{
		%RS_EngineDryMass = #$/mass$
		@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Electric_MassCoeff$
	}
}
// OMS engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[OMS],~RS_EngineDryMass[],#RS_EngineMass[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[OMS],~RS_EngineDryMass[],#RS_EngineMass[*]],*
	{
		%RS_EngineDryMass = #$RS_EngineMass$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[OMS],~RS_EngineDryMass[],~RS_EngineMass[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[OMS],~RS_EngineDryMass[],~RS_EngineMass[*]],*
	{
		%RS_EngineDryMass = #$/mass$
		@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_MassCoeff$
		@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_OMS_MassCoeff$
	}
}
// Upper stage engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[upper_stage],~RS_EngineDryMass[],#RS_EngineMass[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[upper_stage],~RS_EngineDryMass[],#RS_EngineMass[*]],*
	{
		%RS_EngineDryMass = #$RS_EngineMass$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[upper_stage],~RS_EngineDryMass[],~RS_EngineMass[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[upper_stage],~RS_EngineDryMass[],~RS_EngineMass[*]],*
	{
		%RS_EngineDryMass = #$/mass$
		@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_MassCoeff$
		@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_UpperStage_MassCoeff$
	}
}
// Sustainer engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[sustainer],~RS_EngineDryMass[],#RS_EngineMass[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[sustainer],~RS_EngineDryMass[],#RS_EngineMass[*]],*
	{
		%RS_EngineDryMass = #$RS_EngineMass$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[sustainer],~RS_EngineDryMass[],~RS_EngineMass[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[sustainer],~RS_EngineDryMass[],~RS_EngineMass[*]],*
	{
		%RS_EngineDryMass = #$/mass$
		@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_MassCoeff$
		@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Sustainer_MassCoeff$
	}
}
// Lower stage engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[lower_stage],~RS_EngineDryMass[],#RS_EngineMass[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[lower_stage],~RS_EngineDryMass[],#RS_EngineMass[*]],*
	{
		%RS_EngineDryMass = #$RS_EngineMass$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[lower_stage],~RS_EngineDryMass[],~RS_EngineMass[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[lower_stage],~RS_EngineDryMass[],~RS_EngineMass[*]],*
	{
		%RS_EngineDryMass = #$/mass$
		@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_MassCoeff$
		@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_LowerStage_MassCoeff$
	}
}

// Part mass offset (dry mass without engines)
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_MassOffset[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_MassOffset = 0
}

// Built-in fuel tanks
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],#RS_TotalCap[>0],#RS_MassOffset[*],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	!RESOURCE[LiquidFuel] {}
	!RESOURCE[Oxidizer] {}
	!RESOURCE[LqdHydrogen] {}
	!RESOURCE[LqdMethane] {}
	!RESOURCE[MonoPropellant] {}

	%RS_IgnoreFuelTank = true
	%RS_Temp = #$RS_TotalCap$
	@RS_Temp *= #$@REALISM_SIMPLIFIED/propellantTanks_BaseMass$
	@RS_Temp *= #$@REALISM_SIMPLIFIED/propellantTanks_MassCoeff$
	@RS_MassOffset += #$RS_Temp$

	%RS_HPTank_AddedMass = #$RS_TotalCap$
	@RS_HPTank_AddedMass *= #$@REALISM_SIMPLIFIED/propellantTanks_BaseMass$
	@RS_HPTank_AddedMass *= #$@REALISM_SIMPLIFIED/propellantTanks_HP_MassCoeff$
	@RS_HPTank_AddedMass *= #$@REALISM_SIMPLIFIED/propellantTanks_MassCoeff$
	@RS_HPTank_AddedMass -= #$RS_Temp$

	@RS_TotalCap *= #$@REALISM_SIMPLIFIED/propellantTanks_VolumeCoeff$
	%RS_EnginePropellantsTank = true
}
// Built-in KeroLOX tanks
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],#RS_TotalCap[>0],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[KeroLOX]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	RESOURCE
	{
		name = Kerosene
		amount = #$/RS_TotalCap$
		maxAmount = #$/RS_TotalCap$
	}
	RESOURCE
	{
		name = LqdOxygen
		amount = #$/RS_TotalCap$
		maxAmount = #$/RS_TotalCap$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],#RS_TotalCap[>0],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[KeroLOX]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	@RESOURCE[Kerosene]
	{
		@amount *= #$@REALISM_SIMPLIFIED/KeroLOX_Kerosene_Ratio$
		@maxAmount *= #$@REALISM_SIMPLIFIED/KeroLOX_Kerosene_Ratio$
	}
	@RESOURCE[LqdOxygen]
	{
		@amount *= #$@REALISM_SIMPLIFIED/KeroLOX_LOX_Ratio$
		@maxAmount *= #$@REALISM_SIMPLIFIED/KeroLOX_LOX_Ratio$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],#RS_TotalCap[>0],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[AlcoLOX]],~RS_AlcoLOX_Engines[*rue]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	RESOURCE
	{
		name = Kerosene
		amount = #$/RS_TotalCap$
		maxAmount = #$/RS_TotalCap$
	}
	RESOURCE
	{
		name = LqdOxygen
		amount = #$/RS_TotalCap$
		maxAmount = #$/RS_TotalCap$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],#RS_TotalCap[>0],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[AlcoLOX]],~RS_AlcoLOX_Engines[*rue]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	@RESOURCE[Kerosene]
	{
		@amount *= #$@REALISM_SIMPLIFIED/KeroLOX_Kerosene_Ratio$
		@maxAmount *= #$@REALISM_SIMPLIFIED/KeroLOX_Kerosene_Ratio$
	}
	@RESOURCE[LqdOxygen]
	{
		@amount *= #$@REALISM_SIMPLIFIED/KeroLOX_LOX_Ratio$
		@maxAmount *= #$@REALISM_SIMPLIFIED/KeroLOX_LOX_Ratio$
	}
}
// Built-in HydroLOX tanks
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],#RS_TotalCap[>0],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[HydroLOX]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	RESOURCE
	{
		name = LqdHydrogen
		amount = #$/RS_TotalCap$
		maxAmount = #$/RS_TotalCap$
	}
	RESOURCE
	{
		name = LqdOxygen
		amount = #$/RS_TotalCap$
		maxAmount = #$/RS_TotalCap$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],#RS_TotalCap[>0],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[HydroLOX]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	@RESOURCE[LqdHydrogen]
	{
		@amount *= #$@REALISM_SIMPLIFIED/HydroLOX_LH2_Ratio$
		@maxAmount *= #$@REALISM_SIMPLIFIED/HydroLOX_LH2_Ratio$
	}
	@RESOURCE[LqdOxygen]
	{
		@amount *= #$@REALISM_SIMPLIFIED/HydroLOX_LOX_Ratio$
		@maxAmount *= #$@REALISM_SIMPLIFIED/HydroLOX_LOX_Ratio$
	}
}
// Built-in MethaLOX tanks
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],#RS_TotalCap[>0],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[MethaLOX]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	RESOURCE
	{
		name = LqdMethane
		amount = #$/RS_TotalCap$
		maxAmount = #$/RS_TotalCap$
	}
	RESOURCE
	{
		name = LqdOxygen
		amount = #$/RS_TotalCap$
		maxAmount = #$/RS_TotalCap$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],#RS_TotalCap[>0],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[MethaLOX]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	@RESOURCE[LqdMethane]
	{
		@amount *= #$@REALISM_SIMPLIFIED/MethaLOX_LqdMethane_Ratio$
		@maxAmount *= #$@REALISM_SIMPLIFIED/MethaLOX_LqdMethane_Ratio$
	}
	@RESOURCE[LqdOxygen]
	{
		@amount *= #$@REALISM_SIMPLIFIED/MethaLOX_LOX_Ratio$
		@maxAmount *= #$@REALISM_SIMPLIFIED/MethaLOX_LOX_Ratio$
	}
}
// Built-in AlcoLOX tanks
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],#RS_TotalCap[>0],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[AlcoLOX]],#RS_AlcoLOX_Engines[*rue]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	RESOURCE
	{
		name = Ethanol75
		amount = #$/RS_TotalCap$
		maxAmount = #$/RS_TotalCap$
	}
	RESOURCE
	{
		name = LqdOxygen
		amount = #$/RS_TotalCap$
		maxAmount = #$/RS_TotalCap$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],#RS_TotalCap[>0],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[AlcoLOX]],#RS_AlcoLOX_Engines[*rue]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	@RESOURCE[Ethanol75]
	{
		@amount *= #$@REALISM_SIMPLIFIED/AlcoLOX_Ethanol75_Ratio$
		@maxAmount *= #$@REALISM_SIMPLIFIED/AlcoLOX_Ethanol75_Ratio$
	}
	@RESOURCE[LqdOxygen]
	{
		@amount *= #$@REALISM_SIMPLIFIED/AlcoLOX_LOX_Ratio$
		@maxAmount *= #$@REALISM_SIMPLIFIED/AlcoLOX_LOX_Ratio$
	}
}
// Built-in Hypergolics tanks
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],#RS_TotalCap[>0],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[Hypergolics]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	RESOURCE
	{
		name = Aerozine50
		amount = #$/RS_TotalCap$
		maxAmount = #$/RS_TotalCap$
	}
	RESOURCE
	{
		name = NTO
		amount = #$/RS_TotalCap$
		maxAmount = #$/RS_TotalCap$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],#RS_TotalCap[>0],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[Hypergolics]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	@RESOURCE[Aerozine50]
	{
		@name = #$@REALISM_SIMPLIFIED/Hypergolics_Fuel$
		@amount *= #$@REALISM_SIMPLIFIED/Hypergolics_Fuel_Ratio$
		@maxAmount *= #$@REALISM_SIMPLIFIED/Hypergolics_Fuel_Ratio$
	}
	@RESOURCE[NTO]
	{
		@name = #$@REALISM_SIMPLIFIED/Hypergolics_Oxidizer$
		@amount *= #$@REALISM_SIMPLIFIED/Hypergolics_Oxidizer_Ratio$
		@maxAmount *= #$@REALISM_SIMPLIFIED/Hypergolics_Oxidizer_Ratio$
	}
}
// Built-in Monopropellant tank
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],#RS_TotalCap[>0],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[MonoPropellant]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	RESOURCE
	{
		name = #$@REALISM_SIMPLIFIED/MonoPropellant$
		amount = #$/RS_TotalCap$
		maxAmount = #$/RS_TotalCap$
	}
}
// Built-in Kerosene tank
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],#RS_TotalCap[>0],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[Kerosene]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	RESOURCE
	{
		name = Kerosene
		amount = #$/RS_TotalCap$
		maxAmount = #$/RS_TotalCap$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],#RS_TotalCap[>0],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[AvGas]],~RS_AvGas_Engines[*rue]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	RESOURCE
	{
		name = Kerosene
		amount = #$/RS_TotalCap$
		maxAmount = #$/RS_TotalCap$
	}
}
// Built-in AvGas tank
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],#RS_TotalCap[>0],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[AvGas]],#RS_AvGas_Engines[*rue]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	RESOURCE
	{
		name = AvGas
		amount = #$/RS_TotalCap$
		maxAmount = #$/RS_TotalCap$
	}
}
// Built-in LH2 tank
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],#RS_TotalCap[>0],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[LqdHydrogen]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	RESOURCE
	{
		name = LqdHydrogen
		amount = #$/RS_TotalCap$
		maxAmount = #$/RS_TotalCap$
	}
}
// Built-in LqdMethane tank
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],#RS_TotalCap[>0],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[LqdMethane]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	RESOURCE
	{
		name = LqdMethane
		amount = #$/RS_TotalCap$
		maxAmount = #$/RS_TotalCap$
	}
}
// Built-in LOX tank
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],#RS_TotalCap[>0],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[LqdOxygen]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	RESOURCE
	{
		name = LqdOxygen
		amount = #$/RS_TotalCap$
		maxAmount = #$/RS_TotalCap$
	}
}
// Built-in fuel tank should by high-pressurized for pressure-fed engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],#RS_TotalCap[>0],#RS_MassOffset[*],#RS_HPTank_AddedMass[*],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePressureFed[*rue]],#RS_PressureFedEngines[*rue]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	@RS_MassOffset += #$RS_HPTank_AddedMass$

	RESOURCE
	{
		name = Helium
		amount = #$/RS_TotalCap$
		maxAmount = #$/RS_TotalCap$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],#RS_TotalCap[>0],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePressureFed[*rue]],#RS_PressureFedEngines[*rue]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	@RESOURCE[Helium]
	{
		@name = #$@REALISM_SIMPLIFIED/pressurizationGas$
		@amount *= #$@REALISM_SIMPLIFIED/pressurizationGas_Ratio$
		@maxAmount *= #$@REALISM_SIMPLIFIED/pressurizationGas_Ratio$
	}
}

// Part has B9PartSwitch with baseVolume, so it has built-in tank, but only for some B9PS variants
// Let's patch 'em
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[]]]:NEEDS[B9PartSwitch]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_IgnoreFuelTank = true

	@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],*
	{
		%RS_AddedMass = #$baseVolume$
		@RS_AddedMass *= #$@REALISM_SIMPLIFIED/propellantTanks_BaseMass$
		@RS_AddedMass *= #$@REALISM_SIMPLIFIED/propellantTanks_MassCoeff$

		%RS_HPTank_AddedMass = #$baseVolume$
		@RS_HPTank_AddedMass *= #$@REALISM_SIMPLIFIED/propellantTanks_BaseMass$
		@RS_HPTank_AddedMass *= #$@REALISM_SIMPLIFIED/propellantTanks_HP_MassCoeff$
		@RS_HPTank_AddedMass *= #$@REALISM_SIMPLIFIED/propellantTanks_MassCoeff$
		@RS_HPTank_AddedMass -= #$RS_AddedMass$

		@baseVolume *= #$@REALISM_SIMPLIFIED/propellantTanks_VolumeCoeff$

		@SUBTYPE:HAS[~addedMass[]],*
		{
			addedMass = 0
		}
	}
}
// Built-in KeroLOX tank variants
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[KeroLOX]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],*
	{
		@SUBTYPE:HAS[#tankType[*]],*
		{
			@addedMass += #$../RS_AddedMass$
			@tankType = RS_KeroLOX
		}
		@SUBTYPE:HAS[@RESOURCE[*],~tankType[]],*
		{
			@addedMass += #$../RS_AddedMass$
			!RESOURCE[LiquidFuel] {}
			!RESOURCE[Oxidizer] {}
			!RESOURCE[LqdHydrogen] {}
			!RESOURCE[LqdMethane] {}
			!RESOURCE[MonoPropellant] {}

			RESOURCE
			{
				name = Kerosene
				unitsPerVolume = #$@REALISM_SIMPLIFIED/KeroLOX_Kerosene_Ratio$
			}
			RESOURCE
			{
				name = LqdOxygen
				unitsPerVolume = #$@REALISM_SIMPLIFIED/KeroLOX_LOX_Ratio$
			}
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[AlcoLOX]],~RS_AlcoLOX_Engines[*rue]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],*
	{
		@SUBTYPE:HAS[#tankType[*]],*
		{
			@addedMass += #$../RS_AddedMass$
			@tankType = RS_KeroLOX
		}
		@SUBTYPE:HAS[@RESOURCE[*],~tankType[]],*
		{
			@addedMass += #$../RS_AddedMass$
			!RESOURCE[LiquidFuel] {}
			!RESOURCE[Oxidizer] {}
			!RESOURCE[LqdHydrogen] {}
			!RESOURCE[LqdMethane] {}
			!RESOURCE[MonoPropellant] {}

			RESOURCE
			{
				name = Kerosene
				unitsPerVolume = #$@REALISM_SIMPLIFIED/KeroLOX_Kerosene_Ratio$
			}
			RESOURCE
			{
				name = LqdOxygen
				unitsPerVolume = #$@REALISM_SIMPLIFIED/KeroLOX_LOX_Ratio$
			}
		}
	}
}
// Built-in HydroLOX tank variants
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[HydroLOX]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],*
	{
		@SUBTYPE:HAS[#tankType[*]],*
		{
			@addedMass += #$../RS_AddedMass$
			@tankType = RS_HydroLOX
		}
		@SUBTYPE:HAS[@RESOURCE[*],~tankType[]],*
		{
			@addedMass += #$../RS_AddedMass$
			!RESOURCE[LiquidFuel] {}
			!RESOURCE[Oxidizer] {}
			!RESOURCE[LqdHydrogen] {}
			!RESOURCE[LqdMethane] {}
			!RESOURCE[MonoPropellant] {}

			RESOURCE
			{
				name = LqdHydrogen
				unitsPerVolume = #$@REALISM_SIMPLIFIED/HydroLOX_LH2_Ratio$
			}
			RESOURCE
			{
				name = LqdOxygen
				unitsPerVolume = #$@REALISM_SIMPLIFIED/HydroLOX_LOX_Ratio$
			}
		}
	}
}
// Built-in MethaLOX tank variants
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[MethaLOX]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],*
	{
		@SUBTYPE:HAS[#tankType[*]],*
		{
			@addedMass += #$../RS_AddedMass$
			@tankType = RS_MethaLOX
		}
		@SUBTYPE:HAS[@RESOURCE[*],~tankType[]],*
		{
			@addedMass += #$../RS_AddedMass$
			!RESOURCE[LiquidFuel] {}
			!RESOURCE[Oxidizer] {}
			!RESOURCE[LqdHydrogen] {}
			!RESOURCE[LqdMethane] {}
			!RESOURCE[MonoPropellant] {}

			RESOURCE
			{
				name = LqdMethane
				unitsPerVolume = #$@REALISM_SIMPLIFIED/MethaLOX_LqdMethane_Ratio$
			}
			RESOURCE
			{
				name = LqdOxygen
				unitsPerVolume = #$@REALISM_SIMPLIFIED/MethaLOX_LOX_Ratio$
			}
		}
	}
}
// Built-in AlcoLOX tank variants
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[AlcoLOX]],#RS_AlcoLOX_Engines[*rue]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],*
	{
		@SUBTYPE:HAS[#tankType[*]],*
		{
			@addedMass += #$../RS_AddedMass$
			@tankType = RS_AlcoLOX
		}
		@SUBTYPE:HAS[@RESOURCE[*],~tankType[]],*
		{
			@addedMass += #$../RS_AddedMass$
			!RESOURCE[LiquidFuel] {}
			!RESOURCE[Oxidizer] {}
			!RESOURCE[LqdHydrogen] {}
			!RESOURCE[LqdMethane] {}
			!RESOURCE[MonoPropellant] {}

			RESOURCE
			{
				name = Ethanol75
				unitsPerVolume = #$@REALISM_SIMPLIFIED/AlcoLOX_Ethanol75_Ratio$
			}
			RESOURCE
			{
				name = LqdOxygen
				unitsPerVolume = #$@REALISM_SIMPLIFIED/AlcoLOX_LOX_Ratio$
			}
		}
	}
}
// Built-in Hypergolics tank variants
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[Hypergolics]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],*
	{
		@SUBTYPE:HAS[#tankType[*]],*
		{
			@addedMass += #$../RS_AddedMass$
			@tankType = RS_Hypergolics
		}
		@SUBTYPE:HAS[@RESOURCE[*],~tankType[]],*
		{
			@addedMass += #$../RS_AddedMass$
			!RESOURCE[LiquidFuel] {}
			!RESOURCE[Oxidizer] {}
			!RESOURCE[LqdHydrogen] {}
			!RESOURCE[LqdMethane] {}
			!RESOURCE[MonoPropellant] {}

			RESOURCE
			{
				name = #$@REALISM_SIMPLIFIED/Hypergolics_Fuel$
				unitsPerVolume = #$@REALISM_SIMPLIFIED/Hypergolics_Fuel_Ratio$
			}
			RESOURCE
			{
				name = #$@REALISM_SIMPLIFIED/Hypergolics_Oxidizer$
				unitsPerVolume = #$@REALISM_SIMPLIFIED/Hypergolics_Oxidizer_Ratio$
			}
		}
	}
}
// Built-in Kerosene tank variants
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[Kerosene]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],*
	{
		@SUBTYPE:HAS[#tankType[*]],*
		{
			@addedMass += #$../RS_AddedMass$
			@tankType = RS_Kerosene
		}
		@SUBTYPE:HAS[@RESOURCE[*],~tankType[]],*
		{
			@addedMass += #$../RS_AddedMass$
			!RESOURCE[LiquidFuel] {}
			!RESOURCE[Oxidizer] {}
			!RESOURCE[LqdHydrogen] {}
			!RESOURCE[LqdMethane] {}
			!RESOURCE[MonoPropellant] {}

			RESOURCE
			{
				name = Kerosene
				unitsPerVolume = 1.0
			}
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[AvGas]],~RS_AvGas_Engines[*rue]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],*
	{
		@SUBTYPE:HAS[#tankType[*]],*
		{
			@addedMass += #$../RS_AddedMass$
			@tankType = RS_Kerosene
		}
		@SUBTYPE:HAS[@RESOURCE[*],~tankType[]],*
		{
			@addedMass += #$../RS_AddedMass$
			!RESOURCE[LiquidFuel] {}
			!RESOURCE[Oxidizer] {}
			!RESOURCE[LqdHydrogen] {}
			!RESOURCE[LqdMethane] {}
			!RESOURCE[MonoPropellant] {}

			RESOURCE
			{
				name = Kerosene
				unitsPerVolume = 1.0
			}
		}
	}
}
// Built-in AvGas tank variants
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[AvGas]],#RS_AvGas_Engines[*rue]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],*
	{
		@SUBTYPE:HAS[#tankType[*]],*
		{
			@addedMass += #$../RS_AddedMass$
			@tankType = RS_AvGas
		}
		@SUBTYPE:HAS[@RESOURCE[*],~tankType[]],*
		{
			@addedMass += #$../RS_AddedMass$
			!RESOURCE[LiquidFuel] {}
			!RESOURCE[Oxidizer] {}
			!RESOURCE[LqdHydrogen] {}
			!RESOURCE[LqdMethane] {}
			!RESOURCE[MonoPropellant] {}

			RESOURCE
			{
				name = AvGas
				unitsPerVolume = 1.0
			}
		}
	}
}
// Built-in Monopropellant tank variants
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[MonoPropellant]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],*
	{
		@SUBTYPE:HAS[#tankType[*]],*
		{
			@addedMass += #$../RS_AddedMass$
			@tankType = RS_MonoPropellant
		}
		@SUBTYPE:HAS[@RESOURCE[*],~tankType[]],*
		{
			@addedMass += #$../RS_AddedMass$
			!RESOURCE[LiquidFuel] {}
			!RESOURCE[Oxidizer] {}
			!RESOURCE[LqdHydrogen] {}
			!RESOURCE[LqdMethane] {}
			!RESOURCE[MonoPropellant] {}

			RESOURCE
			{
				name = #$@REALISM_SIMPLIFIED/MonoPropellant$
				unitsPerVolume = 1.0
			}
		}
	}
}
// Built-in LH2 tank variants
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[LqdHydrogen]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],*
	{
		@SUBTYPE:HAS[#tankType[*]],*
		{
			@addedMass += #$../RS_AddedMass$
			@tankType = RS_LH2
		}
		@SUBTYPE:HAS[@RESOURCE[*],~tankType[]],*
		{
			@addedMass += #$../RS_AddedMass$
			!RESOURCE[LiquidFuel] {}
			!RESOURCE[Oxidizer] {}
			!RESOURCE[LqdHydrogen] {}
			!RESOURCE[LqdMethane] {}
			!RESOURCE[MonoPropellant] {}

			RESOURCE
			{
				name = LqdHydrogen
				unitsPerVolume = 1.0
			}
		}
	}
}
// Built-in LqdMethane tank variants
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[LqdMethane]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],*
	{
		@SUBTYPE:HAS[#tankType[*]],*
		{
			@addedMass += #$../RS_AddedMass$
			@tankType = RS_LqdMethane
		}
		@SUBTYPE:HAS[@RESOURCE[*],~tankType[]],*
		{
			@addedMass += #$../RS_AddedMass$
			!RESOURCE[LiquidFuel] {}
			!RESOURCE[Oxidizer] {}
			!RESOURCE[LqdHydrogen] {}
			!RESOURCE[LqdMethane] {}
			!RESOURCE[MonoPropellant] {}

			RESOURCE
			{
				name = LqdMethane
				unitsPerVolume = 1.0
			}
		}
	}
}
// Built-in LqdAmmonia tank variants
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[LqdAmmonia]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],*
	{
		@SUBTYPE:HAS[#tankType[*]],*
		{
			@addedMass += #$../RS_AddedMass$
			@tankType = RS_LqdAmmonia
		}
		@SUBTYPE:HAS[@RESOURCE[*],~tankType[]],*
		{
			@addedMass += #$../RS_AddedMass$
			!RESOURCE[LiquidFuel] {}
			!RESOURCE[Oxidizer] {}
			!RESOURCE[LqdHydrogen] {}
			!RESOURCE[LqdMethane] {}
			!RESOURCE[MonoPropellant] {}

			RESOURCE
			{
				name = LqdAmmonia
				unitsPerVolume = 1.0
			}
		}
	}
}
// Built-in LOX tank variants
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[LqdOxygen]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],*
	{
		@SUBTYPE:HAS[#tankType[*]],*
		{
			@addedMass += #$../RS_AddedMass$
			@tankType = RS_LOX
		}
		@SUBTYPE:HAS[@RESOURCE[*],~tankType[]],*
		{
			@addedMass += #$../RS_AddedMass$
			!RESOURCE[LiquidFuel] {}
			!RESOURCE[Oxidizer] {}
			!RESOURCE[LqdHydrogen] {}
			!RESOURCE[LqdMethane] {}
			!RESOURCE[MonoPropellant] {}

			RESOURCE
			{
				name = LqdOxygen
				unitsPerVolume = 1.0
			}
		}
	}
}
// High-pressurized tank variants
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_TankConfigured[],@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePressureFed[*rue]],#RS_PressureFedEngines[*rue]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],*
	{
		@SUBTYPE:HAS[#tankType[*]],*
		{
			@addedMass += #$../RS_HPTank_AddedMass$

			RESOURCE
			{
				name = #$@REALISM_SIMPLIFIED/pressurizationGas$
				unitsPerVolume = #$@REALISM_SIMPLIFIED/pressurizationGas_Ratio$
			}
		}
		@SUBTYPE:HAS[@RESOURCE[*],~tankType[]],*
		{
			@addedMass += #$../RS_HPTank_AddedMass$

			RESOURCE
			{
				name = #$@REALISM_SIMPLIFIED/pressurizationGas$
				unitsPerVolume = #$@REALISM_SIMPLIFIED/pressurizationGas_Ratio$
			}
		}
	}
}

// Part dry cost (dry cost without engines)
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_CostOffset[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	RS_CostOffset = 0
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EntryCostOffset[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	RS_EntryCostOffset = 0
}
// Costs and entryCosts for unconfigured engines
// SRB
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#cost[*],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineCost[],#RS_EnginePrimary[*rue],#RS_EngineType[SRB]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineCost[],#RS_EnginePrimary[*rue],#RS_EngineType[SRB]],0
	{
		%RS_EngineCost = #$../cost$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_SRB_CostCoeff$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#cost[*],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineDryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[SRB]],@RESOURCE[SolidFuel]:HAS[#amount[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_Temp = #$RESOURCE[SolidFuel]/amount$
	@RS_Temp *= #$@RESOURCE_DEFINITION[SolidFuel]/unitCost$
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineDryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[SRB]],0
	{
		%RS_EngineDryCost = #$../cost$
		@RS_EngineDryCost -= #$../RS_Temp$
		@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_SRB_CostCoeff$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#entryCost[*],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineEntryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[SRB]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineEntryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[SRB]],0
	{
		%RS_EngineEntryCost = #$../entryCost$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_SRB_EntryCostCoeff$
	}
}
// Air-breathing
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#cost[*],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineCost[],#RS_EnginePrimary[*rue],#RS_EngineType[air_breathing]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineCost[],#RS_EnginePrimary[*rue],#RS_EngineType[air_breathing]],0
	{
		%RS_EngineCost = #$../cost$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_AirBreathing_CostCoeff$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#cost[*],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineDryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[air_breathing]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineDryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[air_breathing]],0
	{
		%RS_EngineDryCost = #$../cost$
		@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_AirBreathing_CostCoeff$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#entryCost[*],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineEntryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[air_breathing]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineEntryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[air_breathing]],0
	{
		%RS_EngineEntryCost = #$../entryCost$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_AirBreathing_EntryCostCoeff$
	}
}
// Nuclear
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#cost[*],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineCost[],#RS_EnginePrimary[*rue],#RS_EngineType[nuclear]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineCost[],#RS_EnginePrimary[*rue],#RS_EngineType[nuclear]],0
	{
		%RS_EngineCost = #$../cost$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Nuclear_CostCoeff$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#cost[*],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineDryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[nuclear]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineDryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[nuclear]],0
	{
		%RS_EngineDryCost = #$../cost$
		@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Nuclear_CostCoeff$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#entryCost[*],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineEntryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[nuclear]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineEntryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[nuclear]],0
	{
		%RS_EngineEntryCost = #$../entryCost$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Nuclear_EntryCostCoeff$
	}
}
// Electric
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#cost[*],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineCost[],#RS_EnginePrimary[*rue],#RS_EngineType[electric]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineCost[],#RS_EnginePrimary[*rue],#RS_EngineType[electric]],0
	{
		%RS_EngineCost = #$../cost$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Electric_CostCoeff$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#cost[*],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineDryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[electric]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineDryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[electric]],0
	{
		%RS_EngineDryCost = #$../cost$
		@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Electric_CostCoeff$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#entryCost[*],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineEntryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[electric]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineEntryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[electric]],0
	{
		%RS_EngineEntryCost = #$../entryCost$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Electric_EntryCostCoeff$
	}
}
// OMS
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#cost[*],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineCost[],#RS_EnginePrimary[*rue],#RS_EngineType[OMS]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineCost[],#RS_EnginePrimary[*rue],#RS_EngineType[OMS]],0
	{
		%RS_EngineCost = #$../cost$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_CostCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_OMS_CostCoeff$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#cost[*],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineDryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[OMS]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineDryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[OMS]],0
	{
		%RS_EngineDryCost = #$../cost$
		@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_CostCoeff$
		@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_OMS_CostCoeff$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#entryCost[*],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineEntryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[OMS]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineEntryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[OMS]],0
	{
		%RS_EngineEntryCost = #$../entryCost$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_EntryCostCoeff$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_OMS_EntryCostCoeff$
	}
}
// Upper stage
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#cost[*],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineCost[],#RS_EnginePrimary[*rue],#RS_EngineType[upper_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineCost[],#RS_EnginePrimary[*rue],#RS_EngineType[upper_stage]],0
	{
		%RS_EngineCost = #$../cost$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_CostCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_UpperStage_CostCoeff$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#cost[*],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineDryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[upper_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineDryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[upper_stage]],0
	{
		%RS_EngineDryCost = #$../cost$
		@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_CostCoeff$
		@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_UpperStage_CostCoeff$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#entryCost[*],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineEntryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[upper_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineEntryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[upper_stage]],0
	{
		%RS_EngineEntryCost = #$../entryCost$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_EntryCostCoeff$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_UpperStage_EntryCostCoeff$
	}
}
// Upper stage
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#cost[*],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineCost[],#RS_EnginePrimary[*rue],#RS_EngineType[sustainer]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineCost[],#RS_EnginePrimary[*rue],#RS_EngineType[sustainer]],0
	{
		%RS_EngineCost = #$../cost$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_CostCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Sustainer_CostCoeff$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#cost[*],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineDryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[sustainer]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineDryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[sustainer]],0
	{
		%RS_EngineDryCost = #$../cost$
		@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_CostCoeff$
		@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Sustainer_CostCoeff$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#entryCost[*],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineEntryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[sustainer]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineEntryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[sustainer]],0
	{
		%RS_EngineEntryCost = #$../entryCost$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_EntryCostCoeff$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Sustainer_EntryCostCoeff$
	}
}
// Lower stage
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#cost[*],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineCost[],#RS_EnginePrimary[*rue],#RS_EngineType[lower_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineCost[],#RS_EnginePrimary[*rue],#RS_EngineType[lower_stage]],0
	{
		%RS_EngineCost = #$../cost$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_CostCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_LowerStage_CostCoeff$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#cost[*],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineDryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[lower_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineDryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[lower_stage]],0
	{
		%RS_EngineDryCost = #$../cost$
		@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_CostCoeff$
		@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_LowerStage_CostCoeff$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#entryCost[*],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineEntryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[lower_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EngineEntryCost[],#RS_EnginePrimary[*rue],#RS_EngineType[lower_stage]],0
	{
		%RS_EngineEntryCost = #$../entryCost$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_EntryCostCoeff$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_LowerStage_EntryCostCoeff$
	}
}


// ======================================================
// Set SolidFuel to valid amount for SRBs
// ======================================================
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_SolidFuelMass[>0],~RS_SolidFuelAmount[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[SRB]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_SolidFuelAmount = #$RS_SolidFuelMass$
	@RS_SolidFuelAmount /= #$@RESOURCE_DEFINITION[SolidFuel]/density$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_SolidFuelAmount[>0],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[SRB]]]:FOR[zzzzRealismSimplifiedEngines]
{
	!RESOURCE[SolidFuel] {}
	RESOURCE
	{
		name = SolidFuel
		amount = #$../RS_SolidFuelAmount$
		maxAmount = #$../RS_SolidFuelAmount$
	}
}


// ================================================
// Auto-generate engines prices
// ================================================
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineConfig[*],#RS_OverrideEnginesPrices[*rue],#RS_AutoGenerateEnginesPrices_ForConfiguredEngines[*alse]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_AutoGenerateEnginesPrices = false
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_OverrideEnginesPrices[*rue],#RS_AutoGenerateEnginesPrices[*rue],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[electric]]]:NEEDS[CommunityResourcePack]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],@PROPELLANT[XenonGas],#RS_EngineType[electric]],*
	{
		%RS_PropellantDensity = #$@RESOURCE_DEFINITION[XenonGas]/density$
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],@PROPELLANT[ArgonGas],#RS_EngineType[electric]],*
	{
		%RS_PropellantDensity = #$@RESOURCE_DEFINITION[ArgonGas]/density$
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],@PROPELLANT[Lithium],#RS_EngineType[electric]],*
	{
		%RS_PropellantDensity = #$@RESOURCE_DEFINITION[Lithium]/density$
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],@PROPELLANT[LqdHydrogen],#RS_EngineType[electric]],*
	{
		%RS_PropellantDensity = #$@RESOURCE_DEFINITION[LqdHydrogen]/density$
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],@PROPELLANT[Hydrazine],#RS_EngineType[electric]],*
	{
		%RS_PropellantDensity = #$@RESOURCE_DEFINITION[Hydrazine]/density$
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],@PROPELLANT[LqdAmmonia],#RS_EngineType[electric]],*
	{
		%RS_PropellantDensity = #$@RESOURCE_DEFINITION[LqdAmmonia]/density$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_OverrideEnginesPrices[*rue],#RS_AutoGenerateEnginesPrices[*rue],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePriceAutoGenerated[*rue],#RS_EngineType[lower_stage],#RS_MaxThrust[>0],#RS_MinThrust[*],#RS_ISPVac[>0],#RS_ISPSL[>0]],*
	{
		// Lower stage engine prices are generated as follows:
		// cost = ISPCoeff * (((ISP(vacuum, s) + ISP(sea level, s)) / (2 * ISPCoeff)) ^ ISPPower)  * (2 * MaxThrust(vacuum, KN) - MinThrust(vacuum, KN)) * CostCoeff / 10
		// upgradeCost = cost * UpgradeCostCoeff
		// entryCost = cost * EntryCostCoeff
		%RS_Temp = #$RS_ISPVac$
		@RS_Temp += #$RS_ISPSL$
		%RS_Temp1 = #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_LowerStage_ISPCoeff$
		@RS_Temp1 *= 2
		@RS_Temp /= #$RS_Temp1$
		@RS_Temp != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_LowerStage_ISPPower$
		%RS_EngineCost = #$RS_MaxThrust$
		@RS_EngineCost *= 2
		@RS_EngineCost -= #$RS_MinThrust$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_LowerStage_ISPCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_LowerStage_CostCoeff$
		@RS_EngineCost /= 10
		@RS_EngineCost *= #$RS_Temp$
		@RS_EngineCost += #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_LowerStage_BaseCost$
		%RS_EngineDryCost = #$RS_EngineCost$
		%RS_EngineEntryCost = #$RS_EngineCost$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_LowerStage_EntryCostCoeff$
		%RS_EnginePriceAutoGenerated = true
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePriceAutoGenerated[*rue],#RS_EngineType[sustainer],#RS_MaxThrust[>0],#RS_MinThrust[*],#RS_ISPVac[>0],#RS_ISPSL[>0]],*
	{
		// Sustainer engine prices are generated as follows:
		// cost = ISPCoeff * (((ISP(vacuum, s) + ISP(sea level, s)) / (2 * ISPCoeff)) ^ ISPPower)  * (2 * MaxThrust(vacuum, KN) - MinThrust(vacuum, KN)) * CostCoeff / 10
		// upgradeCost = cost * UpgradeCostCoeff
		// entryCost = cost * EntryCostCoeff
		%RS_Temp = #$RS_ISPVac$
		@RS_Temp += #$RS_ISPSL$
		%RS_Temp1 = #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Sustainer_ISPCoeff$
		@RS_Temp1 *= 2
		@RS_Temp /= #$RS_Temp1$
		@RS_Temp != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Sustainer_ISPPower$
		%RS_EngineCost = #$RS_MaxThrust$
		@RS_EngineCost *= 2
		@RS_EngineCost -= #$RS_MinThrust$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Sustainer_ISPCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Sustainer_CostCoeff$
		@RS_EngineCost /= 10
		@RS_EngineCost *= #$RS_Temp$
		@RS_EngineCost += #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Sustainer_BaseCost$
		%RS_EngineDryCost = #$RS_EngineCost$
		%RS_EngineEntryCost = #$RS_EngineCost$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Sustainer_EntryCostCoeff$
		%RS_EnginePriceAutoGenerated = true
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePriceAutoGenerated[*rue],#RS_EngineType[upper_stage],#RS_MaxThrust[>0],#RS_MinThrust[*],#RS_ISPVac[>0]],*
	{
		// Upper stage engine prices are generated as follows:
		// cost = ISPCoeff * ((ISP(vacuum, s) / ISPCoeff) ^ ISPPower)  * (2 * MaxThrust(vacuum, KN) - MinThrust(vacuum, KN)) * CostCoeff / 10
		// upgradeCost = cost * UpgradeCostCoeff
		// entryCost = cost * EntryCostCoeff
		%RS_Temp = #$RS_ISPVac$
		@RS_Temp /= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_UpperStage_ISPCoeff$
		@RS_Temp != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_UpperStage_ISPPower$
		%RS_EngineCost = #$RS_MaxThrust$
		@RS_EngineCost *= 2
		@RS_EngineCost -= #$RS_MinThrust$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_UpperStage_ISPCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_UpperStage_CostCoeff$
		@RS_EngineCost /= 10
		@RS_EngineCost *= #$RS_Temp$
		@RS_EngineCost += #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_UpperStage_BaseCost$
		%RS_EngineDryCost = #$RS_EngineCost$
		%RS_EngineEntryCost = #$RS_EngineCost$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_UpperStage_EntryCostCoeff$
		%RS_EnginePriceAutoGenerated = true
	}
	// OMS engines prices are generated as follows:
	// cost = ISPCoeff * ((ISP(vacuum, s) / ISPCoeff) ^ ISPPower) * MaxThrust(vacuum, KN) * PressureFedCostCoeff * (IgnitionsCount ^ IgnitionsPower) * CostCoeff
	// upgradeCost = cost * UpgradeCostCoeff
	// entryCost = cost * EntryCostCoeff
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePriceAutoGenerated[*rue],#RS_EngineType[OMS],#RS_EnginePressureFed[*rue],#RS_MaxThrust[>0],#RS_ISPVac[>0],#RS_EngineIgnitions[>0]],*
	{
		%RS_Temp = #$RS_ISPVac$
		@RS_Temp /= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_ISPCoeff$
		@RS_Temp != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_ISPPower$
		%RS_EngineCost = #$RS_EngineIgnitions$
		@RS_EngineCost != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_IgnitionsPower$
		@RS_EngineCost *= #$RS_MaxThrust$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_CostCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_PressureFedCostCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_ISPCoeff$
		@RS_EngineCost *= #$RS_Temp$
		@RS_EngineCost += #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_BaseCost$
		%RS_EngineDryCost = #$RS_EngineCost$
		%RS_EngineEntryCost = #$RS_EngineCost$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_EntryCostCoeff$
		%RS_EnginePriceAutoGenerated = true
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePriceAutoGenerated[*rue],#RS_EngineType[OMS],#RS_EnginePressureFed[*rue],#RS_MaxThrust[>0],#RS_ISPVac[>0],#RS_EngineIgnitions[-1]],*
	{
		%RS_Temp = #$RS_ISPVac$
		@RS_Temp /= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_ISPCoeff$
		@RS_Temp != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_ISPPower$
		%RS_EngineCost = #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_InfiniteIgnitionsFiniteEquivalent$
		@RS_EngineCost != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_IgnitionsPower$
		@RS_EngineCost *= #$RS_MaxThrust$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_CostCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_PressureFedCostCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_ISPCoeff$
		@RS_EngineCost *= #$RS_Temp$
		@RS_EngineCost += #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_BaseCost$
		%RS_EngineDryCost = #$RS_EngineCost$
		%RS_EngineEntryCost = #$RS_EngineCost$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_EntryCostCoeff$
		%RS_EnginePriceAutoGenerated = true
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePriceAutoGenerated[*rue],#RS_EngineType[OMS],~RS_EnginePressureFed[*rue],#RS_MaxThrust[>0],#RS_ISPVac[>0],#RS_EngineIgnitions[>0]],*
	{
		%RS_Temp = #$RS_ISPVac$
		@RS_Temp /= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_ISPCoeff$
		@RS_Temp != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_ISPPower$
		%RS_EngineCost = #$RS_EngineIgnitions$
		@RS_EngineCost != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_IgnitionsPower$
		@RS_EngineCost *= #$RS_MaxThrust$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_CostCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_ISPCoeff$
		@RS_EngineCost *= #$RS_Temp$
		@RS_EngineCost += #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_BaseCost$
		%RS_EngineDryCost = #$RS_EngineCost$
		%RS_EngineEntryCost = #$RS_EngineCost$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_EntryCostCoeff$
		%RS_EnginePriceAutoGenerated = true
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePriceAutoGenerated[*rue],#RS_EngineType[OMS],~RS_EnginePressureFed[*rue],#RS_MaxThrust[>0],#RS_ISPVac[>0],#RS_EngineIgnitions[-1]],*
	{
		%RS_Temp = #$RS_ISPVac$
		@RS_Temp /= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_ISPCoeff$
		@RS_Temp != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_ISPPower$
		%RS_EngineCost = #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_InfiniteIgnitionsFiniteEquivalent$
		@RS_EngineCost != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_IgnitionsPower$
		@RS_EngineCost *= #$RS_MaxThrust$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_CostCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_ISPCoeff$
		@RS_EngineCost *= #$RS_Temp$
		@RS_EngineCost += #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_BaseCost$
		%RS_EngineDryCost = #$RS_EngineCost$
		%RS_EngineEntryCost = #$RS_EngineCost$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_OMS_EntryCostCoeff$
		%RS_EnginePriceAutoGenerated = true
	}
	// Nuclear engines prices are generated as follows:
	// cost = ISPCoeff * ((ISP(vacuum, s) / ISPCoeff) ^ ISPPower) * (MaxThrust(vacuum, KN) ^ ThrustPower) * ((MaxThrust(vacuum, KN) / (EngineMass(t) * 9.81)) ^ TWRPower) * (IgnitionsCount ^ IgnitionsPower) * CostCoeff + BaseCost
	// upgradeCost = cost * UpgradeCostCoeff
	// entryCost = cost * EntryCostCoeff
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePriceAutoGenerated[*rue],#RS_EngineType[nuclear],#RS_EngineDryMass[>0],#RS_MaxThrust[>0],#RS_ISPVac[>0],#RS_EngineIgnitions[-1]],*
	{
		%RS_Temp = #$RS_ISPVac$
		@RS_Temp /= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_ISPCoeff$
		@RS_Temp != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_ISPPower$
		%RS_Temp1 = #$RS_MaxThrust$
		@RS_Temp1 /= #$RS_EngineDryMass$
		@RS_Temp1 /= 9.81
		@RS_Temp1 != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_TWRPower$
		%RS_Temp2 = #$RS_MaxThrust$
		@RS_Temp2 != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_ThrustPower$
		%RS_EngineCost = #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_InfiniteIgnitionsFiniteEquivalent$
		@RS_EngineCost != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_IgnitionsPower$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_CostCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_ISPCoeff$
		@RS_EngineCost *= #$RS_Temp$
		@RS_EngineCost *= #$RS_Temp1$
		@RS_EngineCost *= #$RS_Temp2$
		@RS_EngineCost += #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_BaseCost$
		%RS_EngineDryCost = #$RS_EngineCost$
		%RS_EngineEntryCost = #$RS_EngineCost$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_EntryCostCoeff$
		%RS_EnginePriceAutoGenerated = true
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePriceAutoGenerated[*rue],#RS_EngineType[nuclear],#RS_EngineDryMass[>0],#RS_MaxThrust[>0],#RS_ISPVac[>0],#RS_EngineIgnitions[>0]],*
	{
		%RS_Temp = #$RS_ISPVac$
		@RS_Temp /= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_ISPCoeff$
		@RS_Temp != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_ISPPower$
		%RS_Temp1 = #$RS_MaxThrust$
		@RS_Temp1 /= #$RS_EngineDryMass$
		@RS_Temp1 /= 9.81
		@RS_Temp1 != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_TWRPower$
		%RS_Temp2 = #$RS_MaxThrust$
		@RS_Temp2 != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_ThrustPower$
		%RS_EngineCost = #$RS_EngineIgnitions$
		@RS_EngineCost != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_IgnitionsPower$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_CostCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_ISPCoeff$
		@RS_EngineCost *= #$RS_Temp$
		@RS_EngineCost *= #$RS_Temp1$
		@RS_EngineCost *= #$RS_Temp2$
		@RS_EngineCost += #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_BaseCost$
		%RS_EngineDryCost = #$RS_EngineCost$
		%RS_EngineEntryCost = #$RS_EngineCost$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Nuclear_EntryCostCoeff$
		%RS_EnginePriceAutoGenerated = true
	}
	// SRBs prices are generated as follows:
	// cost = ((ISPCoeff * ((ISP(vacuum, s) / ISPCoeff) ^ ISPPower) * MaxThrust(vacuum, KN) * ((Full SRB mass / Dry SRB mass) ^ MassRatioPower) * CostCoeff + Solid fuel cost + BaseCost
	// upgradeCost = cost * UpgradeCostCoeff
	// entryCost = cost * EntryCostCoeff
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePriceAutoGenerated[*rue],#RS_EngineType[SRB],#RS_EngineDryMass[>0],#RS_MaxThrust[>0],#RS_ISPVac[>0],#RS_SolidFuelMass[>0]],*
	{
		%RS_Temp = #$RS_ISPVac$
		@RS_Temp /= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_SRB_ISPCoeff$
		@RS_Temp != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_SRB_ISPPower$
		%RS_Temp1 = #$RS_SolidFuelMass$
		@RS_Temp1 += #$RS_EngineDryMass$
		@RS_Temp1 /= #$RS_EngineDryMass$
		@RS_Temp1 != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_SRB_MassRatioPower$
		%RS_Temp2 = #$RS_SolidFuelMass$
		@RS_Temp2 *= #$@RESOURCE_DEFINITION[SolidFuel]/unitCost$
		@RS_Temp2 /= #$@RESOURCE_DEFINITION[SolidFuel]/density$
		%RS_EngineCost = #$RS_MaxThrust$
		@RS_EngineCost *= #$RS_Temp$
		@RS_EngineCost *= #$RS_Temp1$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_SRB_CostCoeff$
		@RS_EngineCost += #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_SRB_BaseCost$
		%RS_EngineDryCost = #$RS_EngineCost$
		@RS_EngineCost += #$RS_Temp2$
		%RS_EngineEntryCost = #$RS_EngineCost$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_SRB_EntryCostCoeff$
		%RS_EnginePriceAutoGenerated = true
	}
	// Electric engines prices are generated as follows:
	// cost = (ISP(vacuum, s) * ((ISP(vacuum, s) / ISPCoeff) ^ ISPPower) * (MaxThrust(vacuum, KN) ^ ThrustPower) * ((MaxThrust(vacuum, KN) * 9.81 / (EC/sec)) ^ ThrustECRatioPower)) * CostCoeff + BaseCost
	// upgradeCost = cost * UpgradeCostCoeff
	// entryCost = cost * EntryCostCoeff
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],~RS_EnginePriceAutoGenerated[*rue],#RS_PropellantDensity[>0],@PROPELLANT[ElectricCharge]:HAS[#ratio[>0]],#RS_EngineType[electric],#RS_MaxThrust[>0],#RS_ISPVac[>0]],*
	{
		%RS_Temp = #$RS_ISPVac$
		@RS_Temp /= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Electric_ISPCoeff$
		@RS_Temp != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Electric_ISPPower$
		%RS_Temp1 = #$RS_MaxThrust$
		@RS_Temp1 != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Electric_ThrustPower$
		%RS_Temp2 = #$RS_ISPVac$
		@RS_Temp2 *= 9.81
		@RS_Temp2 *= #$RS_PropellantDensity$
		@RS_Temp2 /= #$PROPELLANT[ElectricCharge]:HAS[#ratio[>0]],0/ratio$
		@RS_Temp2 *= 9.81
		@RS_Temp2 != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Electric_ThrustECRatioPowerPower$
		%RS_EngineCost = #$RS_ISPVac$
		@RS_EngineCost *= #$RS_Temp$
		@RS_EngineCost *= #$RS_Temp1$
		@RS_EngineCost *= #$RS_Temp2$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Electric_CostCoeff$
		@RS_EngineCost += #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Electric_BaseCost$
		%RS_EngineDryCost = #$RS_EngineCost$
		%RS_EngineEntryCost = #$RS_EngineCost$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_Electric_EntryCostCoeff$
		%RS_EnginePriceAutoGenerated = true
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[air_breathing],~machLimit[]],*
	{
		%RS_EngineMachLimit = #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_AirBreathing_DefaultMachLimit$
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[air_breathing],#machLimit[*]],*
	{
		%RS_EngineMachLimit = #$machLimit$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_OverrideEnginesPrices[*rue],#RS_AutoGenerateEnginesPrices[*rue],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[air_breathing]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[air_breathing],#RS_EngineMachLimit[<0.7]],*
	{
		@RS_EngineMachLimit = 0.7
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[air_breathing],#RS_EngineMachLimit[>10]],*
	{
		@RS_EngineMachLimit = 10
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_OverrideEnginesPrices[*rue],#RS_AutoGenerateEnginesPrices[*rue],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[air_breathing]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EngineType[air_breathing],#RS_EngineMachLimit[>0],#RS_MaxThrust[>0],#RS_ISPVac[>0]],*
	{
		// Air-breathing engines prices are generated as follows:
		// cost = (((ISPCoeff * ((ISP(s) / ISPCoeff) ^ ISPPower) * BaseMaxThrust(KN) * (MachLimit[*] ^ MachLimitPower) * Multiplier * CostCoeff) / unconfiguredEngines_AirBreathing_ThrustCoeff) + BaseCost
		// [*] Minimum mach limit value is 0.7, maximum is 10.0, default value (if not set) is 5.0
		// upgradeCost = cost * UpgradeCostCoeff
		// entryCost = cost * EntryCostCoeff
		%RS_Temp = #$RS_ISPVac$
		@RS_Temp /= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_AirBreathing_ISPCoeff$
		@RS_Temp != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_AirBreathing_ISPPower$
		%RS_Temp1 = #$RS_EngineMachLimit$
		@RS_Temp1 != #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_AirBreathing_MachLimitPower$
		%RS_EngineCost = #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_AirBreathing_ISPCoeff$
		@RS_EngineCost *= #$RS_Temp$
		@RS_EngineCost *= #$RS_MaxThrust$
		@RS_EngineCost *= #$RS_Temp1$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_AirBreathing_CostCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_AirBreathing_Multiplier$
		@RS_EngineCost /= #$@REALISM_SIMPLIFIED/unconfiguredEngines_AirBreathing_ThrustCoeff$
		@RS_EngineCost += #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_AirBreathing_BaseCost$
		%RS_EngineDryCost = #$RS_EngineCost$
		%RS_EngineEntryCost = #$RS_EngineCost$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_AirBreathing_EntryCostCoeff$
		%RS_EnginePriceAutoGenerated = true
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_OverrideEnginesPrices[*rue],#RS_AutoGenerateEnginesPrices[*rue],#RS_EngineMultimode[*rue],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePriceAutoGenerated[*rue]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePriceAutoGenerated[*rue]],*
	{
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_MultiModeEngines_CostCoeff$
		@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_MultiModeEngines_CostCoeff$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/autoGenerateEnginesPrices_MultiModeEngines_CostCoeff$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_OverrideEnginesPrices[*rue],#RS_AutoGenerateEnginesPrices[*rue],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePriceAutoGenerated[*rue]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePriceAutoGenerated[*rue],#RS_EngineCost[*]],*
	{
		@RS_EngineCost ^= :^(\d+)\.[^56789]\d*$:$1:
		@RS_EngineCost ^= :^(\d+)\.[56789]\d*$:$1+increment:
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePriceAutoGenerated[*rue],#RS_EngineDryCost[*]],*
	{
		@RS_EngineDryCost ^= :^(\d+)\.[^56789]\d*$:$1:
		@RS_EngineDryCost ^= :^(\d+)\.[56789]\d*$:$1+increment:
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePriceAutoGenerated[*rue],#RS_EngineEntryCost[*]],*
	{
		@RS_EngineEntryCost ^= :^(\d+)\.[^56789]\d*$:$1:
		@RS_EngineEntryCost ^= :^(\d+)\.[56789]\d*$:$1+increment:
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_OverrideEnginesPrices[*rue],#RS_AutoGenerateEnginesPrices[*rue],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePriceAutoGenerated[*rue]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePriceAutoGenerated[*rue],#RS_EngineCost[*+increment]],*
	{
		@RS_EngineCost ^= :\+increment$::
		@RS_EngineCost += 1
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePriceAutoGenerated[*rue],#RS_EngineDryCost[*+increment]],*
	{
		@RS_EngineDryCost ^= :\+increment$::
		@RS_EngineDryCost += 1
	}
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePriceAutoGenerated[*rue],#RS_EngineEntryCost[*+increment]],*
	{
		@RS_EngineEntryCost ^= :\+increment$::
		@RS_EngineEntryCost += 1
	}
}


// ======================================================
// Multiply engines params to coeffs from Settings.cfg
// ======================================================

// SRB engines coeffs
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EngineType[SRB],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[SRB],~RS_IgnoreEngine[]],*
	{
		@minThrust *= #$@REALISM_SIMPLIFIED/SRB_ThrustCoeff$
		@maxThrust *= #$@REALISM_SIMPLIFIED/SRB_ThrustCoeff$
		@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/SRB_MassCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/SRB_CostCoeff$
		@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/SRB_CostCoeff$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/SRB_CostCoeff$
	}
	@RESOURCE[SolidFuel]
	{
		@amount *= #$@REALISM_SIMPLIFIED/SRB_SolidFuelAmountCoeff$
		@maxAmount *= #$@REALISM_SIMPLIFIED/SRB_SolidFuelAmountCoeff$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_SRBUniversalMinThrust[*rue],@MODULE[ModuleEngines*]:HAS[#RS_EngineType[SRB],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[SRB],~RS_IgnoreEngine[]],*
	{
		@minThrust = #$maxThrust$
		@minThrust *= #$@REALISM_SIMPLIFIED/SRB_MinThrustPercent$
		@minThrust /= 100
	}
}
// Nuclear engines coeffs
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EngineType[nuclear],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[nuclear],~RS_IgnoreEngine[]],*
	{
		@minThrust *= #$@REALISM_SIMPLIFIED/nuclearEngines_ThrustCoeff$
		@maxThrust *= #$@REALISM_SIMPLIFIED/nuclearEngines_ThrustCoeff$
		@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/nuclearEngines_MassCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/nuclearEngines_CostCoeff$
		@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/nuclearEngines_CostCoeff$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/nuclearEngines_CostCoeff$
	}
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[nuclear],~RS_IgnoreEngine[],~RS_EngineUseResponseTime[]],*
	{
		%RS_EngineUseResponseTime = true
	}
}
// Electric engines coeffs
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EngineType[electric],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[electric],~RS_IgnoreEngine[]],*
	{
		@minThrust *= #$@REALISM_SIMPLIFIED/electricEngines_ThrustCoeff$
		@maxThrust *= #$@REALISM_SIMPLIFIED/electricEngines_ThrustCoeff$
		@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/electricEngines_MassCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/electricEngines_CostCoeff$
		@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/electricEngines_CostCoeff$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/electricEngines_CostCoeff$

		@PROPELLANT[ElectricCharge]
		{
			@ratio *= #$@REALISM_SIMPLIFIED/electricEngines_ECConsumptionCoeff$
			@ratio /= #$@REALISM_SIMPLIFIED/electricEngines_ThrustCoeff$
		}
	}
}
// Air-breathing engines coeffs
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EngineType[air_breathing],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[air_breathing],~RS_IgnoreEngine[]],*
	{
		@minThrust *= #$@REALISM_SIMPLIFIED/airBreathingEngines_ThrustCoeff$
		@maxThrust *= #$@REALISM_SIMPLIFIED/airBreathingEngines_ThrustCoeff$
		@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/airBreathingEngines_MassCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/airBreathingEngines_CostCoeff$
		@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/airBreathingEngines_CostCoeff$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/airBreathingEngines_CostCoeff$
	}
}
// Liquid fuel engines coeffs
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EngineType[liquid_fuel],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[liquid_fuel],~RS_IgnoreEngine[]],*
	{
		@minThrust *= #$@REALISM_SIMPLIFIED/LFEngines_ThrustCoeff$
		@maxThrust *= #$@REALISM_SIMPLIFIED/LFEngines_ThrustCoeff$
		@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/LFEngines_MassCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/LFEngines_CostCoeff$
		@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/LFEngines_CostCoeff$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/LFEngines_CostCoeff$
	}
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[liquid_fuel],~RS_IgnoreEngine[],~RS_EngineUseResponseTime[]],*
	{
		%RS_EngineUseResponseTime = true
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EngineType[lower_stage],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[lower_stage],~RS_IgnoreEngine[]],*
	{
		@minThrust *= #$@REALISM_SIMPLIFIED/LFEngines_ThrustCoeff$
		@maxThrust *= #$@REALISM_SIMPLIFIED/LFEngines_ThrustCoeff$
		@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/LFEngines_MassCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/LFEngines_CostCoeff$
		@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/LFEngines_CostCoeff$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/LFEngines_CostCoeff$
		@minThrust *= #$@REALISM_SIMPLIFIED/lowerStageEngines_ThrustCoeff$
		@maxThrust *= #$@REALISM_SIMPLIFIED/lowerStageEngines_ThrustCoeff$
		@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/lowerStageEngines_MassCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/lowerStageEngines_CostCoeff$
		@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/lowerStageEngines_CostCoeff$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/lowerStageEngines_CostCoeff$
	}
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[lower_stage],~RS_IgnoreEngine[],~RS_EngineUseResponseTime[]],*
	{
		%RS_EngineUseResponseTime = true
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EngineType[sustainer],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[sustainer],~RS_IgnoreEngine[]],*
	{
		@minThrust *= #$@REALISM_SIMPLIFIED/LFEngines_ThrustCoeff$
		@maxThrust *= #$@REALISM_SIMPLIFIED/LFEngines_ThrustCoeff$
		@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/LFEngines_MassCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/LFEngines_CostCoeff$
		@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/LFEngines_CostCoeff$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/LFEngines_CostCoeff$
		@minThrust *= #$@REALISM_SIMPLIFIED/sustainerEngines_ThrustCoeff$
		@maxThrust *= #$@REALISM_SIMPLIFIED/sustainerEngines_ThrustCoeff$
		@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/sustainerEngines_MassCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/sustainerEngines_CostCoeff$
		@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/sustainerEngines_CostCoeff$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/sustainerEngines_CostCoeff$
	}
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[sustainer],~RS_IgnoreEngine[],~RS_EngineUseResponseTime[]],*
	{
		%RS_EngineUseResponseTime = true
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EngineType[upper_stage],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[upper_stage],~RS_IgnoreEngine[]],*
	{
		@minThrust *= #$@REALISM_SIMPLIFIED/LFEngines_ThrustCoeff$
		@maxThrust *= #$@REALISM_SIMPLIFIED/LFEngines_ThrustCoeff$
		@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/LFEngines_MassCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/LFEngines_CostCoeff$
		@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/LFEngines_CostCoeff$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/LFEngines_CostCoeff$
		@minThrust *= #$@REALISM_SIMPLIFIED/upperStageEngines_ThrustCoeff$
		@maxThrust *= #$@REALISM_SIMPLIFIED/upperStageEngines_ThrustCoeff$
		@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/upperStageEngines_MassCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/upperStageEngines_CostCoeff$
		@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/upperStageEngines_CostCoeff$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/upperStageEngines_CostCoeff$
	}
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[upper_stage],~RS_IgnoreEngine[],~RS_EngineUseResponseTime[]],*
	{
		%RS_EngineUseResponseTime = true
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EngineType[OMS],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[OMS],~RS_IgnoreEngine[]],*
	{
		@minThrust *= #$@REALISM_SIMPLIFIED/LFEngines_ThrustCoeff$
		@maxThrust *= #$@REALISM_SIMPLIFIED/LFEngines_ThrustCoeff$
		@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/LFEngines_MassCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/LFEngines_CostCoeff$
		@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/LFEngines_CostCoeff$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/LFEngines_CostCoeff$
		@minThrust *= #$@REALISM_SIMPLIFIED/OMSEngines_ThrustCoeff$
		@maxThrust *= #$@REALISM_SIMPLIFIED/OMSEngines_ThrustCoeff$
		@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/OMSEngines_MassCoeff$
		@RS_EngineCost *= #$@REALISM_SIMPLIFIED/OMSEngines_CostCoeff$
		@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/OMSEngines_CostCoeff$
		@RS_EngineEntryCost *= #$@REALISM_SIMPLIFIED/OMSEngines_CostCoeff$
	}
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[OMS],~RS_IgnoreEngine[],~RS_EngineUseResponseTime[]],*
	{
		%RS_EngineUseResponseTime = true
	}
}


// ==================================================================================
// Set minThrust to zero for OMS engines, if simpleOMSEngines is true in Settings.cfg
// ==================================================================================
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_SimpleOMSEngines[*rue],@MODULE[ModuleEngines*]:HAS[#RS_EngineType[OMS]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[OMS],~RS_IgnoreEngine[]],*
	{
		@minThrust = 0
	}
}


// ==================================================================================
// Set minThrust to zero for LF engines, if simpleLFEngines is true in Settings.cfg
// ==================================================================================
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_SimpleLFEngines[*rue],@MODULE[ModuleEngines*]:HAS[#RS_EngineType[liquid_fuel]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[liquid_fuel],~RS_IgnoreEngine[]],*
	{
		@minThrust = 0
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_SimpleLFEngines[*rue],@MODULE[ModuleEngines*]:HAS[#RS_EngineType[lower_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[lower_stage],~RS_IgnoreEngine[]],*
	{
		@minThrust = 0
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_SimpleLFEngines[*rue],@MODULE[ModuleEngines*]:HAS[#RS_EngineType[sustainer]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[sustainer],~RS_IgnoreEngine[]],*
	{
		@minThrust = 0
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_SimpleLFEngines[*rue],@MODULE[ModuleEngines*]:HAS[#RS_EngineType[upper_stage]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineType[upper_stage],~RS_IgnoreEngine[]],*
	{
		@minThrust = 0
	}
}


// =========================================================================
// Engine response time for non-pressure-fed liquid fuel and nuclear engines
// =========================================================================
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EnginesResponseTime[*rue],@MODULE[ModuleEngines*]:HAS[#RS_EngineUseResponseTime[*rue],~RS_EnginePressureFed[*rue]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineUseResponseTime[*rue],~RS_EnginePressureFed[*rue],~RS_IgnoreEngine[]],*
	{
		%@engineAccelerationSpeed = #$@REALISM_SIMPLIFIED/engines_ResponseTimeCoeff$
		@engineAccelerationSpeed /= #$maxThrust$

		%engineDecelerationSpeed = #$@REALISM_SIMPLIFIED/engines_ResponseTimeCoeff$
		@engineDecelerationSpeed /= #$maxThrust$

		%useEngineResponseTime = True
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EnginesResponseTime[*rue],@MODULE[ModuleEngines*]:HAS[#RS_EngineUseResponseTime[*rue],#RS_EnginePressureFed[*rue]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineUseResponseTime[*rue],#RS_EnginePressureFed[*rue],~RS_IgnoreEngine[]],*
	{
		%@engineAccelerationSpeed = #$@REALISM_SIMPLIFIED/engines_PressureFed_ResponseTimeCoeff$
		@engineAccelerationSpeed /= #$maxThrust$

		%engineDecelerationSpeed = #$@REALISM_SIMPLIFIED/engines_PressureFed_ResponseTimeCoeff$
		@engineDecelerationSpeed /= #$maxThrust$

		%useEngineResponseTime = True
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EnginesResponseTime[*rue],@MODULE[ModuleEngines*]:HAS[#RS_EngineUseResponseTime[*rue],#engineAccelerationSpeed[<1]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineUseResponseTime[*rue],#engineAccelerationSpeed[<1],~RS_IgnoreEngine[]],*
	{
		@engineAccelerationSpeed = 1
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EnginesResponseTime[*rue],@MODULE[ModuleEngines*]:HAS[#RS_EngineUseResponseTime[*rue],#engineAccelerationSpeed[>10]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineUseResponseTime[*rue],#engineAccelerationSpeed[>10],~RS_IgnoreEngine[]],*
	{
		@engineAccelerationSpeed = 10
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EnginesResponseTime[*rue],@MODULE[ModuleEngines*]:HAS[#RS_EngineUseResponseTime[*rue],#engineDecelerationSpeed[<1]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineUseResponseTime[*rue],#engineDecelerationSpeed[<1],~RS_IgnoreEngine[]],*
	{
		@engineDecelerationSpeed = 1
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EnginesResponseTime[*rue],@MODULE[ModuleEngines*]:HAS[#RS_EngineUseResponseTime[*rue],#engineDecelerationSpeed[>10]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EngineUseResponseTime[*rue],#engineDecelerationSpeed[>10],~RS_IgnoreEngine[]],*
	{
		@engineDecelerationSpeed = 10
	}
}


// ================================================
// Clusters
// ================================================

// If engine is not in cluster, set engines count in cluster to 1
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_ClusterEnginesCount[],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_ClusterEnginesCount[],~RS_IgnoreEngine[]],*
	{
		%RS_ClusterEnginesCount = 1
	}
}
// Multiply thrust, mass and cost by engines count in cluster
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_ClusterEnginesCount[*],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_ClusterEnginesCount[*],~RS_IgnoreEngine[]],*
	{
		@RS_MinThrust *= #$RS_ClusterEnginesCount$
		@minThrust *= #$RS_ClusterEnginesCount$
		@RS_MaxThrust *= #$RS_ClusterEnginesCount$
		@maxThrust *= #$RS_ClusterEnginesCount$
		@RS_EngineDryMass *= #$RS_ClusterEnginesCount$
		@RS_EngineCost *= #$RS_ClusterEnginesCount$
		@RS_EngineDryCost *= #$RS_ClusterEnginesCount$
	}
}


// ==================================================================================
// Update parts mass and cost
// ==================================================================================

@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_MassOffset[*],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@mass = #$RS_MassOffset$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_MassOffset[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@mass = 0
}
// Add primary engine mass to part mass
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EngineDryMass[>0],#RS_EnginePrimary[*rue],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@mass += #$MODULE[ModuleEngines*]:HAS[#RS_EngineDryMass[>0],#RS_EnginePrimary[*rue],~RS_IgnoreEngine[]],0/RS_EngineDryMass$
}
// Add first auxiliary engine mass to part mass
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineMultimode[],@MODULE[ModuleEngines*]:HAS[#RS_EngineDryMass[>0],#RS_EngineAuxiliary[*rue],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@mass += #$MODULE[ModuleEngines*]:HAS[#RS_EngineDryMass[>0],#RS_EngineAuxiliary[*rue],~RS_IgnoreEngine[]],0/RS_EngineDryMass$
}

@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_OverrideEnginesPrices[*rue],#RS_CostOffset[*],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@cost = #$RS_CostOffset$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_OverrideEnginesPrices[*rue],~RS_CostOffset[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@cost = 0
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_OverrideEnginesPrices[*rue],#RS_EntryCostOffset[*],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@entryCost = #$RS_EntryCostOffset$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_OverrideEnginesPrices[*rue],~RS_EntryCostOffset[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@entryCost = 0
}
// Add engine costs to part costs
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_OverrideEnginesPrices[*rue],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineCost[*],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@cost += #$MODULE[ModuleEngines*]:HAS[#RS_EngineCost[*],#RS_EnginePrimary[*rue],~RS_IgnoreEngine[]],0/RS_EngineCost$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_OverrideEnginesPrices[*rue],~RS_EngineMultimode[],@MODULE[ModuleEngines*]:HAS[#RS_EngineAuxiliary[*rue],#RS_EngineCost[*],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@cost += #$MODULE[ModuleEngines*]:HAS[#RS_EngineCost[*],#RS_EngineAuxiliary[*rue],~RS_IgnoreEngine[]],0/RS_EngineCost$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_OverrideEnginesPrices[*rue],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineEntryCost[*],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@entryCost += #$MODULE[ModuleEngines*]:HAS[#RS_EngineEntryCost[*],#RS_EnginePrimary[*rue],~RS_IgnoreEngine[]],0/RS_EngineEntryCost$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_OverrideEnginesPrices[*rue],~RS_EngineMultimode[],@MODULE[ModuleEngines*]:HAS[#RS_EngineAuxiliary[*rue],#RS_EngineEntryCost[*],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@entryCost += #$MODULE[ModuleEngines*]:HAS[#RS_EngineEntryCost[*],#RS_EngineAuxiliary[*rue],~RS_IgnoreEngine[]],0/RS_EngineEntryCost$
}


// =======================
// Set engines propellants
// =======================

// Switch engines, using LH2 or LqdMethane, to LiquidFuel
// This is done for proper patching later in this config
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[@PROPELLANT[LqdHydrogen],#RS_EnginePropellants[*],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[@PROPELLANT[LqdHydrogen],#RS_EnginePropellants[*],~RS_IgnoreEngine[]],*
	{
		@PROPELLANT[LqdHydrogen]
		{
			@name = LiquidFuel
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[@PROPELLANT[LqdMethane],#RS_EnginePropellants[*],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[@PROPELLANT[LqdMethane],#RS_EnginePropellants[*],~RS_IgnoreEngine[]],*
	{
		@PROPELLANT[LqdMethane]
		{
			@name = LiquidFuel
		}
	}
}

// Switch Monopropellant engines to LF/Ox
// This is done for proper patching later in this config
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[@PROPELLANT[MonoPropellant],!PROPELLANT[LiquidFuel],!PROPELLANT[Oxidizer],#RS_EnginePropellants[*],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[@PROPELLANT[MonoPropellant],!PROPELLANT[LiquidFuel],!PROPELLANT[Oxidizer],#RS_EnginePropellants[*],~RS_IgnoreEngine[]],*
	{
		!PROPELLANT[MonoPropellant] {}
		PROPELLANT
		{
			name = LiquidFuel
			ratio = 0.9
			DrawGauge = True
		}
		PROPELLANT
		{
			name = Oxidizer
			ratio = 1.1
		}
	}
}


//
// Apply engine propellants configurations
//

// Bipropellant engines

@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[AlcoLOX],~RS_IgnoreEngine[]],~RS_AlcoLOX_Engines[*rue]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[AlcoLOX],~RS_IgnoreEngine[]],*
	{
		@RS_EnginePropellants = KeroLOX
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[AlcoLOX],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[AlcoLOX],~RS_IgnoreEngine[]],*
	{
		%PROPELLANT[LiquidFuel]
		{
			%name = Ethanol75
			%ratio = #$@REALISM_SIMPLIFIED/AlcoLOX_Ethanol75_Ratio$
			%DrawGauge = True
		}
		%PROPELLANT[Oxidizer]
		{
			%name = LqdOxygen
			%ratio = #$@REALISM_SIMPLIFIED/AlcoLOX_LOX_Ratio$
			%DrawGauge = False
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[KeroLOX],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[KeroLOX],~RS_IgnoreEngine[]],*
	{
		%PROPELLANT[LiquidFuel]
		{
			%name = Kerosene
			%ratio = #$@REALISM_SIMPLIFIED/KeroLOX_Kerosene_Ratio$
			%DrawGauge = True
		}
		%PROPELLANT[Oxidizer]
		{
			%name = LqdOxygen
			%ratio = #$@REALISM_SIMPLIFIED/KeroLOX_LOX_Ratio$
			%DrawGauge = False
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[HydroLOX],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[HydroLOX],~RS_IgnoreEngine[]],*
	{
		%PROPELLANT[LiquidFuel]
		{
			%name = LqdHydrogen
			%ratio = #$@REALISM_SIMPLIFIED/HydroLOX_LH2_Ratio$
			%DrawGauge = True
		}
		%PROPELLANT[Oxidizer]
		{
			%name = LqdOxygen
			%ratio = #$@REALISM_SIMPLIFIED/HydroLOX_LOX_Ratio$
			%DrawGauge = False
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[MethaLOX],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[MethaLOX],~RS_IgnoreEngine[]],*
	{
		%PROPELLANT[LiquidFuel]
		{
			%name = LqdMethane
			%ratio = #$@REALISM_SIMPLIFIED/MethaLOX_LqdMethane_Ratio$
			%DrawGauge = True
		}
		%PROPELLANT[Oxidizer]
		{
			%name = LqdOxygen
			%ratio = #$@REALISM_SIMPLIFIED/MethaLOX_LOX_Ratio$
			%DrawGauge = False
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[Hypergolics],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[Hypergolics],~RS_IgnoreEngine[]],*
	{
		%PROPELLANT[LiquidFuel]
		{
			%name = #$@REALISM_SIMPLIFIED/Hypergolics_Fuel$
			%ratio = #$@REALISM_SIMPLIFIED/Hypergolics_Fuel_Ratio$
			%DrawGauge = True
		}
		%PROPELLANT[Oxidizer]
		{
			%name = #$@REALISM_SIMPLIFIED/Hypergolics_Oxidizer$
			%ratio = #$@REALISM_SIMPLIFIED/Hypergolics_Oxidizer_Ratio$
			%DrawGauge = False
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[KeroLOX+LH2],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[KeroLOX+LH2],~RS_IgnoreEngine[]],*
	{
		%PROPELLANT[LiquidFuel]
		{
			%name = Kerosene
			%ratio = #$@REALISM_SIMPLIFIED/KeroLOXLH2_Kerosene_Ratio$
			%DrawGauge = True
		}
		%PROPELLANT[Oxidizer]
		{
			%name = LqdOxygen
			%ratio = #$@REALISM_SIMPLIFIED/KeroLOXLH2_LOX_Ratio$
			%DrawGauge = False
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[KeroLOX+LH2],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[KeroLOX+LH2],~RS_IgnoreEngine[]],*
	{
		+PROPELLANT[Kerosene]
		{
			%name = LqdHydrogen
			%ratio = #$@REALISM_SIMPLIFIED/KeroLOXLH2_LH2_Ratio$
			%DrawGauge = False
		}
	}
}

// Air-breathing engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[AvGas],~RS_IgnoreEngine[]],~RS_AvGas_Engines[*rue]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[AvGas],~RS_IgnoreEngine[]],*
	{
		@RS_EnginePropellants = Kerosene
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[AvGas],#RS_EngineType[air_breathing],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[AvGas],#RS_EngineType[air_breathing],~RS_IgnoreEngine[]],*
	{
		%PROPELLANT[LiquidFuel]
		{
			%name = AvGas
			%ratio *= 6.95
			%DrawGauge = True
		}
		!PROPELLANT[Oxidizer] {}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[Kerosene],#RS_EngineType[air_breathing],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[Kerosene],#RS_EngineType[air_breathing],~RS_IgnoreEngine[]],*
	{
		%PROPELLANT[LiquidFuel]
		{
			%name = Kerosene
			%ratio *= 6
			%DrawGauge = True
		}
		!PROPELLANT[Oxidizer] {}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[LqdHydrogen],#RS_EngineType[air_breathing],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[LqdHydrogen],#RS_EngineType[air_breathing],~RS_IgnoreEngine[]],*
	{
		%PROPELLANT[LiquidFuel]
		{
			%name = LqdHydrogen
			%ratio *= 70.5
			%DrawGauge = True
		}
		!PROPELLANT[Oxidizer] {}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[LqdMethane],#RS_EngineType[air_breathing],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[LqdMethane],#RS_EngineType[air_breathing],~RS_IgnoreEngine[]],*
	{
		%PROPELLANT[LiquidFuel]
		{
			%name = LqdMethane
			%ratio *= 11.7
			%DrawGauge = True
		}
		!PROPELLANT[Oxidizer] {}
	}
}

// Monopropellant engines (including nuclear)
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[MonoPropellant],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[MonoPropellant],~RS_IgnoreEngine[]],*
	{
		%PROPELLANT[LiquidFuel]
		{
			%name = #$@REALISM_SIMPLIFIED/MonoPropellant$
			%ratio = 1
			%DrawGauge = True
		}
		!PROPELLANT[Oxidizer] {}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[Kerosene],~RS_EngineType[air_breathing],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[Kerosene],!PROPELLANT[IntakeAir],~RS_IgnoreEngine[]],*
	{
		%PROPELLANT[LiquidFuel]
		{
			%name = Kerosene
			%ratio = 1
			%DrawGauge = True
		}
		!PROPELLANT[Oxidizer] {}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[LqdHydrogen],~RS_EngineType[air_breathing],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[LqdHydrogen],!PROPELLANT[IntakeAir],~RS_IgnoreEngine[]],*
	{
		%PROPELLANT[LiquidFuel]
		{
			%name = LqdHydrogen
			%ratio = 1
			%DrawGauge = True
		}
		!PROPELLANT[Oxidizer] {}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[LqdMethane],~RS_EngineType[air_breathing],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[LqdMethane],!PROPELLANT[IntakeAir],~RS_IgnoreEngine[]],*
	{
		%PROPELLANT[LiquidFuel]
		{
			%name = LqdMethane
			%ratio = 1
			%DrawGauge = True
		}
		!PROPELLANT[Oxidizer] {}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[LqdAmmonia],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EnginePropellants[LqdAmmonia],~RS_IgnoreEngine[]],*
	{
		%PROPELLANT[LiquidFuel]
		{
			%name = LqdAmmonia
			%ratio = 1
			%DrawGauge = True
		}
		!PROPELLANT[Oxidizer] {}
	}
}


// ================================================================
// Is engine pressure-fed? If so, add Pressurization Gas propellant
// ================================================================
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePressureFed[*rue],~RS_IgnoreEngine[]],#RS_PressureFedEngines[*rue]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[#RS_EnginePressureFed[*rue],~RS_IgnoreEngine[]],*
	{
		PROPELLANT
		{
			name = #$@REALISM_SIMPLIFIED/pressurizationGas$
			ratio = #$@REALISM_SIMPLIFIED/pressurizationGas_Ratio$
			FlowMode = #$@REALISM_SIMPLIFIED/pressurizationGas_FlowMode$
			DrawGauge = False
		}
	}
}


// ================================================================
// Gimbal params
// ================================================================
// Main and vernier gimbal modules
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleGimbal]:HAS[#gimbalTransformName[*ernier*]],@MODULE[ModuleGimbal]:HAS[~gimbalTransformName[*ernier*]],#RS_EngineGimbalRange[*],#RS_EngineVernierGimbalRange[*]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleGimbal]:HAS[~gimbalTransformName[*ernier*]],*
	{
		%RS_PrimaryGimbal = true
	}
	@MODULE[ModuleGimbal]:HAS[#gimbalTransformName[*ernier*]],*
	{
		%RS_VernierGimbal = true
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleGimbal]:HAS[~RS_PrimaryGimbal[],~RS_VernierGimbal[]],#RS_EngineGimbalRange[*]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleGimbal]:HAS[~RS_PrimaryGimbal[],~RS_VernierGimbal[]],*
	{
		%RS_PrimaryGimbal = true
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleGimbal]:HAS[#RS_PrimaryGimbal[*rue]],#RS_EngineGimbalRange[*]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleGimbal]:HAS[#RS_PrimaryGimbal[*rue]],*
	{
		%gimbalRange = #$/RS_EngineGimbalRange$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleGimbal]:HAS[#RS_PrimaryGimbal[*rue]],#RS_EngineGimbalRange[*]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleGimbal]:HAS[#RS_PrimaryGimbal[*rue],#gimbalRangeXN[>0]],*
	{
		%gimbalRangeXN = #$/RS_EngineGimbalRange$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleGimbal]:HAS[#RS_PrimaryGimbal[*rue]],#RS_EngineGimbalRange[*]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleGimbal]:HAS[#RS_PrimaryGimbal[*rue],#gimbalRangeXP[>0]],*
	{
		%gimbalRangeXP = #$/RS_EngineGimbalRange$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleGimbal]:HAS[#RS_PrimaryGimbal[*rue]],#RS_EngineGimbalRange[*]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleGimbal]:HAS[#RS_PrimaryGimbal[*rue],#gimbalRangeYN[>0]],*
	{
		%gimbalRangeYN = #$/RS_EngineGimbalRange$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleGimbal]:HAS[#RS_PrimaryGimbal[*rue]],#RS_EngineGimbalRange[*]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleGimbal]:HAS[#RS_PrimaryGimbal[*rue],#gimbalRangeYP[>0]],*
	{
		%gimbalRangeYP = #$/RS_EngineGimbalRange$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleGimbal]:HAS[#RS_VernierGimbal[*rue]],#RS_EngineGimbalRange[*]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleGimbal]:HAS[#RS_VernierGimbal[*rue]],*
	{
		%gimbalRange = #$/RS_EngineVernierGimbalRange$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleGimbal]:HAS[#RS_VernierGimbal[*rue]],#RS_EngineGimbalRange[*]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleGimbal]:HAS[#RS_VernierGimbal[*rue],#gimbalRangeXN[>0]],*
	{
		%gimbalRangeXN = #$/RS_EngineVernierGimbalRange$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleGimbal]:HAS[#RS_VernierGimbal[*rue]],#RS_EngineGimbalRange[*]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleGimbal]:HAS[#RS_VernierGimbal[*rue],#gimbalRangeXP[>0]],*
	{
		%gimbalRangeXP = #$/RS_EngineVernierGimbalRange$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleGimbal]:HAS[#RS_VernierGimbal[*rue]],#RS_EngineGimbalRange[*]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleGimbal]:HAS[#RS_VernierGimbal[*rue],#gimbalRangeYN[>0]],*
	{
		%gimbalRangeYN = #$/RS_EngineVernierGimbalRange$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleGimbal]:HAS[#RS_VernierGimbal[*rue]],#RS_EngineGimbalRange[*]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleGimbal]:HAS[#RS_VernierGimbal[*rue],#gimbalRangeYP[>0]],*
	{
		%gimbalRangeYP = #$/RS_EngineVernierGimbalRange$
	}
}
// Gimbal response speed
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EnginesGimbalResponseSpeed[*rue],@MODULE[ModuleGimbal]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleGimbal],*
	{
		%useGimbalResponseSpeed = true
		%gimbalResponseSpeed = #$@REALISM_SIMPLIFIED/engines_GimbalResponseSpeed$
	}
}
// Primary gimbal transform
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineGimbalTransformPrimary[],@MODULE[ModuleGimbal]:HAS[#RS_PrimaryGimbal[*rue],#gimbalTransformName[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineGimbalTransformPrimary = #$MODULE[ModuleGimbal]:HAS[#RS_PrimaryGimbal[*rue],#gimbalTransformName[*]],0/gimbalTransformName$
	@MODULE[ModuleGimbal]:HAS[#RS_PrimaryGimbal[*rue],#gimbalTransformName[*],~RS_EngineGimbalTransform[]],0
	{
		%RS_EngineGimbalTransform = true
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineGimbalTransform2[],@MODULE[ModuleGimbal]:HAS[#RS_PrimaryGimbal[*rue],#gimbalTransformName[*],~RS_EngineGimbalTransform[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineGimbalTransform2 = #$MODULE[ModuleGimbal]:HAS[#RS_PrimaryGimbal[*rue],#gimbalTransformName[*],~RS_EngineGimbalTransform[]],0/gimbalTransformName$
	@MODULE[ModuleGimbal]:HAS[#RS_PrimaryGimbal[*rue],#gimbalTransformName[*],~RS_EngineGimbalTransform[]],0
	{
		%RS_EngineGimbalTransform = true
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineGimbalTransform3[],@MODULE[ModuleGimbal]:HAS[#RS_PrimaryGimbal[*rue],#gimbalTransformName[*],~RS_EngineGimbalTransform[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineGimbalTransform3 = #$MODULE[ModuleGimbal]:HAS[#RS_PrimaryGimbal[*rue],#gimbalTransformName[*],~RS_EngineGimbalTransform[]],0/gimbalTransformName$
	@MODULE[ModuleGimbal]:HAS[#RS_PrimaryGimbal[*rue],#gimbalTransformName[*],~RS_EngineGimbalTransform[]],0
	{
		%RS_EngineGimbalTransform = true
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_EngineGimbalTransform4[],@MODULE[ModuleGimbal]:HAS[#RS_PrimaryGimbal[*rue],#gimbalTransformName[*],~RS_EngineGimbalTransform[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineGimbalTransform4 = #$MODULE[ModuleGimbal]:HAS[#RS_PrimaryGimbal[*rue],#gimbalTransformName[*],~RS_EngineGimbalTransform[]],0/gimbalTransformName$
	@MODULE[ModuleGimbal]:HAS[#RS_PrimaryGimbal[*rue],#gimbalTransformName[*],~RS_EngineGimbalTransform[]],0
	{
		%RS_EngineGimbalTransform = true
	}
}

// ================================================================
// Engine variants (B9PartSwitch)
// ================================================================

@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[~moduleID[RS_EngineConfigSwitch],@SUBTYPE:HAS[@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[~moduleID[RS_EngineConfigSwitch],@SUBTYPE:HAS[@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]]]
	{
		%moduleID = RS_EngineConfigSwitch
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		%switcherDescription = #LOC_RS_EngineConfig_DisplayName
		%uiGroupName = RealismSimplified
		%uiGroupDisplayName = #LOC_RealismSimplified_UIGroup_DisplayName
	}
	@MODULE[ModuleEngines],*
	{
		@name = ModuleEnginesFX
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch],@SUBTYPE:HAS[~RS_EngineDefaultVariant[],!MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],!MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]],*
		{
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleEnginesFX
				}
				DATA
				{
				}
			}
		}
	}
}
// Set proper engineID for primary engine and B9PS switcher
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]],@MODULE[ModuleEnginesFX]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineID = RS_Engine
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]],@MODULE[ModuleEnginesFX]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#engineID[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_EngineID = #$MODULE[ModuleEnginesFX]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#engineID[*]],0/engineID$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]],@MODULE[ModuleEnginesFX]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],~engineID[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEnginesFX]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],~engineID[]],0
	{
		engineID = #$/RS_EngineID$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]],#RS_EngineID[*]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE,*
		{
			@MODULE,*
			{
				@IDENTIFIER[ModuleEnginesFX]
				{
					%engineID = #$/RS_EngineID$
				}
			}
		}
	}
}
// Upgrades for engine subtypes
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch],@SUBTYPE:HAS[#upgradeRequired[RS_AppropriateEngineUpgrade]]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[#name[*],#upgradeRequired[RS_AppropriateEngineUpgrade]],*
		{
			@upgradeRequired = RS_Engine_%CONFIG%_Upgrade
			@upgradeRequired ^= #:%CONFIG%:$name$:
		}
	}
}

// Engines cluster - set relevant value for all B9PS subtypes without one
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_ClusterEnginesCount[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_ClusterEnginesCount[],~RS_MaxThrust[],@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#maxThrust[*]]]],*
		{
			RS_ClusterEnginesCount = 1
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_ClusterEnginesCount[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_ClusterEnginesCount[]],*
		{
			RS_ClusterEnginesCount = #$/MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_ClusterEnginesCount[*]],0/RS_ClusterEnginesCount$
		}
	}
}

// ISP
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_ISPVac[],@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[@atmosphereCurve]]],*
		{
			RS_ISPVac = #$MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[@atmosphereCurve]],0/DATA/atmosphereCurve/key,0$
			@RS_ISPVac ^= :^[\d\.]* ([\d\.]+) *.*$:$1:
			%RS_PreserveAtmoCurve = true
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_ISPSL[],@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[@atmosphereCurve]]],*
		{
			RS_ISPSL = #$MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[@atmosphereCurve]],0/DATA/atmosphereCurve/key,1$
			@RS_ISPSL ^= :^[\d\.]* ([\d\.]+) *.*$:$1:
			%RS_PreserveAtmoCurve = true
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_ISPVac[>0],#RS_ISPSL[>0],~RS_PreserveAtmoCurve[]],*
		{
			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					!atmosphereCurve{}
					atmosphereCurve
					{
						key = #0 $../../../RS_ISPVac$
						key = #1 $../../../RS_ISPSL$
					}
				}
			}
		}
	}
}
// Engine type
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[*]],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineType[]],*
		{
			RS_EngineType = #$/MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineType[*]],0/RS_EngineType$
		}
	}
}
// Max thrust
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_MaxThrust[],#RS_EngineType[liquid_fuel],@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#maxThrust[*]]]],*
		{
			RS_MaxThrust = #$MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#maxThrust[*]]],0/maxThrust$
			@RS_MaxThrust *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_ThrustCoeff$
		}
		@SUBTYPE:HAS[~RS_MinThrust[],#RS_EngineType[liquid_fuel],@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#minThrust[*]]]],*
		{
			RS_MinThrust = #$MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#minThrust[*]]],0/minThrust$
			@RS_MinThrust *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_ThrustCoeff$
		}
		@SUBTYPE:HAS[~RS_MaxThrust[],#RS_EngineType[OMS],@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#maxThrust[*]]]],*
		{
			RS_MaxThrust = #$MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#maxThrust[*]]],0/maxThrust$
			@RS_MaxThrust *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_ThrustCoeff$
			@RS_MaxThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_OMS_ThrustCoeff$
		}
		@SUBTYPE:HAS[~RS_MaxThrust[],#RS_EngineType[upper_stage],@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#maxThrust[*]]]],*
		{
			RS_MaxThrust = #$MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#maxThrust[*]]],0/maxThrust$
			@RS_MaxThrust *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_ThrustCoeff$
			@RS_MaxThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_UpperStage_ThrustCoeff$
		}
		@SUBTYPE:HAS[~RS_MaxThrust[],#RS_EngineType[sustainer],@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#maxThrust[*]]]],*
		{
			RS_MaxThrust = #$MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#maxThrust[*]]],0/maxThrust$
			@RS_MaxThrust *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_ThrustCoeff$
			@RS_MaxThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Sustainer_ThrustCoeff$
		}
		@SUBTYPE:HAS[~RS_MaxThrust[],#RS_EngineType[lower_stage],@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#maxThrust[*]]]],*
		{
			RS_MaxThrust = #$MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#maxThrust[*]]],0/maxThrust$
			@RS_MaxThrust *= #$@REALISM_SIMPLIFIED/unconfiguredLFEngines_ThrustCoeff$
			@RS_MaxThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_LowerStage_ThrustCoeff$
		}
		@SUBTYPE:HAS[~RS_MaxThrust[],#RS_EngineType[SRB],@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#maxThrust[*]]]],*
		{
			RS_MaxThrust = #$MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#maxThrust[*]]],0/maxThrust$
			@RS_MaxThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_SRB_ThrustCoeff$
		}
		@SUBTYPE:HAS[~RS_MaxThrust[],#RS_EngineType[nuclear],@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#maxThrust[*]]]],*
		{
			RS_MaxThrust = #$MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#maxThrust[*]]],0/maxThrust$
			@RS_MaxThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Nuclear_ThrustCoeff$
		}
		@SUBTYPE:HAS[~RS_MaxThrust[],#RS_EngineType[electric],@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#maxThrust[*]]]],*
		{
			RS_MaxThrust = #$MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#maxThrust[*]]],0/maxThrust$
			@RS_MaxThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Electric_ThrustCoeff$
		}
		@SUBTYPE:HAS[~RS_MaxThrust[],#RS_EngineType[air_breathing],@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#maxThrust[*]]]],*
		{
			RS_MaxThrust = #$MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#maxThrust[*]]],0/maxThrust$
			@RS_MaxThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_AirBreathing_ThrustCoeff$
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_MaxThrust[*],@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA]],*
		{
			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA]
			{
				@DATA
				{
					%maxThrust = #$../../RS_MaxThrust$
				}
			}
		}
	}
}
// Min thrust
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_MinThrust[],#RS_MaxThrust[*],#RS_EngineType[SRB]],*
		{
			RS_MinThrust = #$RS_MaxThrust$
			@RS_MinThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_SRB_MinThrustPercent$
			@RS_MinThrust /= 100
		}
		@SUBTYPE:HAS[~RS_MinThrust[],#RS_MaxThrust[*],#RS_EngineType[nuclear]],*
		{
			RS_MinThrust = #$RS_MaxThrust$
			@RS_MinThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Nuclear_MinThrustPercent$
			@RS_MinThrust /= 100
		}
		@SUBTYPE:HAS[~RS_MinThrust[],#RS_MaxThrust[*],#RS_EngineType[electric]],*
		{
			RS_MinThrust = #$RS_MaxThrust$
			@RS_MinThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Electric_MinThrustPercent$
			@RS_MinThrust /= 100
		}
		@SUBTYPE:HAS[~RS_MinThrust[],#RS_MaxThrust[*],#RS_EngineType[air_breathing]],*
		{
			RS_MinThrust = #$RS_MaxThrust$
			@RS_MinThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_AirBreathing_MinThrustPercent$
			@RS_MinThrust /= 100
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineTechLevel[low],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_MinThrust[],#RS_MaxThrust[*],#RS_EngineType[OMS]],*
		{
			RS_MinThrust = #$RS_MaxThrust$
			@RS_MinThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_OMS_LowTech_MinThrustPercent$
			@RS_MinThrust /= 100
		}
		@SUBTYPE:HAS[~RS_MinThrust[],#RS_MaxThrust[*],#RS_EngineType[upper_stage]],*
		{
			RS_MinThrust = #$RS_MaxThrust$
			@RS_MinThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_UpperStage_LowTech_MinThrustPercent$
			@RS_MinThrust /= 100
		}
		@SUBTYPE:HAS[~RS_MinThrust[],#RS_MaxThrust[*],#RS_EngineType[sustainer]],*
		{
			RS_MinThrust = #$RS_MaxThrust$
			@RS_MinThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Sustainer_LowTech_MinThrustPercent$
			@RS_MinThrust /= 100
		}
		@SUBTYPE:HAS[~RS_MinThrust[],#RS_MaxThrust[*],#RS_EngineType[lower_stage]],*
		{
			RS_MinThrust = #$RS_MaxThrust$
			@RS_MinThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_LowerStage_LowTech_MinThrustPercent$
			@RS_MinThrust /= 100
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineTechLevel[mid],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_MinThrust[],#RS_MaxThrust[*],#RS_EngineType[OMS]],*
		{
			RS_MinThrust = #$RS_MaxThrust$
			@RS_MinThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_OMS_MidTech_MinThrustPercent$
			@RS_MinThrust /= 100
		}
		@SUBTYPE:HAS[~RS_MinThrust[],#RS_MaxThrust[*],#RS_EngineType[upper_stage]],*
		{
			RS_MinThrust = #$RS_MaxThrust$
			@RS_MinThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_UpperStage_MidTech_MinThrustPercent$
			@RS_MinThrust /= 100
		}
		@SUBTYPE:HAS[~RS_MinThrust[],#RS_MaxThrust[*],#RS_EngineType[sustainer]],*
		{
			RS_MinThrust = #$RS_MaxThrust$
			@RS_MinThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Sustainer_MidTech_MinThrustPercent$
			@RS_MinThrust /= 100
		}
		@SUBTYPE:HAS[~RS_MinThrust[],#RS_MaxThrust[*],#RS_EngineType[lower_stage]],*
		{
			RS_MinThrust = #$RS_MaxThrust$
			@RS_MinThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_LowerStage_MidTech_MinThrustPercent$
			@RS_MinThrust /= 100
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineTechLevel[high],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_MinThrust[],#RS_MaxThrust[*],#RS_EngineType[OMS]],*
		{
			RS_MinThrust = #$RS_MaxThrust$
			@RS_MinThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_OMS_HighTech_MinThrustPercent$
			@RS_MinThrust /= 100
		}
		@SUBTYPE:HAS[~RS_MinThrust[],#RS_MaxThrust[*],#RS_EngineType[upper_stage]],*
		{
			RS_MinThrust = #$RS_MaxThrust$
			@RS_MinThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_UpperStage_HighTech_MinThrustPercent$
			@RS_MinThrust /= 100
		}
		@SUBTYPE:HAS[~RS_MinThrust[],#RS_MaxThrust[*],#RS_EngineType[sustainer]],*
		{
			RS_MinThrust = #$RS_MaxThrust$
			@RS_MinThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_Sustainer_HighTech_MinThrustPercent$
			@RS_MinThrust /= 100
		}
		@SUBTYPE:HAS[~RS_MinThrust[],#RS_MaxThrust[*],#RS_EngineType[lower_stage]],*
		{
			RS_MinThrust = #$RS_MaxThrust$
			@RS_MinThrust *= #$@REALISM_SIMPLIFIED/unconfiguredEngines_LowerStage_HighTech_MinThrustPercent$
			@RS_MinThrust /= 100
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_MinThrust[*],@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA]],*
		{
			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA]
			{
				@DATA
				{
					%minThrust = #$../../RS_MinThrust$
				}
			}
		}
	}
}
// Pressure-fed engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePressureFed[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EnginePressureFed[]],*
		{
			RS_EnginePressureFed = #$/MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePressureFed[*]],0/RS_EnginePressureFed$
		}
	}
}
// Ullage
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineUllage[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineUllage[]],*
		{
			RS_EngineUllage = #$/MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineUllage[*]],0/RS_EngineUllage$
		}
	}
}
// Ignitions count
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineIgnitions[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineIgnitions[]],*
		{
			RS_EngineIgnitions = #$/MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineIgnitions[*]],0/RS_EngineIgnitions$
		}
	}
}
// Rated burn time
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineRatedBurnTime[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineRatedBurnTime[]],*
		{
			RS_EngineRatedBurnTime = #$/MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EngineRatedBurnTime[*]],0/RS_EngineRatedBurnTime$
		}
	}
}
// Gimbal range
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineGimbalTransformPrimary[*],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]],@MODULE[ModuleGimbal]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineGimbalRange[*]],*
		{
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleGimbal
					gimbalTransformName = #$/RS_EngineGimbalTransformPrimary$
				}
				DATA
				{
					gimbalRange = #$../../RS_EngineGimbalRange$
				}
			}
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineGimbalRange[*],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]],@MODULE[ModuleGimbal]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineGimbalRange[*]],*
		{
			%RS_EngineGimbalRangeDiff = #$/RS_EngineGimbalRange$
			@RS_EngineGimbalRangeDiff -= #$RS_EngineGimbalRange$
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineGimbalRange[*],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]],@MODULE[ModuleGimbal]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		// Gimbal for engine variant is the same as default gimbal
		@SUBTYPE:HAS[#RS_EngineGimbalRangeDiff[0]],*
		{
			!MODULE:HAS[@IDENTIFIER[ModuleGimbal]] {}
		}
	}
}
// Second ModuleGimbal
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineGimbalRange[*],#RS_EngineGimbalTransform2[*],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]],@MODULE[ModuleGimbal]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineGimbalRange[*],@MODULE:HAS[@IDENTIFIER[ModuleGimbal]]],*
		{
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleGimbal
					gimbalTransformName = #$/RS_EngineGimbalTransform2$
				}
				DATA
				{
					gimbalRange = #$../../RS_EngineGimbalRange$
				}
			}
		}
	}
}
// Third ModuleGimbal
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineGimbalRange[*],#RS_EngineGimbalTransform3[*],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]],@MODULE[ModuleGimbal]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineGimbalRange[*],@MODULE:HAS[@IDENTIFIER[ModuleGimbal]]],*
		{
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleGimbal
					gimbalTransformName = #$/RS_EngineGimbalTransform3$
				}
				DATA
				{
					gimbalRange = #$../../RS_EngineGimbalRange$
				}
			}
		}
	}
}
// Fourth ModuleGimbal
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineGimbalRange[*],#RS_EngineGimbalTransform4[*],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]],@MODULE[ModuleGimbal]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineGimbalRange[*],@MODULE:HAS[@IDENTIFIER[ModuleGimbal]]],*
		{
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleGimbal
					gimbalTransformName = #$/RS_EngineGimbalTransform4$
				}
				DATA
				{
					gimbalRange = #$../../RS_EngineGimbalRange$
				}
			}
		}
	}
}

// Propellants
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EnginePropellants[],@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[@PROPELLANT[LqdHydrogen],@PROPELLANT[Oxidizer]]]],*
		{
			RS_EnginePropellants = HydroLOX
		}
		@SUBTYPE:HAS[~RS_EnginePropellants[],@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[@PROPELLANT[LqdMethane],@PROPELLANT[Oxidizer]]]],*
		{
			RS_EnginePropellants = MethaLOX
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[*]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EnginePropellants[]],*
		{
			RS_EnginePropellants = #$/MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#RS_EnginePropellants[*]],0/RS_EnginePropellants$
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[#RS_EnginePropellants[AlcoLOX]],*
		{
			%primaryColor = LightRose
			%secondaryColor = ResourceColorOxidizer

			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					!PROPELLANT[*],* {}

					PROPELLANT
					{
						name = Ethanol75
						ratio = #$@REALISM_SIMPLIFIED/AlcoLOX_Ethanol75_Ratio$
						DrawGauge = True
					}
					PROPELLANT
					{
						name = LqdOxygen
						ratio = #$@REALISM_SIMPLIFIED/AlcoLOX_LOX_Ratio$
						DrawGauge = False
					}
				}
			}
		}
		@SUBTYPE:HAS[#RS_EnginePropellants[KeroLOX]],*
		{
			%primaryColor = ResourceColorLiquidFuel
			%secondaryColor = ResourceColorOxidizer

			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					!PROPELLANT[*],* {}

					PROPELLANT
					{
						name = Kerosene
						ratio = #$@REALISM_SIMPLIFIED/KeroLOX_Kerosene_Ratio$
						DrawGauge = True
					}
					PROPELLANT
					{
						name = LqdOxygen
						ratio = #$@REALISM_SIMPLIFIED/KeroLOX_LOX_Ratio$
						DrawGauge = False
					}
				}
			}
		}
		@SUBTYPE:HAS[#RS_EnginePropellants[HydroLOX]],*
		{
			%primaryColor = ResourceColorLqdHydrogen
			%secondaryColor = ResourceColorOxidizer

			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					!PROPELLANT[*],* {}

					PROPELLANT
					{
						name = LqdHydrogen
						ratio = #$@REALISM_SIMPLIFIED/HydroLOX_LH2_Ratio$
						DrawGauge = True
					}
					PROPELLANT
					{
						name = LqdOxygen
						ratio = #$@REALISM_SIMPLIFIED/HydroLOX_LOX_Ratio$
						DrawGauge = False
					}
				}
			}
		}
		@SUBTYPE:HAS[#RS_EnginePropellants[MethaLOX]],*
		{
			%primaryColor = ResourceColorLqdMethane
			%secondaryColor = ResourceColorOxidizer

			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					!PROPELLANT[*],* {}

					PROPELLANT
					{
						name = LqdMethane
						ratio = #$@REALISM_SIMPLIFIED/MethaLOX_LqdMethane_Ratio$
						DrawGauge = True
					}
					PROPELLANT
					{
						name = LqdOxygen
						ratio = #$@REALISM_SIMPLIFIED/MethaLOX_LOX_Ratio$
						DrawGauge = False
					}
				}
			}
		}
		@SUBTYPE:HAS[#RS_EnginePropellants[Hypergolics]],*
		{
			%primaryColor = PoopBrown
			%secondaryColor = PukeGreen

			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					!PROPELLANT[*],* {}

					PROPELLANT
					{
						name = #$@REALISM_SIMPLIFIED/Hypergolics_Fuel$
						ratio = #$@REALISM_SIMPLIFIED/Hypergolics_Fuel_Ratio$
						DrawGauge = True
					}
					PROPELLANT
					{
						name = #$@REALISM_SIMPLIFIED/Hypergolics_Oxidizer$
						ratio = #$@REALISM_SIMPLIFIED/Hypergolics_Oxidizer_Ratio$
						DrawGauge = False
					}
				}
			}
		}
		@SUBTYPE:HAS[#RS_EnginePropellants[AvGas],~RS_EngineType[air_breathing]],*
		{
			%primaryColor = Apricot

			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					!PROPELLANT[*],* {}

					PROPELLANT
					{
						name = AvGas
						ratio = 1.0
						DrawGauge = True
					}
				}
			}
		}
		@SUBTYPE:HAS[#RS_EnginePropellants[Kerosene],~RS_EngineType[air_breathing]],*
		{
			%primaryColor = ResourceColorLiquidFuel

			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					!PROPELLANT[*],* {}

					PROPELLANT
					{
						name = Kerosene
						ratio = 1.0
						DrawGauge = True
					}
				}
			}
		}
		@SUBTYPE:HAS[#RS_EnginePropellants[LqdHydrogen],~RS_EngineType[air_breathing]],*
		{
			%primaryColor = ResourceColorLqdHydrogen

			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					!PROPELLANT[*],* {}

					PROPELLANT
					{
						name = LqdHydrogen
						ratio = 1.0
						DrawGauge = True
					}
				}
			}
		}
		@SUBTYPE:HAS[#RS_EnginePropellants[LqdMethane],~RS_EngineType[air_breathing]],*
		{
			%primaryColor = ResourceColorLqdMethane

			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					!PROPELLANT[*],* {}

					PROPELLANT
					{
						name = LqdMethane
						ratio = 1.0
						DrawGauge = True
					}
				}
			}
		}
		@SUBTYPE:HAS[#RS_EnginePropellants[MonoPropellant]],*
		{
			%primaryColor = Poo

			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					!PROPELLANT[*],* {}

					PROPELLANT
					{
						name = #$@REALISM_SIMPLIFIED/MonoPropellant$
						ratio = 1.0
						DrawGauge = True
					}
				}
			}
		}
		@SUBTYPE:HAS[#RS_EnginePropellants[LqdAmmonia]],*
		{
			%primaryColor = LightBlueGreen

			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					!PROPELLANT[*],* {}

					PROPELLANT
					{
						name = LqdAmmonia
						ratio = 1.0
						DrawGauge = True
					}
				}
			}
		}
		@SUBTYPE:HAS[#RS_EnginePropellants[AvGas],#RS_EngineType[air_breathing]],*
		{
			%primaryColor = Apricot

			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					!PROPELLANT[*],* {}

					PROPELLANT
					{
						name = AvGas
						ratio = 6.95
						DrawGauge = True
					}
				}
			}
		}
		@SUBTYPE:HAS[#RS_EnginePropellants[Kerosene],#RS_EngineType[air_breathing]],*
		{
			%primaryColor = ResourceColorLiquidFuel

			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					!PROPELLANT[*],* {}

					PROPELLANT
					{
						name = Kerosene
						ratio = 6.0
						DrawGauge = True
					}
				}
			}
		}

		@SUBTYPE:HAS[#RS_EnginePropellants[LqdHydrogen],#RS_EngineType[air_breathing]],*
		{
			%primaryColor = ResourceColorLqdHydrogen

			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					!PROPELLANT[*],* {}

					PROPELLANT
					{
						name = LqdHydrogen
						ratio = 70.5
						DrawGauge = True
					}
				}
			}
		}
		@SUBTYPE:HAS[#RS_EnginePropellants[LqdMethane],#RS_EngineType[air_breathing]],*
		{
			%primaryColor = ResourceColorLqdMethane

			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					!PROPELLANT[*],* {}

					PROPELLANT
					{
						name = LqdMethane
						ratio = 11.7
						DrawGauge = True
					}
				}
			}
		}
		@SUBTYPE:HAS[#RS_EnginePropellants[Xenon]],*
		{
			%primaryColor = ResourceColorXenonGas

			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					!PROPELLANT[*],* {}

					PROPELLANT
					{
						name = XenonGas
						ratio = 1.0
						DrawGauge = True
					}
				}
			}
		}
		@SUBTYPE:HAS[#RS_EnginePropellants[Argon]],*
		{
			%primaryColor = BloodOrange

			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					!PROPELLANT[*],* {}

					PROPELLANT
					{
						name = ArgonGas
						ratio = 1.0
						DrawGauge = True
					}
				}
			}
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],@PROPELLANT[IntakeAir]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[air_breathing]],*
		{
			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA:HAS[!PROPELLANT[IntakeAir]]
				{
					#@/MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],@PROPELLANT[IntakeAir]],0/PROPELLANT[IntakeAir] { }
				}
			}
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],@PROPELLANT[IntakeAtm]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[air_breathing]],*
		{
			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA:HAS[!PROPELLANT[IntakeAtm]]
				{
					#@/MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],@PROPELLANT[IntakeAtm]],0/PROPELLANT[IntakeAtm] { }
				}
			}
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],@PROPELLANT[ElectricCharge]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[electric]],*
		{
			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA:HAS[!PROPELLANT[ElectricCharge]]
				{
					#@/MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],@PROPELLANT[ElectricCharge]],0/PROPELLANT[ElectricCharge] { }
				}
			}
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]],~RS_AlcoLOX_Engines[*rue]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[#RS_EnginePropellants[AlcoLOX]],*
		{
			@RS_EnginePropellants = KeroLOX
			@primaryColor = ResourceColorLiquidFuel

			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					@PROPELLANT[Ethanol75]
					{
						@name = Kerosene
						@ratio = #$@REALISM_SIMPLIFIED/KeroLOX_Kerosene_Ratio$
					}
					@PROPELLANT[LqdOxygen]
					{
						@ratio = #$@REALISM_SIMPLIFIED/KeroLOX_LOX_Ratio$
					}
				}
			}
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]],~RS_AvGas_Engines[*rue]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[#RS_EnginePropellants[AvGas]],*
		{
			@RS_EnginePropellants = Kerosene
			@primaryColor = ResourceColorLiquidFuel

			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					@PROPELLANT[AvGas]
					{
						@name = Kerosene
						@ratio = 6.0
					}
				}
			}
		}
	}
}
// Pressure-fed B9PS variants
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EnginePropellants[*],#RS_EnginePressureFed[*rue]],*
		{
			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					PROPELLANT
					{
						name = #$@REALISM_SIMPLIFIED/pressurizationGas$
						ratio = #$@REALISM_SIMPLIFIED/pressurizationGas_Ratio$
						DrawGauge = False
					}
				}
			}
		}
	}
}

// Clusters
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_ClusterEnginesCount[*]],*
		{
			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					@minThrust *= #$../../RS_ClusterEnginesCount$
					@maxThrust *= #$../../RS_ClusterEnginesCount$
				}
			}
		}
		@SUBTYPE:HAS[#RS_EngineDefaultVariant[*rue],#RS_MaxThrust[>0],#RS_ClusterEnginesCount[*]],*
		{
			@RS_MaxThrust *= #$RS_ClusterEnginesCount$
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_ClusterEnginesCount[*],#RS_EngineDryMass[*]],*
		{
			@RS_EngineDryMass *= #$RS_ClusterEnginesCount$
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[#RS_ClusterEnginesCount[*],#RS_EngineCost[*]],*
		{
			@RS_EngineCost *= #$RS_ClusterEnginesCount$
		}
		@SUBTYPE:HAS[#RS_ClusterEnginesCount[*],#RS_EngineDryCost[*]],*
		{
			@RS_EngineDryCost *= #$RS_ClusterEnginesCount$
		}
	}
}

// Thrust, cost and mass coeffs for engines variants
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[SRB]],*
		{
			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					@minThrust *= #$@REALISM_SIMPLIFIED/SRB_ThrustCoeff$
					@maxThrust *= #$@REALISM_SIMPLIFIED/SRB_ThrustCoeff$
				}
			}
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[nuclear]],*
		{
			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					@minThrust *= #$@REALISM_SIMPLIFIED/nuclearEngines_ThrustCoeff$
					@maxThrust *= #$@REALISM_SIMPLIFIED/nuclearEngines_ThrustCoeff$
				}
			}
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[electric]],*
		{
			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					@minThrust *= #$@REALISM_SIMPLIFIED/electricEngines_ThrustCoeff$
					@maxThrust *= #$@REALISM_SIMPLIFIED/electricEngines_ThrustCoeff$
					@PROPELLANT[ElectricCharge]
					{
						@ratio *= #$@REALISM_SIMPLIFIED/electricEngines_ECConsumptionCoeff$
						@ratio /= #$@REALISM_SIMPLIFIED/electricEngines_ThrustCoeff$
					}
				}
			}
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[liquidFuel]],*
		{
			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					@minThrust *= #$@REALISM_SIMPLIFIED/LFEngines_ThrustCoeff$
					@maxThrust *= #$@REALISM_SIMPLIFIED/LFEngines_ThrustCoeff$
				}
			}
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[lower_stage]],*
		{
			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					@minThrust *= #$@REALISM_SIMPLIFIED/LFEngines_ThrustCoeff$
					@minThrust *= #$@REALISM_SIMPLIFIED/lowerStageEngines_ThrustCoeff$
					@maxThrust *= #$@REALISM_SIMPLIFIED/LFEngines_ThrustCoeff$
					@maxThrust *= #$@REALISM_SIMPLIFIED/lowerStageEngines_ThrustCoeff$
				}
			}
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[sustainer]],*
		{
			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					@minThrust *= #$@REALISM_SIMPLIFIED/LFEngines_ThrustCoeff$
					@minThrust *= #$@REALISM_SIMPLIFIED/sustainerEngines_ThrustCoeff$
					@maxThrust *= #$@REALISM_SIMPLIFIED/LFEngines_ThrustCoeff$
					@maxThrust *= #$@REALISM_SIMPLIFIED/sustainerEngines_ThrustCoeff$
				}
			}
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[upper_stage]],*
		{
			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					@minThrust *= #$@REALISM_SIMPLIFIED/LFEngines_ThrustCoeff$
					@minThrust *= #$@REALISM_SIMPLIFIED/upperStageEngines_ThrustCoeff$
					@maxThrust *= #$@REALISM_SIMPLIFIED/LFEngines_ThrustCoeff$
					@maxThrust *= #$@REALISM_SIMPLIFIED/upperStageEngines_ThrustCoeff$
				}
			}
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[OMS]],*
		{
			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					@minThrust *= #$@REALISM_SIMPLIFIED/LFEngines_ThrustCoeff$
					@minThrust *= #$@REALISM_SIMPLIFIED/OMSEngines_ThrustCoeff$
					@maxThrust *= #$@REALISM_SIMPLIFIED/LFEngines_ThrustCoeff$
					@maxThrust *= #$@REALISM_SIMPLIFIED/OMSEngines_ThrustCoeff$
				}
			}
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[SRB],#RS_EngineDryMass[*]],*
		{
			@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/SRB_MassCoeff$
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[nuclear],#RS_EngineDryMass[*]],*
		{
			@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/nuclearEngines_MassCoeff$
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[electric],#RS_EngineDryMass[*]],*
		{
			@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/electricEngines_MassCoeff$
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[liquidFuel],#RS_EngineDryMass[*]],*
		{
			@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/LFEngines_MassCoeff$
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[lower_stage],#RS_EngineDryMass[*]],*
		{
			@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/LFEngines_MassCoeff$
			@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/lowerStageEngines_MassCoeff$
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[sustainer],#RS_EngineDryMass[*]],*
		{
			@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/LFEngines_MassCoeff$
			@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/sustainerEngines_MassCoeff$
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[upper_stage],#RS_EngineDryMass[*]],*
		{
			@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/LFEngines_MassCoeff$
			@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/upperStageEngines_MassCoeff$
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[OMS],#RS_EngineDryMass[*]],*
		{
			@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/LFEngines_MassCoeff$
			@RS_EngineDryMass *= #$@REALISM_SIMPLIFIED/OMSEngines_MassCoeff$
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[SRB],#RS_EngineCost[*]],*
		{
			@RS_EngineCost *= #$@REALISM_SIMPLIFIED/SRB_CostCoeff$
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[SRB],#RS_EngineDryCost[*]],*
		{
			@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/SRB_CostCoeff$
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[nuclear],#RS_EngineCost[*]],*
		{
			@RS_EngineCost *= #$@REALISM_SIMPLIFIED/nuclearEngines_CostCoeff$
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[nuclear],#RS_EngineDryCost[*]],*
		{
			@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/nuclearEngines_CostCoeff$
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[electric],#RS_EngineCost[*]],*
		{
			@RS_EngineCost *= #$@REALISM_SIMPLIFIED/electricEngines_CostCoeff$
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[electric],#RS_EngineDryCost[*]],*
		{
			@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/electricEngines_CostCoeff$
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[liquidFuel],#RS_EngineCost[*]],*
		{
			@RS_EngineCost *= #$@REALISM_SIMPLIFIED/LFEngines_CostCoeff$
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[liquidFuel],#RS_EngineDryCost[*]],*
		{
			@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/LFEngines_CostCoeff$
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[lower_stage],#RS_EngineCost[*]],*
		{
			@RS_EngineCost *= #$@REALISM_SIMPLIFIED/LFEngines_CostCoeff$
			@RS_EngineCost *= #$@REALISM_SIMPLIFIED/lowerStageEngines_CostCoeff$
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[lower_stage],#RS_EngineDryCost[*]],*
		{
			@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/LFEngines_CostCoeff$
			@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/lowerStageEngines_CostCoeff$
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[sustainer],#RS_EngineCost[*]],*
		{
			@RS_EngineCost *= #$@REALISM_SIMPLIFIED/LFEngines_CostCoeff$
			@RS_EngineCost *= #$@REALISM_SIMPLIFIED/sustainerEngines_CostCoeff$
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[sustainer],#RS_EngineDryCost[*]],*
		{
			@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/LFEngines_CostCoeff$
			@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/sustainerEngines_CostCoeff$
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[upper_stage],#RS_EngineCost[*]],*
		{
			@RS_EngineCost *= #$@REALISM_SIMPLIFIED/LFEngines_CostCoeff$
			@RS_EngineCost *= #$@REALISM_SIMPLIFIED/upperStageEngines_CostCoeff$
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[upper_stage],#RS_EngineDryCost[*]],*
		{
			@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/LFEngines_CostCoeff$
			@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/upperStageEngines_CostCoeff$
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[OMS],#RS_EngineCost[*]],*
		{
			@RS_EngineCost *= #$@REALISM_SIMPLIFIED/LFEngines_CostCoeff$
			@RS_EngineCost *= #$@REALISM_SIMPLIFIED/OMSEngines_CostCoeff$
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[OMS],#RS_EngineDryCost[*]],*
		{
			@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/LFEngines_CostCoeff$
			@RS_EngineDryCost *= #$@REALISM_SIMPLIFIED/OMSEngines_CostCoeff$
		}
	}
}

// Min thrust to zero for lower stage, upper stage and sustainer engines, if RS_SimpleLFEngines setting is active
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_SimpleLFEngines[*rue],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[liquidFuel]],*
		{
			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					@minThrust = 0
				}
			}
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[lower_stage]],*
		{
			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					@minThrust = 0
				}
			}
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[sustainer]],*
		{
			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					@minThrust = 0
				}
			}
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[upper_stage]],*
		{
			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					@minThrust = 0
				}
			}
		}
	}
}

// Min thrust to zero for OMS engines, if RS_SimpleOMSEngines setting is active
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_SimpleOMSEngines[*rue],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[OMS]],*
		{
			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX]]
			{
				@DATA
				{
					@minThrust = 0
				}
			}
		}
	}
}

// addedMass and addedCost should be relative
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineDryMass[*]],*
		{
			%addedMass = #$RS_EngineDryMass$
			@addedMass -= #$/mass$
		}
		@SUBTYPE:HAS[#RS_EngineDryCost[*]],*
		{
			%addedCost = #$RS_EngineDryCost$
			@addedCost -= #$/cost$
		}
	}
}

// SRB with B9PS variants - solid fuel amount should also be switchable
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]],@RESOURCE[SolidFuel],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[SRB],~RS_IgnoreEngine[]]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_BaseSolidFuelAmount = #$RESOURCE[SolidFuel]/amount$
	!RESOURCE[SolidFuel] {}

	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		%baseVolume = #$../RS_BaseSolidFuelAmount$

		@SUBTYPE:HAS[#RS_EngineType[SRB],#RS_SolidFuelMass[>0]],*
		{
			%volumeAdded = #$RS_SolidFuelMass$
			@volumeAdded /= #$@RESOURCE_DEFINITION[SolidFuel]/density$
			@volumeAdded *= #$@REALISM_SIMPLIFIED/SRB_SolidFuelAmountCoeff$
			@volumeAdded -= #$../baseVolume$
			RESOURCE
			{
				name = SolidFuel
				unitsPerVolume = 1
			}
		}
	}
}


// ================================================================
// Ignitions and reliability params
// ================================================================

// Kerbalism
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineIgnitions[*],#RS_EngineRatedBurnTime[*],@MODULE[ModuleEngines*]]:NEEDS[Kerbalism,FeatureReliability,!PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	!MODULE[Reliability]:HAS[#type[ModuleEngines*]],* {}

	%RS_EngineKerbalismReliability = true

	MODULE
	{
		name = Reliability
		type = ModuleEnginesFX
		title = Engine
		redundancy = Propulsion
		repair = Engineer
		mtbf = 0
		extra_cost = #$@REALISM_SIMPLIFIED/kerbalism_Engines_HighQuality_AddedCostCoeff$
		extra_mass = #$@REALISM_SIMPLIFIED/kerbalism_Engines_HighQuality_AddedMassCoeff$
		turnon_failure_probability = #$@REALISM_SIMPLIFIED/kerbalism_Engines_BaseTurnOnFailureProbability$
		rated_operation_duration = #$/RS_EngineRatedBurnTime$
		rated_ignitions = #$/RS_EngineIgnitions$
	}
}
// Kerbalism has it's own understanding for engine ignitions amount. "0" means infinite ignitions
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineKerbalismReliability[true],@MODULE[Reliability]:HAS[#type[ModuleEnginesFX],#rated_ignitions[0]]]:NEEDS[Kerbalism,FeatureReliability,!PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[Reliability]:HAS[#type[ModuleEnginesFX],#rated_ignitions[0]]
	{
		@rated_ignitions = 1
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineKerbalismReliability[true],@MODULE[Reliability]:HAS[#type[ModuleEnginesFX],#rated_ignitions[-1]]]:NEEDS[Kerbalism,FeatureReliability,!PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[Reliability]:HAS[#type[ModuleEnginesFX],#rated_ignitions[-1]]
	{
		@rated_ignitions = 0
	}
}
// Kerbalism rated burn time coeff
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineKerbalismReliability[true],@MODULE[Reliability]:HAS[#type[ModuleEnginesFX],#rated_operation_duration[*]]]:NEEDS[Kerbalism,FeatureReliability,!PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[Reliability]:HAS[#type[ModuleEnginesFX],#rated_operation_duration[*]]
	{
		@rated_operation_duration *= #$@REALISM_SIMPLIFIED/kerbalism_Engines_RatedBurnTime_Coeff$
	}
}
// Air-breathing engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineKerbalismReliability[true],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[air_breathing]],@MODULE[Reliability]:HAS[#type[ModuleEnginesFX]]]:NEEDS[Kerbalism,FeatureReliability,!PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[Reliability]:HAS[#type[ModuleEnginesFX]]
	{
		@extra_cost *= #$@REALISM_SIMPLIFIED/kerbalism_AirBreathingEngines_HighQuality_AddedCostCoeff$
		@extra_mass *= #$@REALISM_SIMPLIFIED/kerbalism_AirBreathingEngines_HighQuality_AddedMassCoeff$
		@turnon_failure_probability *= #$@REALISM_SIMPLIFIED/kerbalism_AirBreathingEngines_TurnOnFailureProbability_Coeff$
	}
}
// Lower stage engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineKerbalismReliability[true],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[lower_stage]],@MODULE[Reliability]:HAS[#type[ModuleEnginesFX]]]:NEEDS[Kerbalism,FeatureReliability,!PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[Reliability]:HAS[#type[ModuleEnginesFX]]
	{
		@extra_cost *= #$@REALISM_SIMPLIFIED/kerbalism_LowerStageEngines_HighQuality_AddedCostCoeff$
		@extra_mass *= #$@REALISM_SIMPLIFIED/kerbalism_LowerStageEngines_HighQuality_AddedMassCoeff$
		@turnon_failure_probability *= #$@REALISM_SIMPLIFIED/kerbalism_LowerStageEngines_TurnOnFailureProbability_Coeff$
	}
}
// Upper stage engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineKerbalismReliability[true],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[upper_stage]],@MODULE[Reliability]:HAS[#type[ModuleEnginesFX]]]:NEEDS[Kerbalism,FeatureReliability,!PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[Reliability]:HAS[#type[ModuleEnginesFX]]
	{
		@extra_cost *= #$@REALISM_SIMPLIFIED/kerbalism_UpperStageEngines_HighQuality_AddedCostCoeff$
		@extra_mass *= #$@REALISM_SIMPLIFIED/kerbalism_UpperStageEngines_HighQuality_AddedMassCoeff$
		@turnon_failure_probability *= #$@REALISM_SIMPLIFIED/kerbalism_UpperStageEngines_TurnOnFailureProbability_Coeff$
	}
}
// Sustainer engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineKerbalismReliability[true],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[sustainer]],@MODULE[Reliability]:HAS[#type[ModuleEnginesFX]]]:NEEDS[Kerbalism,FeatureReliability,!PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[Reliability]:HAS[#type[ModuleEnginesFX]]
	{
		@extra_cost *= #$@REALISM_SIMPLIFIED/kerbalism_SustainerEngines_HighQuality_AddedCostCoeff$
		@extra_mass *= #$@REALISM_SIMPLIFIED/kerbalism_SustainerEngines_HighQuality_AddedMassCoeff$
		@turnon_failure_probability *= #$@REALISM_SIMPLIFIED/kerbalism_SustainerEngines_TurnOnFailureProbability_Coeff$
	}
}
// OMS engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineKerbalismReliability[true],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[OMS]],@MODULE[Reliability]:HAS[#type[ModuleEnginesFX]]]:NEEDS[Kerbalism,FeatureReliability,!PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[Reliability]:HAS[#type[ModuleEnginesFX]]
	{
		@extra_cost *= #$@REALISM_SIMPLIFIED/kerbalism_OMSEngines_HighQuality_AddedCostCoeff$
		@extra_mass *= #$@REALISM_SIMPLIFIED/kerbalism_OMSEngines_HighQuality_AddedMassCoeff$
		@turnon_failure_probability *= #$@REALISM_SIMPLIFIED/kerbalism_OMSEngines_TurnOnFailureProbability_Coeff$
	}
}
// SRBs
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineKerbalismReliability[true],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[SRB]],@MODULE[Reliability]:HAS[#type[ModuleEnginesFX]]]:NEEDS[Kerbalism,FeatureReliability,!PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[Reliability]:HAS[#type[ModuleEnginesFX]]
	{
		%rated_operation_duration = 0
		%rated_ignitions = 0
		@extra_cost *= #$@REALISM_SIMPLIFIED/kerbalism_SRB_HighQuality_AddedCostCoeff$
		@extra_mass *= #$@REALISM_SIMPLIFIED/kerbalism_SRB_HighQuality_AddedMassCoeff$
		@turnon_failure_probability *= #$@REALISM_SIMPLIFIED/kerbalism_SRB_TurnOnFailureProbability_Coeff$
	}
}
// Nuclear engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineKerbalismReliability[true],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[nuclear]],@MODULE[Reliability]:HAS[#type[ModuleEnginesFX]]]:NEEDS[Kerbalism,FeatureReliability,!PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[Reliability]:HAS[#type[ModuleEnginesFX]]
	{
		@extra_cost *= #$@REALISM_SIMPLIFIED/kerbalism_NuclearEngines_HighQuality_AddedCostCoeff$
		@extra_mass *= #$@REALISM_SIMPLIFIED/kerbalism_NuclearEngines_HighQuality_AddedMassCoeff$
		@turnon_failure_probability *= #$@REALISM_SIMPLIFIED/kerbalism_NuclearEngines_TurnOnFailureProbability_Coeff$
	}
}
// Electric engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineKerbalismReliability[true],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[electric]],@MODULE[Reliability]:HAS[#type[ModuleEnginesFX]]]:NEEDS[Kerbalism,FeatureReliability,!PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[Reliability]:HAS[#type[ModuleEnginesFX]]
	{
		@extra_cost *= #$@REALISM_SIMPLIFIED/kerbalism_ElectricEngines_HighQuality_AddedCostCoeff$
		@extra_mass *= #$@REALISM_SIMPLIFIED/kerbalism_ElectricEngines_HighQuality_AddedMassCoeff$
		@turnon_failure_probability *= #$@REALISM_SIMPLIFIED/kerbalism_ElectricEngines_TurnOnFailureProbability_Coeff$
	}
}
// Pressure-fed engines
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineKerbalismReliability[true],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EnginePressureFed[*rue]],@MODULE[Reliability]:HAS[#type[ModuleEnginesFX]]]:NEEDS[Kerbalism,FeatureReliability,!PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[Reliability]:HAS[#type[ModuleEnginesFX]]
	{
		@extra_cost *= #$@REALISM_SIMPLIFIED/kerbalism_PressureFedEngines_HighQuality_AddedCostCoeff$
		@extra_mass *= #$@REALISM_SIMPLIFIED/kerbalism_PressureFedEngines_HighQuality_AddedMassCoeff$
		@turnon_failure_probability *= #$@REALISM_SIMPLIFIED/kerbalism_PressureFedEngines_TurnOnFailureProbability_Coeff$
	}
}
// B9PS variants
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineKerbalismReliability[true],@MODULE[Reliability]:HAS[#type[ModuleEnginesFX]],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:NEEDS[Kerbalism,FeatureReliability,!PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineIgnitions[>0],#RS_EngineRatedBurnTime[*]],*
		{
			MODULE
			{
				IDENTIFIER
				{
					name = Reliability
					type = ModuleEnginesFX
				}
				DATA
				{
					extra_cost = #$@REALISM_SIMPLIFIED/kerbalism_Engines_HighQuality_AddedCostCoeff$
					extra_mass = #$@REALISM_SIMPLIFIED/kerbalism_Engines_HighQuality_AddedMassCoeff$
					turnon_failure_probability = #$@REALISM_SIMPLIFIED/kerbalism_Engines_BaseTurnOnFailureProbability$
					rated_operation_duration = #$../../RS_EngineRatedBurnTime$
					rated_ignitions = #$../../RS_EngineIgnitions$
				}
			}
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineIgnitions[0],#RS_EngineRatedBurnTime[*]],*
		{
			MODULE
			{
				IDENTIFIER
				{
					name = Reliability
					type = ModuleEnginesFX
				}
				DATA
				{
					extra_cost = #$@REALISM_SIMPLIFIED/kerbalism_Engines_HighQuality_AddedCostCoeff$
					extra_mass = #$@REALISM_SIMPLIFIED/kerbalism_Engines_HighQuality_AddedMassCoeff$
					turnon_failure_probability = #$@REALISM_SIMPLIFIED/kerbalism_Engines_BaseTurnOnFailureProbability$
					rated_operation_duration = #$../../RS_EngineRatedBurnTime$
					rated_ignitions = 1
				}
			}
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineIgnitions[-1],#RS_EngineRatedBurnTime[*]],*
		{
			MODULE
			{
				IDENTIFIER
				{
					name = Reliability
					type = ModuleEnginesFX
				}
				DATA
				{
					extra_cost = #$@REALISM_SIMPLIFIED/kerbalism_Engines_HighQuality_AddedCostCoeff$
					extra_mass = #$@REALISM_SIMPLIFIED/kerbalism_Engines_HighQuality_AddedMassCoeff$
					turnon_failure_probability = #$@REALISM_SIMPLIFIED/kerbalism_Engines_BaseTurnOnFailureProbability$
					rated_operation_duration = #$../../RS_EngineRatedBurnTime$
					rated_ignitions = 0
				}
			}
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineKerbalismReliability[true],@MODULE[Reliability]:HAS[#type[ModuleEnginesFX]],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:NEEDS[Kerbalism,FeatureReliability,!PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineRatedBurnTime[*]],*
		{
			@MODULE:HAS[@IDENTIFIER[Reliability],@DATA]
			{
				@DATA
				{
					@rated_operation_duration *= #$@REALISM_SIMPLIFIED/kerbalism_Engines_RatedBurnTime_Coeff$
				}
			}
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineKerbalismReliability[true],@MODULE[Reliability]:HAS[#type[ModuleEnginesFX]],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:NEEDS[Kerbalism,FeatureReliability,!PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[air_breathing]],*
		{
			@MODULE:HAS[@IDENTIFIER[Reliability],@DATA]
			{
				@DATA
				{
					@extra_cost *= #$@REALISM_SIMPLIFIED/kerbalism_AirBreathingEngines_HighQuality_AddedCostCoeff$
					@extra_mass *= #$@REALISM_SIMPLIFIED/kerbalism_AirBreathingEngines_HighQuality_AddedMassCoeff$
					@turnon_failure_probability *= #$@REALISM_SIMPLIFIED/kerbalism_AirBreathingEngines_TurnOnFailureProbability_Coeff$
				}
			}
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[lower_stage],@DATA],*
		{
			@MODULE:HAS[@IDENTIFIER[Reliability]]
			{
				@DATA
				{
					@extra_cost *= #$@REALISM_SIMPLIFIED/kerbalism_LowerStageEngines_HighQuality_AddedCostCoeff$
					@extra_mass *= #$@REALISM_SIMPLIFIED/kerbalism_LowerStageEngines_HighQuality_AddedMassCoeff$
					@turnon_failure_probability *= #$@REALISM_SIMPLIFIED/kerbalism_LowerStageEngines_TurnOnFailureProbability_Coeff$
				}
			}
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[upper_stage]],*
		{
			@MODULE:HAS[@IDENTIFIER[Reliability],@DATA]
			{
				@DATA
				{
					@extra_cost *= #$@REALISM_SIMPLIFIED/kerbalism_UpperStageEngines_HighQuality_AddedCostCoeff$
					@extra_mass *= #$@REALISM_SIMPLIFIED/kerbalism_UpperStageEngines_HighQuality_AddedMassCoeff$
					@turnon_failure_probability *= #$@REALISM_SIMPLIFIED/kerbalism_UpperStageEngines_TurnOnFailureProbability_Coeff$
				}
			}
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[sustainer]],*
		{
			@MODULE:HAS[@IDENTIFIER[Reliability],@DATA]
			{
				@DATA
				{
					@extra_cost *= #$@REALISM_SIMPLIFIED/kerbalism_SustainerEngines_HighQuality_AddedCostCoeff$
					@extra_mass *= #$@REALISM_SIMPLIFIED/kerbalism_SustainerEngines_HighQuality_AddedMassCoeff$
					@turnon_failure_probability *= #$@REALISM_SIMPLIFIED/kerbalism_SustainerEngines_TurnOnFailureProbability_Coeff$
				}
			}
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[OMS]],*
		{
			@MODULE:HAS[@IDENTIFIER[Reliability],@DATA]
			{
				@DATA
				{
					@extra_cost *= #$@REALISM_SIMPLIFIED/kerbalism_OMSEngines_HighQuality_AddedCostCoeff$
					@extra_mass *= #$@REALISM_SIMPLIFIED/kerbalism_OMSEngines_HighQuality_AddedMassCoeff$
					@turnon_failure_probability *= #$@REALISM_SIMPLIFIED/kerbalism_OMSEngines_TurnOnFailureProbability_Coeff$
				}
			}
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[SRB]],*
		{
			@MODULE:HAS[@IDENTIFIER[Reliability],@DATA]
			{
				@DATA
				{
					@rated_operation_duration = 0
					@rated_ignitions = 0
					@extra_cost *= #$@REALISM_SIMPLIFIED/kerbalism_SRB_HighQuality_AddedCostCoeff$
					@extra_mass *= #$@REALISM_SIMPLIFIED/kerbalism_SRB_HighQuality_AddedMassCoeff$
					@turnon_failure_probability *= #$@REALISM_SIMPLIFIED/kerbalism_SRB_TurnOnFailureProbability_Coeff$
				}
			}
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[nuclear]],*
		{
			@MODULE:HAS[@IDENTIFIER[Reliability],@DATA]
			{
				@DATA
				{
					@extra_cost *= #$@REALISM_SIMPLIFIED/kerbalism_NuclearEngines_HighQuality_AddedCostCoeff$
					@extra_mass *= #$@REALISM_SIMPLIFIED/kerbalism_NuclearEngines_HighQuality_AddedMassCoeff$
					@turnon_failure_probability *= #$@REALISM_SIMPLIFIED/kerbalism_NuclearEngines_TurnOnFailureProbability_Coeff$
				}
			}
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineType[electric]],*
		{
			@MODULE:HAS[@IDENTIFIER[Reliability],@DATA]
			{
				@DATA
				{
					@extra_cost *= #$@REALISM_SIMPLIFIED/kerbalism_ElectricEngines_HighQuality_AddedCostCoeff$
					@extra_mass *= #$@REALISM_SIMPLIFIED/kerbalism_ElectricEngines_HighQuality_AddedMassCoeff$
					@turnon_failure_probability *= #$@REALISM_SIMPLIFIED/kerbalism_ElectricEngines_TurnOnFailureProbability_Coeff$
				}
			}
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineKerbalismReliability[true],@MODULE[Reliability]:HAS[#type[ModuleEnginesFX]],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:NEEDS[Kerbalism,FeatureReliability,!PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EnginePressureFed[*rue]],*
		{
			@MODULE:HAS[@IDENTIFIER[Reliability],@DATA]
			{
				@DATA
				{
					@extra_cost *= #$@REALISM_SIMPLIFIED/kerbalism_PressureFedEngines_HighQuality_AddedCostCoeff$
					@extra_mass *= #$@REALISM_SIMPLIFIED/kerbalism_PressureFedEngines_HighQuality_AddedMassCoeff$
					@turnon_failure_probability *= #$@REALISM_SIMPLIFIED/kerbalism_PressureFedEngines_TurnOnFailureProbability_Coeff$
				}
			}
		}
	}
}

// Engine ignitor
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineIgnitions[*],#RS_EngineUllage[*],@MODULE[ModuleEngines*]]:NEEDS[EngineIgnitor]:FOR[zzzzRealismSimplifiedEngines]
{
	!MODULE[ModuleEngineIgnitor],* {}
	MODULE
	{
		name = ModuleEngineIgnitor
		IgnitionsAvailable = #$/RS_EngineIgnitions$
		AutoIgnitionTemperature = #$@REALISM_SIMPLIFIED/engineIgnitor_AutoIgnitionTemperature$
		IgnitorType = Internal
		UseUllageSimulation = #$/RS_EngineUllage$
		ChanceWhenUnstable = #$@REALISM_SIMPLIFIED/engineIgnitor_IgnitionChanceWhenUnstable$
		ECforIgnition = 0
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngineIgnitor],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:NEEDS[EngineIgnitor]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],#RS_EngineIgnitions[*],#RS_EngineUllage[*]],*
		{
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleEngineIgnitor
					IgnitorType = Internal
				}
				DATA
				{
					IgnitionsAvailable = #$../../RS_EngineIgnitions$
					UseUllageSimulation = #$../../RS_EngineUllage$
				}
			}
		}
	}
}

// Engine ignitor + Kerbalism
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineKerbalismReliability[true],@MODULE[ModuleEngineIgnitor],@MODULE[Reliability]:HAS[#type[ModuleEnginesFX]]]:NEEDS[Kerbalism,FeatureReliability,EngineIgnitor,!PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[Reliability]:HAS[#type[ModuleEnginesFX]]
	{
		@rated_ignitions = 0
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineKerbalismReliability[true],@MODULE[ModuleEngineIgnitor],@MODULE[Reliability]:HAS[#type[ModuleEnginesFX]],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:NEEDS[Kerbalism,FeatureReliability,EngineIgnitor,!PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE,*
		{
			@MODULE:HAS[~RS_EngineDefaultVariant[],@IDENTIFIER[Reliability],@DATA]
			{
				@DATA
				{
					@rated_ignitions = 0
				}
			}
		}
	}
}

// PayToPlay
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineIgnitions[*],#RS_EngineRatedBurnTime[*],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[lower_stage],~RS_IgnoreEngine[]]]:NEEDS[PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	!MODULE[EngineDecay],* {}
	MODULE
	{
		name = EngineDecay
		topBaseRatedTime = #$/RS_EngineRatedBurnTime$
		@topBaseRatedTime *= #$@REALISM_SIMPLIFIED/payToPlay_LowerStageEngines_topBaseRatedTime_Coeff$
		topMaxRatedTime = #$/RS_EngineRatedBurnTime$
		@topMaxRatedTime *= #$@REALISM_SIMPLIFIED/payToPlay_LowerStageEngines_topMaxRatedTime_Coeff$
		maintenanceAtRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_LowerStageEngines_maintenanceAtRatedTimeCoeff$
		maxMassRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_LowerStageEngines_maxMassRatedTimeCoeff$
		maxCostRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_LowerStageEngines_maxCostRatedTimeCoeff$
		baseIgnitions = #$/RS_EngineIgnitions$
		maxIgnitions = #$/RS_EngineIgnitions$
		@maxIgnitions *= #$@REALISM_SIMPLIFIED/payToPlay_LowerStageEngines_maxIgnitions_Multiplier$
		maxMassIgnitionsCoeff = #$@REALISM_SIMPLIFIED/payToPlay_LowerStageEngines_maxMassIgnitionsCoeff$
		maxCostIgnitionsCoeff = #$@REALISM_SIMPLIFIED/payToPlay_LowerStageEngines_maxCostIgnitionsCoeff$
		maxIgnitionRestoreCostCoeff = #$@REALISM_SIMPLIFIED/payToPlay_LowerStageEngines_maxIgnitionRestoreCostCoeff$
		maxFailureFixCostCoeff = #$@REALISM_SIMPLIFIED/payToPlay_LowerStageEngines_maxFailureFixCostCoeff$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineIgnitions[*],#RS_EngineRatedBurnTime[*],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[upper_stage],~RS_IgnoreEngine[]]]:NEEDS[PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	!MODULE[EngineDecay],* {}
	MODULE
	{
		name = EngineDecay
		topBaseRatedTime = #$/RS_EngineRatedBurnTime$
		@topBaseRatedTime *= #$@REALISM_SIMPLIFIED/payToPlay_UpperStageEngines_topBaseRatedTime_Coeff$
		topMaxRatedTime = #$/RS_EngineRatedBurnTime$
		@topMaxRatedTime *= #$@REALISM_SIMPLIFIED/payToPlay_UpperStageEngines_topMaxRatedTime_Coeff$
		maintenanceAtRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_UpperStageEngines_maintenanceAtRatedTimeCoeff$
		maxMassRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_UpperStageEngines_maxMassRatedTimeCoeff$
		maxCostRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_UpperStageEngines_maxCostRatedTimeCoeff$
		baseIgnitions = #$/RS_EngineIgnitions$
		maxIgnitions = #$/RS_EngineIgnitions$
		@maxIgnitions *= #$@REALISM_SIMPLIFIED/payToPlay_UpperStageEngines_maxIgnitions_Multiplier$
		maxMassIgnitionsCoeff = #$@REALISM_SIMPLIFIED/payToPlay_UpperStageEngines_maxMassIgnitionsCoeff$
		maxCostIgnitionsCoeff = #$@REALISM_SIMPLIFIED/payToPlay_UpperStageEngines_maxCostIgnitionsCoeff$
		maxIgnitionRestoreCostCoeff = #$@REALISM_SIMPLIFIED/payToPlay_UpperStageEngines_maxIgnitionRestoreCostCoeff$
		maxFailureFixCostCoeff = #$@REALISM_SIMPLIFIED/payToPlay_UpperStageEngines_maxFailureFixCostCoeff$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineIgnitions[*],#RS_EngineRatedBurnTime[*],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[sustainer],~RS_IgnoreEngine[]]]:NEEDS[PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	!MODULE[EngineDecay],* {}
	MODULE
	{
		name = EngineDecay
		topBaseRatedTime = #$/RS_EngineRatedBurnTime$
		@topBaseRatedTime *= #$@REALISM_SIMPLIFIED/payToPlay_SustainerEngines_topBaseRatedTime_Coeff$
		topMaxRatedTime = #$/RS_EngineRatedBurnTime$
		@topMaxRatedTime *= #$@REALISM_SIMPLIFIED/payToPlay_SustainerEngines_topMaxRatedTime_Coeff$
		maintenanceAtRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_SustainerEngines_maintenanceAtRatedTimeCoeff$
		maxMassRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_SustainerEngines_maxMassRatedTimeCoeff$
		maxCostRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_SustainerEngines_maxCostRatedTimeCoeff$
		baseIgnitions = #$/RS_EngineIgnitions$
		maxIgnitions = #$/RS_EngineIgnitions$
		@maxIgnitions *= #$@REALISM_SIMPLIFIED/payToPlay_SustainerEngines_maxIgnitions_Multiplier$
		maxMassIgnitionsCoeff = #$@REALISM_SIMPLIFIED/payToPlay_SustainerEngines_maxMassIgnitionsCoeff$
		maxCostIgnitionsCoeff = #$@REALISM_SIMPLIFIED/payToPlay_SustainerEngines_maxCostIgnitionsCoeff$
		maxIgnitionRestoreCostCoeff = #$@REALISM_SIMPLIFIED/payToPlay_SustainerEngines_maxIgnitionRestoreCostCoeff$
		maxFailureFixCostCoeff = #$@REALISM_SIMPLIFIED/payToPlay_SustainerEngines_maxFailureFixCostCoeff$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineIgnitions[*],#RS_EngineRatedBurnTime[*],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[OMS],~RS_IgnoreEngine[]]]:NEEDS[PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	!MODULE[EngineDecay],* {}
	MODULE
	{
		name = EngineDecay
		topBaseRatedTime = #$/RS_EngineRatedBurnTime$
		@topBaseRatedTime *= #$@REALISM_SIMPLIFIED/payToPlay_OMSEngines_topBaseRatedTime_Coeff$
		topMaxRatedTime = #$/RS_EngineRatedBurnTime$
		@topMaxRatedTime *= #$@REALISM_SIMPLIFIED/payToPlay_OMSEngines_topMaxRatedTime_Coeff$
		maintenanceAtRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_OMSEngines_maintenanceAtRatedTimeCoeff$
		maxMassRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_OMSEngines_maxMassRatedTimeCoeff$
		maxCostRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_OMSEngines_maxCostRatedTimeCoeff$
		baseIgnitions = #$/RS_EngineIgnitions$
		maxIgnitions = #$/RS_EngineIgnitions$
		@maxIgnitions *= #$@REALISM_SIMPLIFIED/payToPlay_OMSEngines_maxIgnitions_Multiplier$
		maxMassIgnitionsCoeff = #$@REALISM_SIMPLIFIED/payToPlay_OMSEngines_maxMassIgnitionsCoeff$
		maxCostIgnitionsCoeff = #$@REALISM_SIMPLIFIED/payToPlay_OMSEngines_maxCostIgnitionsCoeff$
		maxIgnitionRestoreCostCoeff = #$@REALISM_SIMPLIFIED/payToPlay_OMSEngines_maxIgnitionRestoreCostCoeff$
		maxFailureFixCostCoeff = #$@REALISM_SIMPLIFIED/payToPlay_OMSEngines_maxFailureFixCostCoeff$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineIgnitions[*],#RS_EngineRatedBurnTime[*],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[nuclear],~RS_IgnoreEngine[]]]:NEEDS[PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	!MODULE[EngineDecay],* {}
	MODULE
	{
		name = EngineDecay
		topBaseRatedTime = #$/RS_EngineRatedBurnTime$
		@topBaseRatedTime *= #$@REALISM_SIMPLIFIED/payToPlay_NuclearEngines_topBaseRatedTime_Coeff$
		topMaxRatedTime = #$/RS_EngineRatedBurnTime$
		@topMaxRatedTime *= #$@REALISM_SIMPLIFIED/payToPlay_NuclearEngines_topMaxRatedTime_Coeff$
		maintenanceAtRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_NuclearEngines_maintenanceAtRatedTimeCoeff$
		maxMassRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_NuclearEngines_maxMassRatedTimeCoeff$
		maxCostRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_NuclearEngines_maxCostRatedTimeCoeff$
		baseIgnitions = #$/RS_EngineIgnitions$
		maxIgnitions = #$/RS_EngineIgnitions$
		@maxIgnitions *= #$@REALISM_SIMPLIFIED/payToPlay_NuclearEngines_maxIgnitions_Multiplier$
		maxMassIgnitionsCoeff = #$@REALISM_SIMPLIFIED/payToPlay_NuclearEngines_maxMassIgnitionsCoeff$
		maxCostIgnitionsCoeff = #$@REALISM_SIMPLIFIED/payToPlay_NuclearEngines_maxCostIgnitionsCoeff$
		maxIgnitionRestoreCostCoeff = #$@REALISM_SIMPLIFIED/payToPlay_NuclearEngines_maxIgnitionRestoreCostCoeff$
		maxFailureFixCostCoeff = #$@REALISM_SIMPLIFIED/payToPlay_NuclearEngines_maxFailureFixCostCoeff$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineIgnitions[*],#RS_EngineRatedBurnTime[*],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[electric],~RS_IgnoreEngine[]]]:NEEDS[PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	!MODULE[EngineDecay],* {}
	MODULE
	{
		name = EngineDecay
		topBaseRatedTime = #$/RS_EngineRatedBurnTime$
		@topBaseRatedTime *= #$@REALISM_SIMPLIFIED/payToPlay_ElectricEngines_topBaseRatedTime_Coeff$
		topMaxRatedTime = #$/RS_EngineRatedBurnTime$
		@topMaxRatedTime *= #$@REALISM_SIMPLIFIED/payToPlay_ElectricEngines_topMaxRatedTime_Coeff$
		maintenanceAtRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_ElectricEngines_maintenanceAtRatedTimeCoeff$
		maxMassRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_ElectricEngines_maxMassRatedTimeCoeff$
		maxCostRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_ElectricEngines_maxCostRatedTimeCoeff$
		baseIgnitions = -1
		maxFailureFixCostCoeff = #$@REALISM_SIMPLIFIED/payToPlay_ElectricEngines_maxFailureFixCostCoeff$
		subjectToProgress = false
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineIgnitions[*],#RS_EngineRatedBurnTime[*],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[air_breathing],~RS_IgnoreEngine[]]]:NEEDS[PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	!MODULE[EngineDecay],* {}
	MODULE
	{
		name = EngineDecay
		topBaseRatedTime = #$/RS_EngineRatedBurnTime$
		@topBaseRatedTime *= #$@REALISM_SIMPLIFIED/payToPlay_AirBreathingEngines_topBaseRatedTime_Coeff$
		topMaxRatedTime = #$/RS_EngineRatedBurnTime$
		@topMaxRatedTime *= #$@REALISM_SIMPLIFIED/payToPlay_AirBreathingEngines_topMaxRatedTime_Coeff$
		maintenanceAtRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_AirBreathingEngines_maintenanceAtRatedTimeCoeff$
		maxMassRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_AirBreathingEngines_maxMassRatedTimeCoeff$
		maxCostRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_AirBreathingEngines_maxCostRatedTimeCoeff$
		baseIgnitions = -1
		maxFailureFixCostCoeff = #$@REALISM_SIMPLIFIED/payToPlay_AirBreathingEngines_maxFailureFixCostCoeff$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineIgnitions[*],#RS_EngineRatedBurnTime[*],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[SRB],~RS_IgnoreEngine[]]]:NEEDS[PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	!MODULE[EngineDecay],* {}
	MODULE
	{
		name = EngineDecay
		topBaseRatedTime = -1
		maintenanceAtRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_SRB_maintenanceAtRatedTimeCoeff$
		baseIgnitions = 1
		maxIgnitions = 1
		maxIgnitionRestoreCostCoeff = 0
		ignitionIssuesChanceScale = #$@REALISM_SIMPLIFIED/payToPlay_SRB_ignitionIssuesChanceScale$
		useSRBCost = true
		subtractResourcesCost = true
		maxFailureFixCostCoeff = #$@REALISM_SIMPLIFIED/payToPlay_SRB_maxFailureFixCostCoeff$
		subjectToProgress = false
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineConfig[*],@MODULE[EngineDecay]:HAS[~engineModelId[]]]:NEEDS[PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[EngineDecay]:HAS[~engineModelId[]]
	{
		engineModelId = #$/RS_EngineConfig$
	}
}

@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:NEEDS[PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],!MODULE:HAS[@IDENTIFIER[EngineDecay]],#RS_EngineType[lower_stage],#RS_EngineIgnitions[*],#RS_EngineRatedBurnTime[*]],*
		{
			MODULE
			{
				IDENTIFIER
				{
					name = EngineDecay
				}
				DATA
				{
					topBaseRatedTime = #$../../RS_EngineRatedBurnTime$
					@topBaseRatedTime *= #$@REALISM_SIMPLIFIED/payToPlay_LowerStageEngines_topBaseRatedTime_Coeff$
					topMaxRatedTime = #$../../RS_EngineRatedBurnTime$
					@topMaxRatedTime *= #$@REALISM_SIMPLIFIED/payToPlay_LowerStageEngines_topMaxRatedTime_Coeff$
					maintenanceAtRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_LowerStageEngines_maintenanceAtRatedTimeCoeff$
					maxMassRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_LowerStageEngines_maxMassRatedTimeCoeff$
					maxCostRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_LowerStageEngines_maxCostRatedTimeCoeff$
					baseIgnitions = #$../../RS_EngineIgnitions$
					maxIgnitions = #$../../RS_EngineIgnitions$
					@maxIgnitions *= #$@REALISM_SIMPLIFIED/payToPlay_LowerStageEngines_maxIgnitions_Multiplier$
					maxMassIgnitionsCoeff = #$@REALISM_SIMPLIFIED/payToPlay_LowerStageEngines_maxMassIgnitionsCoeff$
					maxCostIgnitionsCoeff = #$@REALISM_SIMPLIFIED/payToPlay_LowerStageEngines_maxCostIgnitionsCoeff$
					maxIgnitionRestoreCostCoeff = #$@REALISM_SIMPLIFIED/payToPlay_LowerStageEngines_maxIgnitionRestoreCostCoeff$
					maxFailureFixCostCoeff = #$@REALISM_SIMPLIFIED/payToPlay_LowerStageEngines_maxFailureFixCostCoeff$
				}
			}
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],!MODULE:HAS[@IDENTIFIER[EngineDecay]],#RS_EngineType[upper_stage],#RS_EngineIgnitions[*],#RS_EngineRatedBurnTime[*]],*
		{
			MODULE
			{
				IDENTIFIER
				{
					name = EngineDecay
				}
				DATA
				{
					topBaseRatedTime = #$../../RS_EngineRatedBurnTime$
					@topBaseRatedTime *= #$@REALISM_SIMPLIFIED/payToPlay_UpperStageEngines_topBaseRatedTime_Coeff$
					topMaxRatedTime = #$../../RS_EngineRatedBurnTime$
					@topMaxRatedTime *= #$@REALISM_SIMPLIFIED/payToPlay_UpperStageEngines_topMaxRatedTime_Coeff$
					maintenanceAtRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_UpperStageEngines_maintenanceAtRatedTimeCoeff$
					maxMassRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_UpperStageEngines_maxMassRatedTimeCoeff$
					maxCostRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_UpperStageEngines_maxCostRatedTimeCoeff$
					baseIgnitions = #$../../RS_EngineIgnitions$
					maxIgnitions = #$../../RS_EngineIgnitions$
					@maxIgnitions *= #$@REALISM_SIMPLIFIED/payToPlay_UpperStageEngines_maxIgnitions_Multiplier$
					maxMassIgnitionsCoeff = #$@REALISM_SIMPLIFIED/payToPlay_UpperStageEngines_maxMassIgnitionsCoeff$
					maxCostIgnitionsCoeff = #$@REALISM_SIMPLIFIED/payToPlay_UpperStageEngines_maxCostIgnitionsCoeff$
					maxIgnitionRestoreCostCoeff = #$@REALISM_SIMPLIFIED/payToPlay_UpperStageEngines_maxIgnitionRestoreCostCoeff$
					maxFailureFixCostCoeff = #$@REALISM_SIMPLIFIED/payToPlay_UpperStageEngines_maxFailureFixCostCoeff$
				}
			}
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],!MODULE:HAS[@IDENTIFIER[EngineDecay]],#RS_EngineType[sustainer],#RS_EngineIgnitions[*],#RS_EngineRatedBurnTime[*]],*
		{
			MODULE
			{
				IDENTIFIER
				{
					name = EngineDecay
				}
				DATA
				{
					topBaseRatedTime = #$../../RS_EngineRatedBurnTime$
					@topBaseRatedTime *= #$@REALISM_SIMPLIFIED/payToPlay_SustainerEngines_topBaseRatedTime_Coeff$
					topMaxRatedTime = #$../../RS_EngineRatedBurnTime$
					@topMaxRatedTime *= #$@REALISM_SIMPLIFIED/payToPlay_SustainerEngines_topMaxRatedTime_Coeff$
					maintenanceAtRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_SustainerEngines_maintenanceAtRatedTimeCoeff$
					maxMassRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_SustainerEngines_maxMassRatedTimeCoeff$
					maxCostRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_SustainerEngines_maxCostRatedTimeCoeff$
					baseIgnitions = #$../../RS_EngineIgnitions$
					maxIgnitions = #$../../RS_EngineIgnitions$
					@maxIgnitions *= #$@REALISM_SIMPLIFIED/payToPlay_SustainerEngines_maxIgnitions_Multiplier$
					maxMassIgnitionsCoeff = #$@REALISM_SIMPLIFIED/payToPlay_SustainerEngines_maxMassIgnitionsCoeff$
					maxCostIgnitionsCoeff = #$@REALISM_SIMPLIFIED/payToPlay_SustainerEngines_maxCostIgnitionsCoeff$
					maxIgnitionRestoreCostCoeff = #$@REALISM_SIMPLIFIED/payToPlay_SustainerEngines_maxIgnitionRestoreCostCoeff$
					maxFailureFixCostCoeff = #$@REALISM_SIMPLIFIED/payToPlay_SustainerEngines_maxFailureFixCostCoeff$
				}
			}
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],!MODULE:HAS[@IDENTIFIER[EngineDecay]],#RS_EngineType[OMS],#RS_EngineIgnitions[*],#RS_EngineRatedBurnTime[*]],*
		{
			MODULE
			{
				IDENTIFIER
				{
					name = EngineDecay
				}
				DATA
				{
					topBaseRatedTime = #$../../RS_EngineRatedBurnTime$
					@topBaseRatedTime *= #$@REALISM_SIMPLIFIED/payToPlay_OMSEngines_topBaseRatedTime_Coeff$
					topMaxRatedTime = #$../../RS_EngineRatedBurnTime$
					@topMaxRatedTime *= #$@REALISM_SIMPLIFIED/payToPlay_OMSEngines_topMaxRatedTime_Coeff$
					maintenanceAtRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_OMSEngines_maintenanceAtRatedTimeCoeff$
					maxMassRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_OMSEngines_maxMassRatedTimeCoeff$
					maxCostRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_OMSEngines_maxCostRatedTimeCoeff$
					baseIgnitions = #$../../RS_EngineIgnitions$
					maxIgnitions = #$../../RS_EngineIgnitions$
					@maxIgnitions *= #$@REALISM_SIMPLIFIED/payToPlay_OMSEngines_maxIgnitions_Multiplier$
					maxMassIgnitionsCoeff = #$@REALISM_SIMPLIFIED/payToPlay_OMSEngines_maxMassIgnitionsCoeff$
					maxCostIgnitionsCoeff = #$@REALISM_SIMPLIFIED/payToPlay_OMSEngines_maxCostIgnitionsCoeff$
					maxIgnitionRestoreCostCoeff = #$@REALISM_SIMPLIFIED/payToPlay_OMSEngines_maxIgnitionRestoreCostCoeff$
					maxFailureFixCostCoeff = #$@REALISM_SIMPLIFIED/payToPlay_OMSEngines_maxFailureFixCostCoeff$
				}
			}
		}
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[],!MODULE:HAS[@IDENTIFIER[EngineDecay]],#RS_EngineType[nuclear],#RS_EngineIgnitions[*],#RS_EngineRatedBurnTime[*]],*
		{
			MODULE
			{
				IDENTIFIER
				{
					name = EngineDecay
				}
				DATA
				{
					topBaseRatedTime = #$../../RS_EngineRatedBurnTime$
					@topBaseRatedTime *= #$@REALISM_SIMPLIFIED/payToPlay_NuclearEngines_topBaseRatedTime_Coeff$
					topMaxRatedTime = #$../../RS_EngineRatedBurnTime$
					@topMaxRatedTime *= #$@REALISM_SIMPLIFIED/payToPlay_NuclearEngines_topMaxRatedTime_Coeff$
					maintenanceAtRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_NuclearEngines_maintenanceAtRatedTimeCoeff$
					maxMassRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_NuclearEngines_maxMassRatedTimeCoeff$
					maxCostRatedTimeCoeff = #$@REALISM_SIMPLIFIED/payToPlay_NuclearEngines_maxCostRatedTimeCoeff$
					baseIgnitions = #$../../RS_EngineIgnitions$
					maxIgnitions = #$../../RS_EngineIgnitions$
					@maxIgnitions *= #$@REALISM_SIMPLIFIED/payToPlay_NuclearEngines_maxIgnitions_Multiplier$
					maxMassIgnitionsCoeff = #$@REALISM_SIMPLIFIED/payToPlay_NuclearEngines_maxMassIgnitionsCoeff$
					maxCostIgnitionsCoeff = #$@REALISM_SIMPLIFIED/payToPlay_NuclearEngines_maxCostIgnitionsCoeff$
					maxIgnitionRestoreCostCoeff = #$@REALISM_SIMPLIFIED/payToPlay_NuclearEngines_maxIgnitionRestoreCostCoeff$
					maxFailureFixCostCoeff = #$@REALISM_SIMPLIFIED/payToPlay_NuclearEngines_maxFailureFixCostCoeff$
				}
			}
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:NEEDS[PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[#RS_EngineDefaultVariant[*rue],#RS_EngineConfig[*],!MODULE:HAS[@IDENTIFIER[EngineDecay]]],*
		{
			MODULE
			{
				IDENTIFIER
				{
					name = EngineDecay
				}
				DATA
				{
					engineModelId = #$../../RS_EngineConfig$
				}
			}
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:NEEDS[PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[#RS_EngineConfig[*]],*
		{
			@MODULE:HAS[@IDENTIFIER[EngineDecay],@DATA:HAS[~engineModelId[]]]
			{
				@DATA
				{
					engineModelId = #$../../RS_EngineConfig$
				}
			}
		}
	}
}

@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EngineConfig[*],@MODULE[EngineDecay]:HAS[#baseIgnitions[-1]]]:NEEDS[PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[EngineDecay]:HAS[#baseIgnitions[-1]]
	{
		!maxIgnitions = DELETE
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:NEEDS[PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~RS_EngineDefaultVariant[]],*
		{
			@MODULE:HAS[@IDENTIFIER[EngineDecay],@DATA:HAS[#baseIgnitions[-1]]]
			{
				@DATA
				{
					!maxIgnitions = DELETE
				}
			}
		}
	}
}

// Engine ignitor + PayToPlay
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngineIgnitor]:HAS[#UseUllageSimulation[*alse]],@MODULE[EngineDecay],!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:NEEDS[EngineIgnitor,PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	!MODULE[ModuleEngineIgnitor],* {}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngineIgnitor]:HAS[#UseUllageSimulation[*alse]],@MODULE[EngineDecay],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch],!SUBTYPE:HAS[@MODULE:HAS[@IDENTIFIER[ModuleEngineIgnitor],@DATA:HAS[#UseUllageSimulation[*rue]]]]]]:NEEDS[EngineIgnitor,PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	!MODULE[ModuleEngineIgnitor],* {}
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE,*
		{
			!MODULE:HAS[@IDENTIFIER[ModuleEngineIgnitor]] {}
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngineIgnitor],@MODULE[EngineDecay],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:NEEDS[EngineIgnitor,PayToPlay]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE,*
		{
			@MODULE:HAS[@IDENTIFIER[ModuleEngineIgnitor],@DATA]
			{
				@DATA
				{
					%IgnitionsAvailable = -1
				}
			}
		}
	}
}

// If engine cannot be shut down (SRB) and does not require propellants ullage, EngineIgnitor is meaningless
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngineIgnitor]:HAS[#UseUllageSimulation[*alse]],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_EnginePrimary[*rue],#allowShutdown[*alse]]]:NEEDS[EngineIgnitor]:FOR[zzzzRealismSimplifiedEngines]
{
	!MODULE[ModuleEngineIgnitor],* {}
}


// ===================================================================================================================
// Sanity check:
// minThrust must not be higher than maxThrust for any engine or engine variant
// ===================================================================================================================
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#minThrust[>0],#maxThrust[>0]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#minThrust[>0],#maxThrust[>0]],*
	{
		%RS_ThrustMinMaxDiff = #$minThrust$
		@RS_ThrustMinMaxDiff -= #$maxThrust$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_ThrustMinMaxDiff[>0]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_ThrustMinMaxDiff[>0]],*
	{
		@minThrust = #$maxThrust$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch],@SUBTYPE:HAS[@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#minThrust[>0],#maxThrust[>0]]]]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE,*
		{
			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#minThrust[>0],#maxThrust[>0]]],*
			{
				@DATA
				{
					%RS_ThrustMinMaxDiff = #$minThrust$
					@RS_ThrustMinMaxDiff -= #$maxThrust$
				}
			}
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch],@SUBTYPE:HAS[@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#minThrust[>0],#maxThrust[>0],#RS_ThrustMinMaxDiff[>0]]]]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE,*
		{
			@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#minThrust[>0],#maxThrust[>0]]],*
			{
				@DATA
				{
					@minThrust = #$maxThrust$
				}
			}
		}
	}
}


// ===================================================================================================================
// Titles for engines and engines clusters
// ===================================================================================================================
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EnginesTitlesUpdate[*rue],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineTitle[*],~RS_IgnoreEngine[]],~RS_EngineTitleUpdated[*rue]]:FOR[zzzzRealismSimplifiedEngines]
{
	@title = #$MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineTitle[*],~RS_IgnoreEngine[]],0/RS_EngineTitle$
	%RS_Lang = #$@REALISM_SIMPLIFIED/gameLanguage$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EnginesTitlesUpdate[*rue],@MODULE[ModuleEngines*]:HAS[#RS_ClusterEnginesCount[>1],#RS_EnginePrimary[*rue],~RS_IgnoreEngine[]],~RS_EngineTitleUpdated[*rue],#RS_Lang[ru]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_ClusterEnginesCount = #$MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_ClusterEnginesCount[>1],#RS_EnginePrimary[*rue]],0/RS_ClusterEnginesCount$
	%RS_Temp = #$@REALISM_SIMPLIFIED/loc_Ru_ClusterEnginesCount$
	@RS_Temp ^= #:%count%:$RS_ClusterEnginesCount$:
	@title ^= :$:%END%:
	@title ^= #:%END%: $RS_Temp$:
	%RS_EngineTitleUpdated = true
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EnginesTitlesUpdate[*rue],@MODULE[ModuleEngines*]:HAS[#RS_ClusterEnginesCount[>1],#RS_EnginePrimary[*rue],~RS_IgnoreEngine[]],~RS_EngineTitleUpdated[*rue],#RS_Lang[en-us]]:FOR[zzzzRealismSimplifiedEngines]
{
	%RS_ClusterEnginesCount = #$MODULE[ModuleEngines*]:HAS[~RS_IgnoreEngine[],#RS_ClusterEnginesCount[>1],#RS_EnginePrimary[*rue]],0/RS_ClusterEnginesCount$
	%RS_Temp = #$@REALISM_SIMPLIFIED/loc_En_ClusterEnginesCount$
	@RS_Temp ^= #:%count%:$RS_ClusterEnginesCount$:
	@title ^= :$:%END%:
	@title ^= #:%END%: $RS_Temp$:
	%RS_EngineTitleUpdated = true
}


// ===================================================================================================================
// Description for engine
// ===================================================================================================================
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],#RS_EnginesDescriptionsUpdate[*rue],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineDescription[*],~RS_IgnoreEngine[]],~RS_EngineDescUpdated[*rue]]:FOR[zzzzRealismSimplifiedEngines]
{
	@description = #$MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineDescription[*],~RS_IgnoreEngine[]],0/RS_EngineDescription$
	%RS_EngineDescUpdated = true
}


// ===================================================================================================================
// Titles and auto-generated info (descriptionSummary) for B9PS engine subtypes
// ===================================================================================================================
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE,*
		{
			%RS_Lang = #$@REALISM_SIMPLIFIED/gameLanguage$
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[#title[*],#RS_ClusterEnginesCount[>1],~RS_EngineTitleUpdated[*rue],#RS_Lang[ru]],*
		{
			%RS_Temp = #$@REALISM_SIMPLIFIED/loc_Ru_ClusterEnginesCount$
			@RS_Temp ^= #:%count%:$RS_ClusterEnginesCount$:
			@title ^= :$:%END%:
			@title ^= #:%END%: $RS_Temp$:
			%RS_EngineTitleUpdated = true
		}
		@SUBTYPE:HAS[#title[*],#RS_ClusterEnginesCount[>1],~RS_EngineTitleUpdated[*rue],#RS_Lang[en-us]],*
		{
			%RS_Temp = #$@REALISM_SIMPLIFIED/loc_En_ClusterEnginesCount$
			@RS_Temp ^= #:%count%:$RS_ClusterEnginesCount$:
			@title ^= :$:%END%:
			@title ^= #:%END%: $RS_Temp$:
			%RS_EngineTitleUpdated = true
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~descriptionSummary[],#RS_EnginePropellants[*],#RS_EngineIgnitions[*],#RS_ISPVac[>0],#RS_ISPSL[>0],@MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#maxThrust[>0]]]],*
		{
			%RS_MaxThrust = #$MODULE:HAS[@IDENTIFIER[ModuleEnginesFX],@DATA:HAS[#maxThrust[>0]]],0/DATA/maxThrust$
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~descriptionSummary[],#RS_EnginePropellants[*],#RS_EngineIgnitions[*],#RS_ISPVac[>0],#RS_ISPSL[>0],#RS_MaxThrust[>0],#RS_Lang[ru]],*
		{
			%RS_DescriptionSummary = #$@REALISM_SIMPLIFIED/loc_Ru_B9PS_EngineVariantInfo_Template$
			%RS_IgnInfinite = #$@REALISM_SIMPLIFIED/loc_Ru_IgnitionsInfinite$
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~descriptionSummary[],#RS_EnginePropellants[*],#RS_EngineIgnitions[*],#RS_ISPVac[>0],#RS_ISPSL[>0],#RS_MaxThrust[>0],#RS_Lang[en-us]],*
		{
			%RS_DescriptionSummary = #$@REALISM_SIMPLIFIED/loc_En_B9PS_EngineVariantInfo_Template$
			%RS_IgnInfinite = #$@REALISM_SIMPLIFIED/loc_En_IgnitionsInfinite$
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],~RS_EnginePressureFed[]],*
		{
			RS_EnginePressureFed = 
		}
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePressureFed[*alse]],*
		{
			@RS_EnginePressureFed = 
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePropellants[AlcoLOX],#RS_Lang[ru]],*
		{
			@RS_EnginePropellants = #$@REALISM_SIMPLIFIED/loc_Ru_AlcoLOX$
		}
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePropellants[KeroLOX],#RS_Lang[ru]],*
		{
			@RS_EnginePropellants = #$@REALISM_SIMPLIFIED/loc_Ru_KeroLOX$
		}
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePropellants[HydroLOX],#RS_Lang[ru]],*
		{
			@RS_EnginePropellants = #$@REALISM_SIMPLIFIED/loc_Ru_HydroLOX$
		}
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePropellants[MethaLOX],#RS_Lang[ru]],*
		{
			@RS_EnginePropellants = #$@REALISM_SIMPLIFIED/loc_Ru_MethaLOX$
		}
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePropellants[Hypergolics],#RS_Lang[ru]],*
		{
			@RS_EnginePropellants = #$@REALISM_SIMPLIFIED/loc_Ru_Hypergolics$
		}
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePropellants[MonoPropellant],#RS_Lang[ru]],*
		{
			@RS_EnginePropellants = #$@REALISM_SIMPLIFIED/loc_En_Hydrazine$
		}
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePropellants[Hydrazine],#RS_Lang[ru]],*
		{
			@RS_EnginePropellants = #$@REALISM_SIMPLIFIED/loc_Ru_Hydrazine$
		}
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePropellants[AvGas],#RS_Lang[ru]],*
		{
			@RS_EnginePropellants = #$@REALISM_SIMPLIFIED/loc_Ru_AvGas$
		}
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePropellants[Kerosene],#RS_Lang[ru]],*
		{
			@RS_EnginePropellants = #$@REALISM_SIMPLIFIED/loc_Ru_Kerosene$
		}
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePropellants[LqdHydrogen],#RS_Lang[ru]],*
		{
			@RS_EnginePropellants = #$@REALISM_SIMPLIFIED/loc_Ru_LqdHydrogen$
		}
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePropellants[LqdMethane],#RS_Lang[ru]],*
		{
			@RS_EnginePropellants = #$@REALISM_SIMPLIFIED/loc_Ru_LqdMethane$
		}
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePropellants[SolidFuel],#RS_Lang[ru]],*
		{
			@RS_EnginePropellants = #$@REALISM_SIMPLIFIED/loc_Ru_SolidFuel$
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EngineUllage[*alse],#RS_Lang[ru]],*
		{
			@RS_EngineUllage = #$@REALISM_SIMPLIFIED/loc_Ru_NoUllage$
		}
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],~RS_EngineUllage[],#RS_Lang[ru]],*
		{
			@RS_EngineUllage = #$@REALISM_SIMPLIFIED/loc_Ru_NoUllage$
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EngineUllage[*rue],#RS_Lang[ru]],*
		{
			@RS_EngineUllage =  
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePressureFed[*rue],#RS_Lang[ru]],*
		{
			@RS_EnginePressureFed = #$@REALISM_SIMPLIFIED/loc_Ru_PressureFed$
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePropellants[AlcoLOX],#RS_Lang[en-us]],*
		{
			@RS_EnginePropellants = #$@REALISM_SIMPLIFIED/loc_En_AlcoLOX$
		}
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePropellants[KeroLOX],#RS_Lang[en-us]],*
		{
			@RS_EnginePropellants = #$@REALISM_SIMPLIFIED/loc_En_KeroLOX$
		}
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePropellants[HydroLOX],#RS_Lang[en-us]],*
		{
			@RS_EnginePropellants = #$@REALISM_SIMPLIFIED/loc_En_HydroLOX$
		}
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePropellants[MethaLOX],#RS_Lang[en-us]],*
		{
			@RS_EnginePropellants = #$@REALISM_SIMPLIFIED/loc_En_MethaLOX$
		}
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePropellants[Hypergolics],#RS_Lang[en-us]],*
		{
			@RS_EnginePropellants = #$@REALISM_SIMPLIFIED/loc_En_Hypergolics$
		}
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePropellants[MonoPropellant],#RS_Lang[en-us]],*
		{
			@RS_EnginePropellants = #$@REALISM_SIMPLIFIED/loc_En_Hydrazine$
		}
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePropellants[Hydrazine],#RS_Lang[en-us]],*
		{
			@RS_EnginePropellants = #$@REALISM_SIMPLIFIED/loc_En_Hydrazine$
		}
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePropellants[AvGas],#RS_Lang[en-us]],*
		{
			@RS_EnginePropellants = #$@REALISM_SIMPLIFIED/loc_En_AvGas$
		}
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePropellants[Kerosene],#RS_Lang[en-us]],*
		{
			@RS_EnginePropellants = #$@REALISM_SIMPLIFIED/loc_En_Kerosene$
		}
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePropellants[LqdHydrogen],#RS_Lang[en-us]],*
		{
			@RS_EnginePropellants = #$@REALISM_SIMPLIFIED/loc_En_LqdHydrogen$
		}
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePropellants[LqdMethane],#RS_Lang[en-us]],*
		{
			@RS_EnginePropellants = #$@REALISM_SIMPLIFIED/loc_En_LqdMethane$
		}
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePropellants[SolidFuel],#RS_Lang[en-us]],*
		{
			@RS_EnginePropellants = #$@REALISM_SIMPLIFIED/loc_En_SolidFuel$
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EngineUllage[*alse],#RS_Lang[en-us]],*
		{
			@RS_EngineUllage = #$@REALISM_SIMPLIFIED/loc_En_NoUllage$
		}
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],~RS_EngineUllage[],#RS_Lang[en-us]],*
		{
			@RS_EngineUllage = #$@REALISM_SIMPLIFIED/loc_En_NoUllage$
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EngineUllage[*rue],#RS_Lang[en-us]],*
		{
			@RS_EngineUllage =  
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EnginePressureFed[*rue],#RS_Lang[en-us]],*
		{
			@RS_EnginePressureFed = #$@REALISM_SIMPLIFIED/loc_En_PressureFed$
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[#RS_DescriptionSummary[*],#RS_EngineIgnitions[-1],#RS_IgnInfinite[*]],*
		{
			@RS_EngineIgnitions = #$RS_IgnInfinite$
		}
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]]:FOR[zzzzRealismSimplifiedEngines]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RS_EngineConfigSwitch]]
	{
		@SUBTYPE:HAS[~descriptionSummary[],#RS_EngineUllage[*],#RS_EnginePropellants[*],#RS_EngineIgnitions[*],#RS_ISPVac[>0],#RS_ISPSL[>0],#RS_MaxThrust[>0],#RS_DescriptionSummary[*]],*
		{
			@RS_DescriptionSummary ^= #:%propellants%:$RS_EnginePropellants$:
			@RS_DescriptionSummary ^= #:%maxThrust%:$RS_MaxThrust$:
			@RS_DescriptionSummary ^= #:%ISPVac%:$RS_ISPVac$:
			@RS_DescriptionSummary ^= #:%ISPSL%:$RS_ISPSL$:
			@RS_DescriptionSummary ^= #:%ignitions%:$RS_EngineIgnitions$:
			@RS_DescriptionSummary ^= #:%ullage%:$RS_EngineUllage$:
			@RS_DescriptionSummary ^= #:%pressureFed%:$RS_EnginePressureFed$:
			descriptionSummary = #$RS_DescriptionSummary$
		}
		@SUBTYPE:HAS[~descriptionSummary[],#RS_EngineUllage[],#RS_EnginePropellants[*],#RS_EngineIgnitions[*],#RS_ISPVac[>0],#RS_ISPSL[>0],#RS_MaxThrust[>0],#RS_DescriptionSummary[*]],*
		{
			@RS_DescriptionSummary ^= #:%propellants%:$RS_EnginePropellants$:
			@RS_DescriptionSummary ^= #:%maxThrust%:$RS_MaxThrust$:
			@RS_DescriptionSummary ^= #:%ISPVac%:$RS_ISPVac$:
			@RS_DescriptionSummary ^= #:%ISPSL%:$RS_ISPSL$:
			@RS_DescriptionSummary ^= #:%ignitions%:$RS_EngineIgnitions$:
			@RS_DescriptionSummary ^= #:%ullage%:$RS_EngineUllage$:
			@RS_DescriptionSummary ^= #:%pressureFed%:$RS_EnginePressureFed$:
			descriptionSummary = #$RS_DescriptionSummary$
		}
		@SUBTYPE:HAS[~descriptionSummary[],~RS_EngineUllage[],#RS_EnginePropellants[*],#RS_EngineIgnitions[*],#RS_ISPVac[>0],#RS_ISPSL[>0],#RS_MaxThrust[>0],#RS_DescriptionSummary[*]],*
		{
			@RS_DescriptionSummary ^= #:%propellants%:$RS_EnginePropellants$:
			@RS_DescriptionSummary ^= #:%maxThrust%:$RS_MaxThrust$:
			@RS_DescriptionSummary ^= #:%ISPVac%:$RS_ISPVac$:
			@RS_DescriptionSummary ^= #:%ISPSL%:$RS_ISPSL$:
			@RS_DescriptionSummary ^= #:%ignitions%:$RS_EngineIgnitions$:
			@RS_DescriptionSummary ^= :%ullage%::
			@RS_DescriptionSummary ^= #:%pressureFed%:$RS_EnginePressureFed$:
			descriptionSummary = #$RS_DescriptionSummary$
		}
	}
}


// ===================================================================================================================
// TweakScale settings
// ===================================================================================================================

@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],~RS_EngineTweakScaleAlterSettings[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EnginePressureFed[*rue]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	RS_EngineTweakScaleAlterSettings = #$@REALISM_SIMPLIFIED/tweakScale_PressureFedEngines_alterScaleSettings$
	%RS_EngineTweakScaleScalesBand = #$@REALISM_SIMPLIFIED/tweakScale_PressureFedEngines_maxScalePercent$
	@RS_EngineTweakScaleScalesBand -= #$@REALISM_SIMPLIFIED/tweakScale_PressureFedEngines_minScalePercent$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],~RS_EngineTweakScaleAlterSettings[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[SRB]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	RS_EngineTweakScaleAlterSettings = #$@REALISM_SIMPLIFIED/tweakScale_SRB_alterScaleSettings$
	%RS_EngineTweakScaleScalesBand = #$@REALISM_SIMPLIFIED/tweakScale_SRB_maxScalePercent$
	@RS_EngineTweakScaleScalesBand -= #$@REALISM_SIMPLIFIED/tweakScale_SRB_minScalePercent$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],~RS_EngineTweakScaleAlterSettings[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[electric]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	RS_EngineTweakScaleAlterSettings = #$@REALISM_SIMPLIFIED/tweakScale_ElectricEngines_alterScaleSettings$
	%RS_EngineTweakScaleScalesBand = #$@REALISM_SIMPLIFIED/tweakScale_ElectricEngines_maxScalePercent$
	@RS_EngineTweakScaleScalesBand -= #$@REALISM_SIMPLIFIED/tweakScale_ElectricEngines_minScalePercent$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],~RS_EngineTweakScaleAlterSettings[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[air_breathing]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	RS_EngineTweakScaleAlterSettings = #$@REALISM_SIMPLIFIED/tweakScale_AirBreathingEngines_alterScaleSettings$
	%RS_EngineTweakScaleScalesBand = #$@REALISM_SIMPLIFIED/tweakScale_AirBreathingEngines_maxScalePercent$
	@RS_EngineTweakScaleScalesBand -= #$@REALISM_SIMPLIFIED/tweakScale_AirBreathingEngines_minScalePercent$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],~RS_EngineTweakScaleAlterSettings[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[nuclear]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	RS_EngineTweakScaleAlterSettings = #$@REALISM_SIMPLIFIED/tweakScale_NuclearEngines_alterScaleSettings$
	%RS_EngineTweakScaleScalesBand = #$@REALISM_SIMPLIFIED/tweakScale_NuclearEngines_maxScalePercent$
	@RS_EngineTweakScaleScalesBand -= #$@REALISM_SIMPLIFIED/tweakScale_NuclearEngines_minScalePercent$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],~RS_EngineTweakScaleAlterSettings[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[lower_stage]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	RS_EngineTweakScaleAlterSettings = #$@REALISM_SIMPLIFIED/tweakScale_LowerStageEngines_alterScaleSettings$
	%RS_EngineTweakScaleScalesBand = #$@REALISM_SIMPLIFIED/tweakScale_LowerStageEngines_maxScalePercent$
	@RS_EngineTweakScaleScalesBand -= #$@REALISM_SIMPLIFIED/tweakScale_LowerStageEngines_minScalePercent$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],~RS_EngineTweakScaleAlterSettings[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[upper_stage]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	RS_EngineTweakScaleAlterSettings = #$@REALISM_SIMPLIFIED/tweakScale_UpperStageEngines_alterScaleSettings$
	%RS_EngineTweakScaleScalesBand = #$@REALISM_SIMPLIFIED/tweakScale_UpperStageEngines_maxScalePercent$
	@RS_EngineTweakScaleScalesBand -= #$@REALISM_SIMPLIFIED/tweakScale_UpperStageEngines_minScalePercent$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],~RS_EngineTweakScaleAlterSettings[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[sustainer]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	RS_EngineTweakScaleAlterSettings = #$@REALISM_SIMPLIFIED/tweakScale_SustainerEngines_alterScaleSettings$
	%RS_EngineTweakScaleScalesBand = #$@REALISM_SIMPLIFIED/tweakScale_SustainerEngines_maxScalePercent$
	@RS_EngineTweakScaleScalesBand -= #$@REALISM_SIMPLIFIED/tweakScale_SustainerEngines_minScalePercent$
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],~RS_EngineTweakScaleAlterSettings[],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[OMS]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	RS_EngineTweakScaleAlterSettings = #$@REALISM_SIMPLIFIED/tweakScale_OMSEngines_alterScaleSettings$
	%RS_EngineTweakScaleScalesBand = #$@REALISM_SIMPLIFIED/tweakScale_OMSEngines_maxScalePercent$
	@RS_EngineTweakScaleScalesBand -= #$@REALISM_SIMPLIFIED/tweakScale_OMSEngines_minScalePercent$
}

@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],#RS_EngineTweakScaleAlterSettings[*rue],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EnginePressureFed[*rue]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	!MODULE[TweakScale],* {}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],#RS_EngineTweakScaleAlterSettings[*rue],#RS_EngineTweakScaleScalesBand[>0],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EnginePressureFed[*rue]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	MODULE
	{
		name = TweakScale
		type = RS_engine_PressureFed
		TWEAKSCALEEXPONENTS
		{
			mass = 2.5
		}
	}
}

@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],#RS_EngineTweakScaleAlterSettings[*rue],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[SRB]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	!MODULE[TweakScale],* {}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],#RS_EngineTweakScaleAlterSettings[*rue],#RS_EngineTweakScaleScalesBand[>0],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[SRB]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	MODULE
	{
		name = TweakScale
		type = RS_engine_SRB
		TWEAKSCALEEXPONENTS
		{
			name = ModuleEngines
			minFuelFlow = 3
			maxFuelFlow = 3
			maxThrust = 3
			-ignore = ModuleEngineConfigs
		}
	}
}

@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],#RS_EngineTweakScaleAlterSettings[*rue],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[electric]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	!MODULE[TweakScale],* {}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],#RS_EngineTweakScaleAlterSettings[*rue],#RS_EngineTweakScaleScalesBand[>0],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[electric]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	MODULE
	{
		name = TweakScale
		type = RS_engine_Electric
		TWEAKSCALEEXPONENTS
		{
			mass = 2.5
		}
	}
}

@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],#RS_EngineTweakScaleAlterSettings[*rue],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[air_breathing]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	!MODULE[TweakScale],* {}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],#RS_EngineTweakScaleAlterSettings[*rue],#RS_EngineTweakScaleScalesBand[>0],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[air_breathing]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	MODULE
	{
		name = TweakScale
		type = RS_engine_AirBreathing
		TWEAKSCALEEXPONENTS
		{
			mass = 2.5
		}
	}
}

@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],#RS_EngineTweakScaleAlterSettings[*rue],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[nuclear]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	!MODULE[TweakScale],* {}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],#RS_EngineTweakScaleAlterSettings[*rue],#RS_EngineTweakScaleScalesBand[>0],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[nuclear]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	MODULE
	{
		name = TweakScale
		type = RS_engine_Nuclear
		TWEAKSCALEEXPONENTS
		{
			mass = 2.5
		}
	}
}

@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],#RS_EngineTweakScaleAlterSettings[*rue],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[lower_stage]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	!MODULE[TweakScale],* {}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],#RS_EngineTweakScaleAlterSettings[*rue],#RS_EngineTweakScaleScalesBand[>0],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[lower_stage]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	MODULE
	{
		name = TweakScale
		type = RS_engine_LowerStage
		TWEAKSCALEEXPONENTS
		{
			mass = 2.5
		}
	}
}

@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],#RS_EngineTweakScaleAlterSettings[*rue],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[upper_stage]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	!MODULE[TweakScale],* {}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],#RS_EngineTweakScaleAlterSettings[*rue],#RS_EngineTweakScaleScalesBand[>0],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[upper_stage]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	MODULE
	{
		name = TweakScale
		type = RS_engine_UpperStage
		TWEAKSCALEEXPONENTS
		{
			mass = 2.5
		}
	}
}

@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],#RS_EngineTweakScaleAlterSettings[*rue],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[sustainer]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	!MODULE[TweakScale],* {}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],#RS_EngineTweakScaleAlterSettings[*rue],#RS_EngineTweakScaleScalesBand[>0],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[sustainer]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	MODULE
	{
		name = TweakScale
		type = RS_engine_Sustainer
		TWEAKSCALEEXPONENTS
		{
			mass = 2.5
		}
	}
}

@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],#RS_EngineTweakScaleAlterSettings[*rue],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[OMS]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	!MODULE[TweakScale],* {}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_IgnoreEngine[],~RS_IgnoreForTweakScale[],#RS_EngineTweakScaleAlterSettings[*rue],#RS_EngineTweakScaleScalesBand[>0],@MODULE[ModuleEngines*]:HAS[#RS_EnginePrimary[*rue],#RS_EngineType[OMS]]]:NEEDS[TweakScale]:FOR[zzzzRealismSimplifiedEngines]
{
	MODULE
	{
		name = TweakScale
		type = RS_engine_OMS
		TWEAKSCALEEXPONENTS
		{
			mass = 2.5
		}
	}
}
