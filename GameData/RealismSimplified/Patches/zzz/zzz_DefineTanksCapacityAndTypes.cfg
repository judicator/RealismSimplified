// ==========================================================================
// Define RS_TotalCap if not already defined for tanks with variuos resources
// ==========================================================================

// Liquid fuel + oxidizer
@PART[*]:HAS[~RS_IgnorePart[],~RS_TotalCap[],@RESOURCE[LiquidFuel],@RESOURCE[Oxidizer],!RESOURCE[LqdHydrogen],!RESOURCE[LqdMethane],!RESOURCE[Ore],!RESOURCE[XenonGas],!RESOURCE[ArgonGas],!RESOURCE[Lithium]]:NEEDS[CommunityResourcePack]:AFTER[RealismSimplified]
{
	RS_TotalCap = #$RESOURCE[LiquidFuel]/maxAmount$
	@RS_TotalCap += #$RESOURCE[Oxidizer]/maxAmount$
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TotalCap[>0],~RS_TankType[],@RESOURCE[LiquidFuel],@RESOURCE[Oxidizer],!RESOURCE[LqdHydrogen],!RESOURCE[LqdMethane],!RESOURCE[Ore],!RESOURCE[XenonGas],!RESOURCE[ArgonGas],!RESOURCE[Lithium]]:NEEDS[CommunityResourcePack]:AFTER[RealismSimplified]
{
	RS_TankType = PropellantTank
	%RS_Tank_AddRocketPropellants = true
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TotalCap[>0],~RS_TankMetaType[],@RESOURCE[LiquidFuel],@RESOURCE[Oxidizer],!RESOURCE[LqdHydrogen],!RESOURCE[LqdMethane],!RESOURCE[Ore],!RESOURCE[XenonGas],!RESOURCE[ArgonGas],!RESOURCE[Lithium]]:NEEDS[CommunityResourcePack]:AFTER[RealismSimplified]
{
	RS_TankMetaType = Default
}

// Liquid fuel
@PART[*]:HAS[~RS_IgnorePart[],~RS_TotalCap[],@RESOURCE[LiquidFuel],!RESOURCE[Oxidizer],!RESOURCE[LqdHydrogen],!RESOURCE[LqdMethane],!RESOURCE[Ore],!RESOURCE[XenonGas],!RESOURCE[ArgonGas],!RESOURCE[Lithium]]:NEEDS[CommunityResourcePack]:AFTER[RealismSimplified]
{
	RS_TotalCap = #$RESOURCE[LiquidFuel]/maxAmount$
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TotalCap[>0],~RS_TankType[],@RESOURCE[LiquidFuel],!RESOURCE[Oxidizer],!RESOURCE[LqdHydrogen],!RESOURCE[LqdMethane],!RESOURCE[Ore],!RESOURCE[XenonGas],!RESOURCE[ArgonGas],!RESOURCE[Lithium]]:NEEDS[CommunityResourcePack]:AFTER[RealismSimplified]
{
	RS_TankType = PropellantTank
	%RS_Tank_AddRocketPropellants = true
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TotalCap[>0],~RS_TankMetaType[],@RESOURCE[LiquidFuel],!RESOURCE[Oxidizer],!RESOURCE[LqdHydrogen],!RESOURCE[LqdMethane],!RESOURCE[Ore],!RESOURCE[XenonGas],!RESOURCE[ArgonGas],!RESOURCE[Lithium]]:NEEDS[CommunityResourcePack]:AFTER[RealismSimplified]
{
	RS_TankMetaType = Aviation
}

// Oxidizer
@PART[*]:HAS[~RS_IgnorePart[],~RS_TotalCap[],!RESOURCE[LiquidFuel],@RESOURCE[Oxidizer],!RESOURCE[LqdHydrogen],!RESOURCE[LqdMethane],!RESOURCE[Ore],!RESOURCE[XenonGas],!RESOURCE[ArgonGas],!RESOURCE[Lithium]]:NEEDS[CommunityResourcePack]:AFTER[RealismSimplified]
{
	RS_TotalCap = #$RESOURCE[Oxidizer]/maxAmount$
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TotalCap[>0],~RS_TankType[],!RESOURCE[LiquidFuel],@RESOURCE[Oxidizer],!RESOURCE[LqdHydrogen],!RESOURCE[LqdMethane],!RESOURCE[Ore],!RESOURCE[XenonGas],!RESOURCE[ArgonGas],!RESOURCE[Lithium]]:NEEDS[CommunityResourcePack]:AFTER[RealismSimplified]
{
	RS_TankType = PropellantTank
	%RS_Tank_AddRocketPropellants = true
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TotalCap[>0],~RS_TankMetaType[],!RESOURCE[LiquidFuel],@RESOURCE[Oxidizer],!RESOURCE[LqdHydrogen],!RESOURCE[LqdMethane],!RESOURCE[Ore],!RESOURCE[XenonGas],!RESOURCE[ArgonGas],!RESOURCE[Lithium]]:NEEDS[CommunityResourcePack]:AFTER[RealismSimplified]
{
	RS_TankMetaType = Default
}

// Liquid hydrogen + oxidizer
@PART[*]:HAS[~RS_IgnorePart[],~RS_TotalCap[],@RESOURCE[LqdHydrogen],@RESOURCE[Oxidizer],!RESOURCE[LiquidFuel],!RESOURCE[LqdMethane],!RESOURCE[Ore],!RESOURCE[XenonGas],!RESOURCE[ArgonGas],!RESOURCE[Lithium]]:NEEDS[CommunityResourcePack]:AFTER[RealismSimplified]
{
	RS_TotalCap = #$RESOURCE[LqdHydrogen]/maxAmount$
	@RS_TotalCap += #$RESOURCE[Oxidizer]/maxAmount$
	@RS_TotalCap /= 5.327
	%RS_TankSpecificDryMass = 0.0003329375
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TotalCap[>0],~RS_TankType[],@RESOURCE[LqdHydrogen],@RESOURCE[Oxidizer],!RESOURCE[LiquidFuel],!RESOURCE[LqdMethane],!RESOURCE[Ore],!RESOURCE[XenonGas],!RESOURCE[ArgonGas],!RESOURCE[Lithium]]:NEEDS[CommunityResourcePack]:AFTER[RealismSimplified]
{
	RS_TankType = PropellantTank
	%RS_Tank_AddRocketPropellants = true
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TotalCap[>0],~RS_TankMetaType[],@RESOURCE[LqdHydrogen],@RESOURCE[Oxidizer],!RESOURCE[LiquidFuel],!RESOURCE[LqdMethane],!RESOURCE[Ore],!RESOURCE[XenonGas],!RESOURCE[ArgonGas],!RESOURCE[Lithium]]:NEEDS[CommunityResourcePack]:AFTER[RealismSimplified]
{
	RS_TankMetaType = Default
}

// Liquid methane + oxidizer
@PART[*]:HAS[~RS_IgnorePart[],~RS_TotalCap[],@RESOURCE[LqdMethane],@RESOURCE[Oxidizer],!RESOURCE[LiquidFuel],!RESOURCE[LqdHydrogen],!RESOURCE[Ore],!RESOURCE[XenonGas],!RESOURCE[ArgonGas],!RESOURCE[Lithium]]:NEEDS[CommunityResourcePack]:AFTER[RealismSimplified]
{
	RS_TotalCap = #$RESOURCE[LqdMethane]/maxAmount$
	@RS_TotalCap += #$RESOURCE[Oxidizer]/maxAmount$
	@RS_TotalCap /= 2.5
	%RS_TankSpecificDryMass = 0.000523628
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TotalCap[>0],~RS_TankType[],@RESOURCE[LqdMethane],@RESOURCE[Oxidizer],!RESOURCE[LiquidFuel],!RESOURCE[LqdHydrogen],!RESOURCE[Ore],!RESOURCE[XenonGas],!RESOURCE[ArgonGas],!RESOURCE[Lithium]]:NEEDS[CommunityResourcePack]:AFTER[RealismSimplified]
{
	RS_TankType = PropellantTank
	%RS_Tank_AddRocketPropellants = true
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TotalCap[>0],~RS_TankMetaType[],@RESOURCE[LqdMethane],@RESOURCE[Oxidizer],!RESOURCE[LiquidFuel],!RESOURCE[LqdHydrogen],!RESOURCE[Ore],!RESOURCE[XenonGas],!RESOURCE[ArgonGas],!RESOURCE[Lithium]]:NEEDS[CommunityResourcePack]:AFTER[RealismSimplified]
{
	RS_TankMetaType = Default
}

// Liquid hydrogen
@PART[*]:HAS[~RS_IgnorePart[],~RS_TotalCap[],@RESOURCE[LqdHydrogen],!RESOURCE[Oxidizer],!RESOURCE[LiquidFuel],!RESOURCE[LqdMethane],!RESOURCE[Ore],!RESOURCE[XenonGas],!RESOURCE[ArgonGas],!RESOURCE[Lithium]]:NEEDS[CommunityResourcePack]:AFTER[RealismSimplified]
{
	RS_TotalCap = #$RESOURCE[LqdHydrogen]/maxAmount$
	@RS_TotalCap /= 7.5
	%RS_TankSpecificDryMass = 0.000106275
	%RS_TankSpecificDryCost = 0.7
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TotalCap[>0],~RS_TankType[],@RESOURCE[LqdHydrogen],!RESOURCE[Oxidizer],!RESOURCE[LiquidFuel],!RESOURCE[LqdMethane],!RESOURCE[Ore],!RESOURCE[XenonGas],!RESOURCE[ArgonGas],!RESOURCE[Lithium]]:NEEDS[CommunityResourcePack]:AFTER[RealismSimplified]
{
	RS_TankType = PropellantTank
	%RS_Tank_AddRocketPropellants = true
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TotalCap[>0],~RS_TankMetaType[],@RESOURCE[LqdHydrogen],!RESOURCE[Oxidizer],!RESOURCE[LiquidFuel],!RESOURCE[LqdMethane],!RESOURCE[Ore],!RESOURCE[XenonGas],!RESOURCE[ArgonGas],!RESOURCE[Lithium]]:NEEDS[CommunityResourcePack]:AFTER[RealismSimplified]
{
	RS_TankMetaType = ZBO
}

// Xenon gas
@PART[*]:HAS[~RS_IgnorePart[],~RS_TotalCap[],@RESOURCE[XenonGas],!RESOURCE[LqdHydrogen],!RESOURCE[LqdMethane],!RESOURCE[Oxidizer],!RESOURCE[LiquidFuel]]:NEEDS[CommunityResourcePack]:AFTER[RealismSimplified]
{
	RS_TotalCap = #$RESOURCE[XenonGas]/maxAmount$
	@RS_TotalCap /= 15.75
	%RS_TankSpecificDryMass = 0.000525
	%RS_TankSpecificDryCost = 5.0
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TotalCap[>0],~RS_TankType[],@RESOURCE[XenonGas],!RESOURCE[LqdHydrogen],!RESOURCE[LqdMethane],!RESOURCE[Oxidizer],!RESOURCE[LiquidFuel]]:NEEDS[CommunityResourcePack]:AFTER[RealismSimplified]
{
	RS_TankType = PropellantTank
	%RS_Tank_AddGasPropellants = true
	%RS_Tank_AddNobleGases = true
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TotalCap[>0],~RS_TankMetaType[],@RESOURCE[XenonGas],!RESOURCE[LqdHydrogen],!RESOURCE[LqdMethane],!RESOURCE[Oxidizer],!RESOURCE[LiquidFuel]]:NEEDS[CommunityResourcePack]:AFTER[RealismSimplified]
{
	RS_TankMetaType = GasPropellants
}

// Argon gas
@PART[*]:HAS[~RS_IgnorePart[],~RS_TotalCap[],@RESOURCE[ArgonGas],!RESOURCE[LqdHydrogen],!RESOURCE[LqdMethane],!RESOURCE[Oxidizer],!RESOURCE[LiquidFuel]]:NEEDS[CommunityResourcePack]:AFTER[RealismSimplified]
{
	RS_TotalCap = #$RESOURCE[ArgonGas]/maxAmount$
	@RS_TotalCap /= 562.5
	%RS_TankSpecificDryMass = 0.000594667
	%RS_TankSpecificDryCost = 3.0
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TotalCap[>0],~RS_TankType[],@RESOURCE[ArgonGas],!RESOURCE[LqdHydrogen],!RESOURCE[LqdMethane],!RESOURCE[Oxidizer],!RESOURCE[LiquidFuel]]:NEEDS[CommunityResourcePack]:AFTER[RealismSimplified]
{
	RS_TankType = PropellantTank
	%RS_Tank_AddGasPropellants = true
	%RS_Tank_AddNobleGases = true
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TotalCap[>0],~RS_TankMetaType[],@RESOURCE[ArgonGas],!RESOURCE[LqdHydrogen],!RESOURCE[LqdMethane],!RESOURCE[Oxidizer],!RESOURCE[LiquidFuel]]:NEEDS[CommunityResourcePack]:AFTER[RealismSimplified]
{
	RS_TankMetaType = GasPropellants
}

// MonoPropellant
@PART[*]:HAS[~RS_IgnorePart[],@RESOURCE[MonoPropellant],#RS_TotalCap[>0]]:AFTER[RealismSimplified]
{
	@RS_TotalCap += #$RESOURCE[MonoPropellant]/maxAmount$
	%RS_TankType = PropellantTank
	%RS_TankMetaType = HP
	%RS_Tank_AddRocketPropellants = true
	%RS_Tank_AddGasPropellants = true
}
@PART[*]:HAS[~RS_IgnorePart[],@RESOURCE[MonoPropellant],~RS_TotalCap[]]:AFTER[RealismSimplified]
{
	RS_TotalCap = #$RESOURCE[MonoPropellant]/maxAmount$
	%RS_TankType = PropellantTank
	%RS_TankMetaType = HP
	%RS_Tank_AddRocketPropellants = true
	%RS_Tank_AddGasPropellants = true
}

// Ore
@PART[*]:HAS[~RS_IgnorePart[],~RS_TotalCap[],@RESOURCE[Ore],RESOURCE[LiquidFuel],!RESOURCE[Oxidizer],!RESOURCE[LqdHydrogen],!RESOURCE[LqdMethane],!RESOURCE[XenonGas],!RESOURCE[ArgonGas],!RESOURCE[Lithium]~RS_TankConfigured[]]:AFTER[RealismSimplified]
{
	RS_TotalCap = #$RESOURCE[Ore]/maxAmount$
	%RS_TankSpecificDryMass = 0.00133
	%RS_TankSpecificDryCost = 2.0
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TotalCap[>0],~RS_TankType[],@RESOURCE[Ore],RESOURCE[LiquidFuel],!RESOURCE[Oxidizer],!RESOURCE[LqdHydrogen],!RESOURCE[LqdMethane],!RESOURCE[XenonGas],!RESOURCE[ArgonGas],!RESOURCE[Lithium]~RS_TankConfigured[]]:AFTER[RealismSimplified]
{
	RS_TankType = ResourceContainer
	%RS_Tank_AddLifeSupportResources = true
	%RS_Tank_AddHarvestableResources = true
	%RS_Tank_AddISRUResources = true
}

// Tank has some B9PS modules with baseVolume - RS_TotalCap will be sum of all baseVolumes
@PART[*]:HAS[~RS_IgnorePart[],~RS_TotalCap[],@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]]]:NEEDS[B9PartSwitch]:FOR[zzzRealismSimplified]
{
	%RS_TotalCapFromB9PSModules = true
	RS_TotalCap = 0
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TotalCapFromB9PSModules[*rue],#RS_TotalCap[*],@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]]]:NEEDS[B9PartSwitch]:FOR[zzzRealismSimplified]
{
	@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0]],*
	{
		@/RS_TotalCap += #$baseVolume$
	}
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_TotalCap[],@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch],@SUBTYPE[LH2]:HAS[#tankType[LH2Cryo]]],#LH2[>0]]:NEEDS[B9PartSwitch]:FOR[zzzRealismSimplified]
{
	%RS_TotalCap = #$LH2$
	@RS_TotalCap /= 7.5
	%RS_TankSpecificDryMass = 0.000106275
	%RS_TankSpecificDryCost = 0.7
	%RS_TankType = PropellantTank
	%RS_TankMetaType = ZBO
}

// Propellants tanks
@PART[*]:HAS[~RS_IgnorePart[],~RS_TankType[],#RS_TotalCap[>0],@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0],@SUBTYPE[LF*]]]:FOR[zzzRealismSimplified]
{
	RS_TankType = PropellantTank
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_TankType[],#RS_TotalCap[>0],@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0],@SUBTYPE[Balloon*]]]:FOR[zzzRealismSimplified]
{
	RS_TankType = PropellantTank
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_TankType[],#RS_TotalCap[>0],@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0],@SUBTYPE:HAS[#tankType[*LFO*]]]]:FOR[zzzRealismSimplified]
{
	RS_TankType = PropellantTank
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TankType[PropellantTank*],~RS_TankHasVolumeVariants[*rue]]:FOR[zzzRealismSimplified]
{
	%RS_Tank_AddPressurizationSwitch = true
	%RS_Tank_AddTechLevelSwitch = true
	%RS_Tank_AddInsulationSwitch = true
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TankType[PropellantTank],~RS_TankMetaType[],#RS_TotalCap[>0],@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[>0],@SUBTYPE:HAS[#tankType[LH2Cryo]]]]:FOR[zzzRealismSimplified]
{
	RS_TankMetaType = ZBO
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TankType[PropellantTank],#RS_TankMetaType[Aviation],#skinMaxTemp[>2000],#RS_TotalCap[>0]]:FOR[zzzRealismSimplified]
{
	@RS_TankMetaType = Spaceplane
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TankType[PropellantTank],#RS_TankMetaType[Aviation],#maxTemp[>2000],#RS_TotalCap[>0]]:FOR[zzzRealismSimplified]
{
	@RS_TankMetaType = Spaceplane
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TankType[PropellantTank],~RS_TankMetaType[],#RS_TotalCap[>0]]:FOR[zzzRealismSimplified]
{
	RS_TankMetaType = Default
}

// Add appropriate propellants variants to propellant tanks
@PART[*]:HAS[~RS_IgnorePart[],#RS_TankType[PropellantTank],#RS_TankMetaType[Default],#RS_TotalCap[>0]]:FOR[zzzRealismSimplified]
{
	%RS_Tank_AddContentsSwitch = true
	%RS_Tank_AddRocketPropellants = true
	%RS_Tank_AddBasicRocketPropellants = false
	%RS_Tank_AddNobleGases = false
	%RS_Tank_AddGasPropellants = false
	%RS_Tank_AddPressurizationSwitch = true
	%RS_Tank_AddTechLevelSwitch = true
	%RS_Tank_AddInsulationSwitch = true
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TankType[PropellantTank],#RS_TankMetaType[Aviation],#RS_TotalCap[>0]]:FOR[zzzRealismSimplified]
{
	%RS_Tank_AddContentsSwitch = true
	%RS_Tank_AddRocketPropellants = true
	%RS_Tank_AddBasicRocketPropellants = false
	%RS_Tank_AddNobleGases = false
	%RS_Tank_AddGasPropellants = false
	%RS_Tank_AddPressurizationSwitch = true
	%RS_Tank_AddTechLevelSwitch = true
	%RS_Tank_AddInsulationSwitch = true
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TankType[PropellantTank],#RS_TankMetaType[Spaceplane],#RS_TotalCap[>0]]:FOR[zzzRealismSimplified]
{
	%RS_Tank_AddContentsSwitch = true
	%RS_Tank_AddRocketPropellants = true
	%RS_Tank_AddBasicRocketPropellants = false
	%RS_Tank_AddNobleGases = false
	%RS_Tank_AddGasPropellants = false
	%RS_Tank_AddPressurizationSwitch = true
	%RS_Tank_AddTechLevelSwitch = true
	%RS_Tank_AddInsulationSwitch = true
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TankType[PropellantTank],#RS_TankMetaType[ZBO],#RS_TotalCap[>0]]:FOR[zzzRealismSimplified]
{
	%RS_Tank_AddContentsSwitch = true
	%RS_Tank_AddRocketPropellants = true
	%RS_Tank_AddBasicRocketPropellants = false
	%RS_Tank_AddNobleGases = false
	%RS_Tank_AddGasPropellants = false
	%RS_Tank_AddPressurizationSwitch = true
	%RS_Tank_AddTechLevelSwitch = true
	%RS_Tank_AddInsulationSwitch = true
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TankType[PropellantTank],#RS_TankMetaType[HP],#RS_TotalCap[>0]]:FOR[zzzRealismSimplified]
{
	%RS_Tank_AddContentsSwitch = true
	%RS_Tank_AddRocketPropellants = true
	%RS_Tank_AddBasicRocketPropellants = false
	%RS_Tank_AddNobleGases = false
	%RS_Tank_AddGasPropellants = true
	%RS_Tank_AddPressurizationSwitch = true
	%RS_Tank_AddTechLevelSwitch = true
	%RS_Tank_AddInsulationSwitch = true
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TankType[PropellantTank],#RS_TankMetaType[GasPropellants],#RS_TotalCap[>0]]:FOR[zzzRealismSimplified]
{
	%RS_Tank_AddContentsSwitch = true
	%RS_Tank_AddRocketPropellants = false
	%RS_Tank_AddBasicRocketPropellants = false
	%RS_Tank_AddNobleGases = true
	%RS_Tank_AddGasPropellants = true
	%RS_Tank_AddPressurizationSwitch = false
	%RS_Tank_AddTechLevelSwitch = true
	%RS_Tank_AddInsulationSwitch = true
}
// Balloon fuel tanks
@PART[*]:HAS[~RS_IgnorePart[],#RS_TankType[PropellantTankBalloon],#RS_TotalCap[>0]]:FOR[zzzRealismSimplified]
{
	%RS_Tank_AddContentsSwitch = true
	%RS_Tank_AddNoTankVariant = false
	%RS_Tank_AddRocketPropellants = false
	%RS_Tank_AddBasicRocketPropellants = true
	%RS_Tank_AddNobleGases = false
	%RS_Tank_AddGasPropellants = false
	%RS_Tank_AddPressurizationSwitch = false
	%RS_Tank_AddTechLevelSwitch = false
	%RS_Tank_AddInsulationSwitch = false
}
// Shuttle fuel tanks
@PART[*]:HAS[~RS_IgnorePart[],#RS_TankType[PropellantTankShuttle],#RS_TotalCap[>0]]:FOR[zzzRealismSimplified]
{
	%RS_Tank_AddContentsSwitch = true
	%RS_Tank_AddNoTankVariant = false
	%RS_Tank_AddRocketPropellants = true
	%RS_Tank_AddBasicRocketPropellants = false
	%RS_Tank_AddNobleGases = false
	%RS_Tank_AddGasPropellants = false
	%RS_Tank_AddPressurizationSwitch = false
	%RS_Tank_AddTechLevelSwitch = false
	%RS_Tank_AddInsulationSwitch = true
}

// Tank has B9PS variants, changing it's volume
@PART[*]:HAS[~RS_IgnorePart[],~RS_TankHasVolumeVariants[],@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[*],@SUBTYPE:HAS[#volumeAdded[*]]]]:NEEDS[B9PartSwitch]:FOR[zzzRealismSimplified]
{
	RS_TankHasVolumeVariants = true
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_TankHasVolumeVariants[],@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume[*],@SUBTYPE:HAS[#volumeMultiplier[*]]]]:NEEDS[B9PartSwitch]:FOR[zzzRealismSimplified]
{
	RS_TankHasVolumeVariants = true
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_TankHasVolumeVariants[],@MODULE[ModuleB9PartSwitch]:HAS[@SUBTYPE:HAS[#volumeAddedToParent[*]]]]:NEEDS[B9PartSwitch]:FOR[zzzRealismSimplified]
{
	RS_TankHasVolumeVariants = true
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TankHasVolumeVariants[*rue]]:FOR[zzzRealismSimplified]
{
	%RS_Tank_AddPressurizationSwitch = false
	%RS_Tank_AddTechLevelSwitch = false
	%RS_Tank_AddInsulationSwitch = false
}

// Resource containers
@PART[*]:HAS[~RS_IgnorePart[],~RS_TankType[],~RS_TotalCap[],@RESOURCE[Water]:HAS[#maxAmount[>0]]]:NEEDS[CommunityResourcePack]:FOR[zzzRealismSimplified]
{
	RS_TankType = ResourceContainer
	RS_TotalCap = #$RESOURCE[Water]/maxAmount$
	@RS_TotalCap /= 5
	%RS_TankSpecificDryMass = 0.00133
	%RS_TankSpecificDryCost = 2.0
	%RS_Tank_AddContentsSwitch = true
	%RS_Tank_AddLifeSupportResources = true
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_TankType[],~RS_TotalCap[],@RESOURCE[Food]:HAS[#maxAmount[>0]]]:NEEDS[CommunityResourcePack]:FOR[zzzRealismSimplified]
{
	RS_TankType = ResourceContainer
	RS_TotalCap = #$RESOURCE[Food]/maxAmount$
	@RS_TotalCap /= 5
	%RS_TankSpecificDryMass = 0.00133
	%RS_TankSpecificDryCost = 2.0
	%RS_Tank_AddContentsSwitch = true
	%RS_Tank_AddLifeSupportResources = true
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_TankType[],~RS_TotalCap[],@RESOURCE[Supplies]:HAS[#maxAmount[>0]]]:NEEDS[CommunityResourcePack]:FOR[zzzRealismSimplified]
{
	RS_TankType = ResourceContainer
	RS_TotalCap = #$RESOURCE[Supplies]/maxAmount$
	@RS_TotalCap /= 5
	%RS_TankSpecificDryMass = 0.00133
	%RS_TankSpecificDryCost = 2.0
	%RS_Tank_AddContentsSwitch = true
	%RS_Tank_AddLifeSupportResources = true
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_TankType[],~RS_TotalCap[],@RESOURCE[Supplies]:HAS[#maxAmount[>0]]]:NEEDS[CommunityResourcePack]:FOR[zzzRealismSimplified]
{
	RS_TankType = ResourceContainer
	RS_TotalCap = #$RESOURCE[Supplies]/maxAmount$
	@RS_TotalCap /= 5
	%RS_TankSpecificDryMass = 0.00133
	%RS_TankSpecificDryCost = 2.0
	%RS_Tank_AddContentsSwitch = true
	%RS_Tank_AddLifeSupportResources = true
}

// Tank specific dry mass - in tons per one stock unit of volume
@PART[*]:HAS[~RS_IgnorePart[],#RS_TankType[PropellantTankBalloon],~RS_TankSpecificDryMass[],#RS_TotalCap[>0]]:FOR[zzzRealismSimplified]
{
	RS_TankSpecificDryMass = 0.00025
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TankType[ResourceContainer],~RS_TankSpecificDryMass[],#RS_TotalCap[>0]]:FOR[zzzRealismSimplified]
{
	RS_TankSpecificDryMass = 0.00133
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_TankSpecificDryMass[],#RS_TotalCap[>0],#maxTemp[>2000]]:FOR[zzzRealismSimplified]
{
	RS_TankSpecificDryMass = 0.0007125
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_TankSpecificDryMass[],#RS_TotalCap[>0]]:FOR[zzzRealismSimplified]
{
	RS_TankSpecificDryMass = 0.000625
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TankType[PropellantTankBalloon],~RS_TankSpecificDryCost[],#RS_TotalCap[>0]]:FOR[zzzRealismSimplified]
{
	RS_TankSpecificDryCost = 1.0
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_TankType[ResourceContainer],~RS_TankSpecificDryCost[],#RS_TotalCap[>0]]:FOR[zzzRealismSimplified]
{
	RS_TankSpecificDryCost = 2.0
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_TankSpecificDryCost[],#RS_TotalCap[>0],#maxTemp[>2000]]:FOR[zzzRealismSimplified]
{
	RS_TankSpecificDryCost = 1.0
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_TankSpecificDryCost[],#RS_TotalCap[>0]]:FOR[zzzRealismSimplified]
{
	RS_TankSpecificDryCost = 0.5
}

// Part mass ratio is a ratio of part mass to calculated stock mass of fuel tank in part (if part has any fuel tank)
// If RS_PartMassRatio is less or somewhere about 1.0, the part is basically nothing more than just a fuel tank (or resources tank of some kind)
// If RS_PartMassRatio is significantly higher than 1.0, fuel tank in part serve secondary role, and part is something more than just a fuel tank
@PART[*]:HAS[~RS_IgnorePart[],~RS_PartMassRatio[],#RS_TankSpecificDryMass[>0],#mass[>0],#RS_TotalCap[>0]]:FOR[zzzRealismSimplified]
{
	%RS_TankDryMass = #$RS_TotalCap$
	@RS_TankDryMass *= #$RS_TankSpecificDryMass$
	RS_PartMassRatio = #$mass$
	@RS_PartMassRatio /= #$RS_TankDryMass$
}

@PART[*]:HAS[~RS_IgnorePart[],~RS_TankDryCost[],#RS_TankSpecificDryCost[>0],#RS_TotalCap[>0]]:FOR[zzzRealismSimplified]
{
	%RS_TankDryCost = #$RS_TotalCap$
	@RS_TankDryCost *= #$RS_TankSpecificDryCost$
}

// Define RS_MassOffset and RS_CostOffset, if not already defined
@PART[*]:HAS[~RS_IgnorePart[],~RS_MassOffset[],#RS_TotalCap[>0]]:FOR[zzzRealismSimplified]
{
	RS_MassOffset = 0
}
@PART[*]:HAS[~RS_IgnorePart[],~RS_CostOffset[],#RS_TotalCap[>0]]:FOR[zzzRealismSimplified]
{
	RS_CostOffset = 0
}

// It's something more than just fuel tank
@PART[*]:HAS[~RS_IgnorePart[],#RS_PartMassRatio[>1.3],#RS_TankDryMass[>0],#RS_TotalCap[>0]]:FOR[zzzRealismSimplified]
{
	%RS_Tank_AddNoTankVariant = true
	@RS_MassOffset = #$mass$
	@RS_MassOffset -= #$RS_TankDryMass$
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_PartMassRatio[>1.3],#RS_TankDryMass[>0],#RS_TotalCap[>0],~RS_Tank_AddNoTankVariant[]]:FOR[zzzRealismSimplified]
{
	RS_Tank_AddNoTankVariant = true
	@RS_MassOffset = #$mass$
	@RS_MassOffset -= #$RS_TankDryMass$
}
@PART[*]:HAS[~RS_IgnorePart[],#RS_PartMassRatio[>1.3],#RS_TankDryCost[>0],#RS_TotalCap[>0]]:FOR[zzzRealismSimplified]
{
	@RS_CostOffset = #$cost$
	@RS_CostOffset -= #$RS_TankDryCost$
}
