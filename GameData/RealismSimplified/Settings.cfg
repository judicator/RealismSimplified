// =========================================================================
// RealismSimplified settings
// =========================================================================

@REALISM_SIMPLIFIED:FOR[0_RealismSimplified]
{
	// Remove all various temporary values from PARTs and MODULEs nodes after all patches have been applied.
	// Set to false for debug purposes.
	doCleanUp = false

	// Update titles and descriptions for engines.
	engines_TitlesUpdate = true
	engines_DescriptionsUpdate = true

	// If true, all engines marked as OMS (orbital maneuvering system) will be able to throttle down to zero (stock behavior).
	// It's recommended to keep this value as true, especially if you occasionally use autopilot mods (like MechJeb).
	simpleOMSEngines = true

	// If true, all LF engines marked as lower stage, upper stage and sustainer engines, will be able to throttle down to zero (stock behavior).
	// This can make your game much easier. Keeping setting as false is recommended in terms of realism and game balance.
	simpleLFEngines = false

	// If true, some engines will behave like presure-fed.
	// They will consume pressurization gas (Helium by default) in addition to usual propellants.
	// Such engines will require high-pressurized fuel tanks (which are much heavier than default tanks).
	pressureFedEngines = true

	// If true, all non-cold-gas RCS thruster variants will behave like presure-fed.
	// They will consume pressurization gas (Helium by default) in addition to usual propellants.
	// Such thrusters will require high-pressurized fuel tanks (which are much heavier than default tanks).
	pressureFedRCS = true

	// If both pressureFedEngines and pressureFedRCS are false, whole "high-pressurization" mechanic
	// will be disabled and high-pressurized tanks will not appear in tank variants.

	// Pressurization gas for pressure-fed engines and high-pressurized tanks.
	pressurizationGas = Helium
	pressurizationGas_Ratio = 200
	pressurizationGas_FlowMode = STAGE_PRIORITY_FLOW // used only for pressure-fed engines

	// If false, all AlcoLOX (Ethanol75 + LOX) rocket engines will be switched to KeroLOX, and
	// AlcoLOX option for fuel tanks contents will also be disabled.
	AlcoLOX_Engines = true

	// If false, all AvGas engines (for example, early propeller engines from AirPlanes+) will be switched to Kerosene, and
	// AvGas option for fuel tanks contents will also be disabled.
	AvGas_Engines = true

	// If true, engine alternators (electric charge generators) will be removed from all engines, except air-breathing ones.
	engines_RemoveAlternators = true

	// Hypergolics and MonoPropellant
	Hypergolics_Fuel = Aerozine50
	Hypergolics_Oxidizer = NTO
	MonoPropellant = Hydrazine

	// If false, there will be 4 switchable tech levels of batteries, tied to tech tree nodes
	simpleBatteries = false
	// Batteries balance
	batteries_CapacityCoeff = 10.0     // applies to all parts containing ElectricCharge, not only batteries
	batteries_MassCoeff = 1.0          // applies only to batteries
	batteries_CostCoeff = 1.0          // applies only to batteries

	// Batteries capacity coeffs for various tech levels
	// Will be used only if simpleBatteries is false
	batteryI_CapacityCoeff =   1.0
	batteryII_CapacityCoeff =  1.0
	batteryIII_CapacityCoeff = 1.5
	batteryIV_CapacityCoeff =  2.5

	// Batteries mass coeffs for various tech levels
	// Will be used only if simpleBatteries is false
	batteryI_MassCoeff =   1.15
	batteryII_MassCoeff =  1.0
	batteryIII_MassCoeff = 0.8
	batteryIV_MassCoeff =  0.85

	// Batteries cost coeffs for various tech levels
	// Will be used only if simpleBatteries is false
	batteryI_CostCoeff =   3.0
	batteryII_CostCoeff =  1.0
	batteryIII_CostCoeff = 1.2
	batteryIV_CostCoeff =  5.0

	// RTGs
	RTG_ECRatio_Coeff = 1.0
	RTG_costCoeff = 1.0
	// If false, RTGs will have 4 switchable isotope variants, tied to to tech tree nodes
	// Those isotope variants are:
	// - Polonium-210  - very short half-life (138 days), very high power density, lowest cost
	// - Strontium-90  - reasonable half-life (28.8 years) and power density, radioactive
	// - Plutonium-238 - long half-life (87.7 years), reasonable power density, very high cost
	// - Americium-241 - very long half-life (432 years), low power density, high cost
	simpleRTGs = false
	RTG_Po210_costCoeff = 1.0
	RTG_Sr90_costCoeff = 1.5
	RTG_Pu238_costCoeff = 7.5
	RTG_Am241_costCoeff = 2.5
	RTG_Po210_powerCoeff = 20.0
	RTG_Sr90_powerCoeff = 0.92
	RTG_Pu238_powerCoeff = 1.0
	RTG_Am241_powerCoeff = 0.21

	// Fuel cells
	fuelCells_ECRatio_Coeff = 1.0
	fuelCells_ResourcesFlowMode = STAGE_PRIORITY_FLOW
	fuelCells_HydrogenOxygen_Hydrogen_Ratio = 0.4246838843
	fuelCells_HydrogenOxygen_Oxygen_Ratio = 0.2180329617
	fuelCells_Hypergolics_Fuel_Ratio = 0.00025
	fuelCells_Hypergolics_Oxidizer_Ratio = 0.00025
	fuelCells_MonoPropellant_MonoProp_Ratio = 0.0002716212
	fuelCells_MonoPropellant_Oxygen_Ratio = 0.1934097325

	// Launch clamps can generate cryogenic propellants (LOX, LqdHydrogen, LqdMethane).
	// This can be used to prevent propellants boiloff while rocket awaits for launch window at the launchpad.
	// Or, it can be used for refueling your rocket for free =).
	launchClamps_GenerateCryogenicPropellants = true
	launchClamps_LOX_GenerationRate = 2.0
	launchClamps_LH2_GenerationRate = 8.0
	launchClamps_LqdMethane_GenerationRate = 2.0

	// Bluedod_DB is a massive mod, which on it's own adds more parts to the game, than game itself include (both DLCs counting).
	// No wonder there are some settings specifically for this behemoth.
	//
	// Should engine parts from Bluedog_DB mod keep their original titles (regardless of "engines_TitlesUpdate" setting)?
	bluedog_Engines_KeepTitles = true
	// Should engine parts from Bluedog_DB mod keep their original descriptions (regardless of "engines_DescriptionsUpdate" setting)?
	bluedog_Engines_KeepDescriptions = true
	// BluedogDB implements "BDB's SafeSolid™ system", allowing some SRBs to be shut down in flight,
	// allowing for more accurate orbital insertions and maneuvers.
	// It's not very realistic, so that feature is disabled by default.
	bluedog_RemoveSafeSolidSystem = true
	// There are several fuel tanks in BluedogDB mod with switchable volume variants.
	// If this setting is set to true, those fuel tanks will be split to different in-game parts. They will have
	// all RealismSimplified variants switches available, including tech level, insulation level, etc.
	// If set to false, those fuel tanks will remain as they are, and retain switchable volume variants.
	// However, tech level of those tanks will be hard preset, and only tank contents switch will be available for them.
	// You can safely switch this setting from true to false mid-campaign: created tanks will not be deleted,
	// but only hidden instead (so your crafts with such tanks will not be lost).
	bluedog_TreatFuelTanksWithVolumeVariantsAsSeparateParts = true

	//
	// Realism Simplified divides all configurable engines to several categories. They are:
	//
	// 1. SRB (type = SRB)
	//    Solid rocket boosters of any kind, be it small separation motors, or enormous Shuttle boosters.
	// 2. Nuclear engines (type = nuclear)
	//    Here and farther a "nuclear engines" understands as only nuclear-thermal engines (like NERVA or RD-0410),
	//    not some exotic design like NSWR or Orion pulse drive.
	// 3. Electric engines (type = electric)
	//    Include ion, plasma, arcjet and resistojet engines.
	// 4. Air-breathing engines (type = air_breathing)
	//    All engines, using IntakeAir or IntakeAtm propellants. Include jet engines, piston engines, turboprops and electric propellers.
	// 5. Liquid fuel rocket engines. Further divided to:
	// 5.1. Lower stage engines (type = lower_stage)
	//      Typically have high thrust and relatively low ISP, designed for booster applications.
	//      Examples: American LR89, H-1, F-1, Soviet RD-107, RD-253, NK-33.
	// 5.2. Sustainer engines (type = sustainer)
	//      Sustainer engines are something in between of lower stage and upper stage engines in terms of thrust and ISP.
	//      They are typically lit at the launchpad and burn almost all the way to orbit.
	//      Examples: American LR105, RS-27A, RS-25, Soviet RD-108, RD-0120, European Vulcain engine.
	// 5.3. Upper stage engines (type = upper_stage)
	//      Upper stage engines are designed to operate with little or no atmospheric pressure.
	//      They usually have high vacuum ISP and moderate thrust.
	//      Examples: American LR91, J-2, Soviet RD-0110, RD-0210, NK-43.
	// 5.4. OMS (orbital maneuvering systems) (type = OMS)
	//      It's a wide category, not very different from upper stage engines.
	//      However, as a rule of thumb, OMS engines have relatively low thrust, multiple (if not infinite) ignitions,
	//      and are designed specifically for vacuum applications.
	//      Examples: American XLR81, AJ10, RL-10 families, LMDE, LMAE, Soviet RD-58, RD-858, S5.92 and S5.98.
	//
	// Any other engines, not included in categories above, are ignored.
	//

	// Thrust balance - relative to realistic thrust values, not stock!
	LFEngines_ThrustCoeff = 1.0
	SRB_ThrustCoeff = 1.0
	lowerStageEngines_ThrustCoeff = 1.0      // applies on top of LFEngines_ThrustCoeff 
	upperStageEngines_ThrustCoeff = 1.0      // applies on top of LFEngines_ThrustCoeff
	sustainerEngines_ThrustCoeff = 1.0       // applies on top of LFEngines_ThrustCoeff
	OMSEngines_ThrustCoeff = 1.0             // applies on top of LFEngines_ThrustCoeff
	nuclearEngines_ThrustCoeff = 1.0
	electricEngines_ThrustCoeff = 1.0        // affects only engine thrust, EC consumption will remain the same
	electricEngines_ECConsumptionCoeff = 1.0 // affects EC consumption of electric engine
	airBreathingEngines_ThrustCoeff = 1.0

	// Engines gimbal response speed
	engines_UseGimbalResponseSpeed = true
	engines_GimbalResponseSpeed = 16         // applies to all liquid fuel and nuclear engines, if engines_UseGimbalResponseSpeed is true

	// Engines response time (not instant thrust adjustment)
	engines_UseResponseTime = true
	engines_ResponseTimeCoeff = 500             // applies to all non-pressure-fed liquid fuel and nuclear engines, if engines_UseResponseTime is true
	engines_PressureFed_ResponseTimeCoeff = 100 // applies to pressure-fed engines, if engines_UseResponseTime is true

	// Should all SRBs have the same minThrust (in percents of maxThrust)? If false, each SRB' minThrust could be configured individually.
	SRB_UniversalMinThrust = true
	SRB_MinThrustPercent = 50          // will be used if SRB_UniversalMinThrust = true

	// Mass and volume balance - relative to realistic mass values, not stock!
	// Engines
	LFEngines_MassCoeff = 1.0
	SRB_MassCoeff = 1.0
	SRB_SolidFuelAmountCoeff = 1.0
	lowerStageEngines_MassCoeff = 1.0 // applies on top of LFEngines_MassCoeff
	upperStageEngines_MassCoeff = 1.0 // applies on top of LFEngines_MassCoeff
	sustainerEngines_MassCoeff = 1.0  // applies on top of LFEngines_MassCoeff
	OMSEngines_MassCoeff = 1.0        // applies on top of LFEngines_MassCoeff
	nuclearEngines_MassCoeff = 1.0
	electricEngines_MassCoeff = 1.0
	airBreathingEngines_MassCoeff = 1.0

	// Coeff for additional structural mass for engines clusters and various thrust plates and engine adapters.
	// If you prefer to use structural adapters for multiple engines on rocket stage (instead of attaching engines directly to fuel tanks),
	// you should consider some low value for this coeff (like default, 0.1).
	// Together with propellantTanks_MassCoeff, it's a lever to fine-tune propellants tanks balance between engines adapter parts and tanks themselves.
	enginesClusters_StructuralMassCoeff = 0.1

	// All "tanks" (parts, containing switchable resources) are divided into two large categories:
	// - Propellant tanks - pressure vessels for liquid and gaseous resources.
	//    Include tanks for fuels and oxidizers (both low- and high-pressurized), tanks with various gases (for example, oxygen tanks for life support,
	//    xenon tanks for ion engines, nitrogen tanks for cold-gas thrusters, ammonia tanks for ISRU purposes, etc.).
	//    All propellant tanks are divided into 8 tech levels, plus two special categories (balloon and external shuttle tanks) atop of that.
	// - Resource containers - lightweight containers for storing solid (bulk) resources and materials, as well as fluids (but not under pressure).
	//    Examples include containers for ore/regolith, ice, spare parts, material kits, food, potable water, beverages, board games, waste resources, etc.
	propellantTanks_MassCoeff = 1.0
	propellantTanks_VolumeCoeff = 22.5    // 5 * 4.5
	resourceContainers_MassCoeff = 1.0
	resourceContainers_VolumeCoeff = 22.5 // 5 * 4.5

	// Various parts
	crewedParts_MassCoeff = 1.0
	inflatableCrewedParts_MassCoeff = 1.0 // apllies on top of crewedParts_MassCoeff. Not applies to extendable (not inflatable) centrifuges from SSPX
	solarPanels_MassCoeff = 1.0
	structuralParts_MassCoeff = 1.0
	heatShields_MassCoeff = 1.0           // applies only to heatshields (including inflatable), not capsules with ablator
	aerodynamicSurfaces_MassCoeff = 1.0   // applies to wings, winglets and control surfaces, but not to fuselages or other parts with ModuleLiftingSurface
	probes_MassCoeff = 1.0                // applies to uncrewed command modules

	// If true, engines prices (cost, entryCost and upgrades costs) will be rewritten by values from appropriate engine configs,
	// or automatically generated, if autoGenerateEnginesPrices is true
	overrideEnginesPrices = true

	// If true, engines prices (cost, entryCost and upgrades costs) will be auto-generated, based on engines parameters
	// By default applies only to not-configured engines, see next setting
	autoGenerateEnginesPrices = true
	// If true, and autoGenerateEnginesPrices is true, engines prices (see setting above) will be autogenerated for
	// all configured engines (those engines having engine model explicitly set), otherwise prices will be taken from appropriate engine config
	autoGenerateEnginesPrices_ForConfiguredEngines = false
	// Cost coeff for multimode engines
	autoGenerateEnginesPrices_MultiModeEngines_CostCoeff = 1.5
	// Lower stage engine prices are generated as follows:
	// cost = ISPCoeff * (((ISP(vacuum, s) + ISP(sea level, s)) / (2 * ISPCoeff)) ^ ISPPower)  * (2 * MaxThrust(vacuum, KN) - MinThrust(vacuum, KN)) * CostCoeff / 10 + BaseCost
	// upgradeCost = cost * UpgradeCostCoeff
	// entryCost = cost * EntryCostCoeff
	autoGenerateEnginesPrices_LowerStage_CostCoeff = 0.2
	autoGenerateEnginesPrices_LowerStage_BaseCost = 200
	autoGenerateEnginesPrices_LowerStage_ISPCoeff = 310
	autoGenerateEnginesPrices_LowerStage_ISPPower = 3.0
	autoGenerateEnginesPrices_LowerStage_EntryCostCoeff = 10
	autoGenerateEnginesPrices_LowerStage_UpgradeCostCoeff = 5
	// Sustainer engine prices are generated as follows:
	// cost = ISPCoeff * (((ISP(vacuum, s) + ISP(sea level, s)) / (2 * ISPCoeff)) ^ ISPPower)  * (2 * MaxThrust(vacuum, KN) - MinThrust(vacuum, KN)) * CostCoeff / 10 + BaseCost
	// upgradeCost = cost * UpgradeCostCoeff
	// entryCost = cost * EntryCostCoeff
	autoGenerateEnginesPrices_Sustainer_CostCoeff = 0.2
	autoGenerateEnginesPrices_Sustainer_BaseCost = 200
	autoGenerateEnginesPrices_Sustainer_ISPCoeff = 320
	autoGenerateEnginesPrices_Sustainer_ISPPower = 3.0
	autoGenerateEnginesPrices_Sustainer_EntryCostCoeff = 10
	autoGenerateEnginesPrices_Sustainer_UpgradeCostCoeff = 5
	// Upper stage engine prices are generated as follows:
	// cost = ISPCoeff * ((ISP(vacuum, s) / ISPCoeff) ^ ISPPower)  * (2 * MaxThrust(vacuum, KN) - MinThrust(vacuum, KN)) * CostCoeff / 10 + BaseCost
	// upgradeCost = cost * UpgradeCostCoeff
	// entryCost = cost * EntryCostCoeff
	autoGenerateEnginesPrices_UpperStage_CostCoeff = 0.2
	autoGenerateEnginesPrices_UpperStage_BaseCost = 150
	autoGenerateEnginesPrices_UpperStage_ISPCoeff = 335
	autoGenerateEnginesPrices_UpperStage_ISPPower = 3.0
	autoGenerateEnginesPrices_UpperStage_EntryCostCoeff = 10
	autoGenerateEnginesPrices_UpperStage_UpgradeCostCoeff = 5
	// OMS engines prices are generated as follows:
	// cost = ISPCoeff * ((ISP(vacuum, s) / ISPCoeff) ^ ISPPower) * MaxThrust(vacuum, KN) * PressureFedCostCoeff * (IgnitionsCount ^ IgnitionsPower) * CostCoeff + BaseCost
	// upgradeCost = cost * UpgradeCostCoeff
	// entryCost = cost * EntryCostCoeff
	autoGenerateEnginesPrices_OMS_CostCoeff = 0.2
	autoGenerateEnginesPrices_OMS_BaseCost = 25
	autoGenerateEnginesPrices_OMS_PressureFedCostCoeff = 0.5
	autoGenerateEnginesPrices_OMS_ISPCoeff = 350
	autoGenerateEnginesPrices_OMS_ISPPower = 2.5
	autoGenerateEnginesPrices_OMS_InfiniteIgnitionsFiniteEquivalent = 100
	autoGenerateEnginesPrices_OMS_IgnitionsPower = 0.1
	autoGenerateEnginesPrices_OMS_EntryCostCoeff = 10
	autoGenerateEnginesPrices_OMS_UpgradeCostCoeff = 5
	// Nuclear engines prices are generated as follows:
	// cost = ISPCoeff * ((ISP(vacuum, s) / ISPCoeff) ^ ISPPower) * (MaxThrust(vacuum, KN) ^ ThrustPower) * ((MaxThrust(vacuum, KN) / (EngineMass(t) * 9.81)) ^ TWRPower) * (IgnitionsCount ^ IgnitionsPower) * CostCoeff + BaseCost
	// upgradeCost = cost * UpgradeCostCoeff
	// entryCost = cost * EntryCostCoeff
	autoGenerateEnginesPrices_Nuclear_CostCoeff = 0.2
	autoGenerateEnginesPrices_Nuclear_BaseCost = 25000
	autoGenerateEnginesPrices_Nuclear_ISPCoeff = 1000
	autoGenerateEnginesPrices_Nuclear_ISPPower = 0.5
	autoGenerateEnginesPrices_Nuclear_TWRPower = 0.5
	autoGenerateEnginesPrices_Nuclear_ThrustPower = 0.9
	autoGenerateEnginesPrices_Nuclear_InfiniteIgnitionsFiniteEquivalent = 100
	autoGenerateEnginesPrices_Nuclear_IgnitionsPower = 0.05
	autoGenerateEnginesPrices_Nuclear_EntryCostCoeff = 15
	autoGenerateEnginesPrices_Nuclear_UpgradeCostCoeff = 5
	// Air-breathing engines prices are generated as follows:
	// cost = (((ISPCoeff * ((ISP(s) / ISPCoeff) ^ ISPPower) * BaseMaxThrust(KN) * (MachLimit[*] ^ MachLimitPower) * Multiplier * CostCoeff) / unconfiguredEngines_AirBreathing_ThrustCoeff) + BaseCost
	// [*] Minimum mach limit value for calculations is 0.7, maximum is 10.0, default value (if not set) is 5.0
	// upgradeCost = cost * UpgradeCostCoeff
	// entryCost = cost * EntryCostCoeff
	autoGenerateEnginesPrices_AirBreathing_CostCoeff = 0.2
	autoGenerateEnginesPrices_AirBreathing_BaseCost = 100
	autoGenerateEnginesPrices_AirBreathing_ISPCoeff = 6600
	autoGenerateEnginesPrices_AirBreathing_ISPPower = 0.1
	autoGenerateEnginesPrices_AirBreathing_MachLimitPower = 1.8
	autoGenerateEnginesPrices_AirBreathing_DefaultMachLimit = 5
	autoGenerateEnginesPrices_AirBreathing_Multiplier = 0.015
	autoGenerateEnginesPrices_AirBreathing_EntryCostCoeff = 10
	autoGenerateEnginesPrices_AirBreathing_UpgradeCostCoeff = 5
	// SRBs prices are generated as follows:
	// cost = ((((ISP(vacuum, s) / ISPCoeff) ^ ISPPower) * MaxThrust(vacuum, KN) * ((Full SRB mass / Dry SRB mass) ^ MassRatioPower) * CostCoeff + Solid fuel cost + BaseCost
	// upgradeCost = cost * UpgradeCostCoeff
	// entryCost = cost * EntryCostCoeff
	autoGenerateEnginesPrices_SRB_CostCoeff = 1.0
	autoGenerateEnginesPrices_SRB_BaseCost = 10
	autoGenerateEnginesPrices_SRB_ISPCoeff = 260
	autoGenerateEnginesPrices_SRB_ISPPower = 3
	autoGenerateEnginesPrices_SRB_MassRatioPower = 0.5
	autoGenerateEnginesPrices_SRB_EntryCostCoeff = 10
	autoGenerateEnginesPrices_SRB_UpgradeCostCoeff = 5
	// Electric engines prices are generated as follows:
	// cost = (ISP(vacuum, s) * ((ISP(vacuum, s) / ISPCoeff) ^ ISPPower) * (MaxThrust(vacuum, KN) ^ ThrustPower) * ((MaxThrust(vacuum, KN) * 9.81 / (EC/sec)) ^ ThrustECRatioPower)) * CostCoeff + BaseCost
	// upgradeCost = cost * UpgradeCostCoeff
	// entryCost = cost * EntryCostCoeff
	autoGenerateEnginesPrices_Electric_CostCoeff = 2.0
	autoGenerateEnginesPrices_Electric_BaseCost = 1000
	autoGenerateEnginesPrices_Electric_ISPCoeff = 5000
	autoGenerateEnginesPrices_Electric_ISPPower = 1.5
	autoGenerateEnginesPrices_Electric_ThrustPower = 0.8
	autoGenerateEnginesPrices_Electric_ThrustECRatioPowerPower = 1.5
	autoGenerateEnginesPrices_Electric_EntryCostCoeff = 15
	autoGenerateEnginesPrices_Electric_UpgradeCostCoeff = 5

	// Prices balance
	// Engines
	LFEngines_CostCoeff = 1.0
	SRB_CostCoeff = 1.0
	lowerStageEngines_CostCoeff = 1.0     // applies on top of LFEngines_CostCoeff
	upperStageEngines_CostCoeff = 1.0     // applies on top of LFEngines_CostCoeff
	sustainerEngines_CostCoeff = 1.0      // applies on top of LFEngines_CostCoeff
	OMSEngines_CostCoeff = 1.0            // applies on top of LFEngines_CostCoeff
	nuclearEngines_CostCoeff = 1.0
	electricEngines_CostCoeff = 1.0
	airBreathingEngines_CostCoeff = 1.0
	// Resources
	propellants_CostCoeff = 1.0           // applies to liquid fuels, oxidizers and monopropellant (hydrazine)
	gases_CostCoeff = 1.0                 // applies to abundant gases (nitrogen, oxygen, methane, hydrogen, CO2, etc.)
	nobleGases_CostCoeff = 1.0            // applies to noble gases (xenon, argon, krypton, etc.)
	supplies_CostCoeff = 1.0              // applies to supplies (water, food, various chemicals for life support (LiOH), etc.)
	solidFuel_CostCoeff = 0.238           // ~ 1 / 4.2
	// Tanks (dry costs)
	propellantTanks_CostCoeff = 1.0
	resourceContainers_CostCoeff = 1.0
	// Various parts
	crewedParts_CostCoeff = 1.0
	inflatableCrewedParts_CostCoeff = 1.0 // apllies on top of crewedParts_CostCoeff. Not applies to extendable (not inflatable) centrifuges from SSPX
	solarPanels_CostCoeff = 1.0
	structuralParts_CostCoeff = 1.0
	heatShields_CostCoeff = 1.0           // applies only to heatshields (including inflatable), not capsules with ablator
	aerodynamicSurfaces_CostCoeff = 1.0   // applies to wings, winglets and control surfaces, but not to fuselages or other parts with ModuleLiftingSurface
	probes_CostCoeff = 1.0                // applies to uncrewed command modules

	// Aerodynamic lift coeffs (not applied if FAR is installed) - TODO: check if that's really true
	// Multipliers for deflectionLiftCoeff parameter for ModuleLiftingSurface on various parts categories
	aerodynamic_Wings_LiftCoeff = 2.0
	aerodynamic_ControlSurfaces_LiftCoeff = 2.0
	aerodynamic_Fuselages_LiftCoeff = 2.0                // including cargo bays with ModuleLiftingSurface
	aerodynamic_Heatshields_LiftCoeff = 2.0              // including inflatable heatshield
	aerodynamic_CommandModules_LiftCoeff = 2.0

	// If true, heatshields will have variant switcher for Center of Pressure (CoP) position: default or offset (for aerodynamic reentry)
	heatShields_AddCoPOffsetVariant = true

	// How fast ablator will burn out? Applies to all parts with ModuleAblator
	ablator_PyrolysisLossFactorCoeff = 4.0

	// Propellant tanks with built-in solid rocket booster
	propellantTanks_RetroBooster_ThrustCoeff = 1.0          // maxThrust of built-in SRB is multiplied by this coeff
	propellantTanks_RetroBooster_SolidFuelAmountCoeff = 1.0 // SolidFuel amount in built-in SRB is multiplied by this coeff
	// Added mass and cost are calculated, using built-in SRB maxThrust
	propellantTanks_RetroBooster_MassCoeff = 0.0005         // tons, per KN of built-in SRB maxThrust
	propellantTanks_RetroBooster_CostCoeff = 4.0            // credits, per KN of built-in SRB maxThrust

	// Base tanks mass and cost
	// Values are in metric tons/1 stock unit of tank volume for mass, and credits/1 stock unit of tank volume for cost
//	propellantTanks_BaseMass = 0.00098
	propellantTanks_BaseMass = 0.0007
	propellantTanks_BaseCost = 0.2
	resourceContainers_BaseMass = 0.0001138
	resourceContainers_BaseCost = 0.8

	// Propellants tanks tech levels are:
	//
	// I     Steel Fuselages:                Early sounding rockets like V-2
	// II    Aluminium Fuselages:            Viking sounding rocket, N-1 soviet rocket
	// III   Aluminium Skin-Stringer Tanks:  Soviet rocket families R-5, R-7 (Soyuz), R-9 and Proton
	// IV    Duralumin Skin-Stringer Tanks:  Saturn V first stage (S-IC)
	// V     Aluminium Gridded Tanks:        American rocket families Thor/Delta, Titan, Agena; Saturn I and Saturn V upper stages; Energia soviet rocket 
	// VI    Al-Li Skin-Stringer Tanks:      no real examples except Shuttle External Tanks, but Shuttle tanks use their own tech level
	// VII   Al-Li Gridded Tanks:            Atlas V CCB, Delta IV CBC and DCSS, SLS core, Vulcan core
	// VIII  Carbon Composite Tanks:         only Electron light rocket now, possibly more launch vehicles in the future
	//
	//       Balloon Tanks:                  Atlas I tanks: did not use an internal framework, but instead
	//                                       relied on a positive internal pressurization to keep its shape.
	//                                       Balloon tanks are very light, but has some in-game restrictions and drawbacks
	//                                       (lower maxTemp, limited list of propellants, lower durability, high cost)
	//       Shuttle External Tanks:         very large tanks with exceptional propellant mass fraction. Like balloon tanks, has some in-game drawbacks
	//
	// Keep in mind, that correlation "tank tech level" - "launch vehicles" is conventional, and in some cases, in order to construct accurate
	// replica of some launch vehicle, you could consider choosing adjacent fuel tank tech.
	// After all, tank tech level affects only it's dry mass and cost, nothing more.

	// Propellants tanks dry mass coeffs for various tech levels
	propellantTanks_I_MassCoeff       = 4.5
	propellantTanks_II_MassCoeff      = 2.5
	propellantTanks_III_MassCoeff     = 1.68
	propellantTanks_IV_MassCoeff      = 1.25
	propellantTanks_V_MassCoeff       = 1.0
	propellantTanks_VI_MassCoeff      = 0.9
	propellantTanks_VII_MassCoeff     = 0.65
	propellantTanks_VIII_MassCoeff    = 0.55
	propellantTanks_Balloon_MassCoeff = 0.5
//	propellantTanks_Shuttle_MassCoeff = 0.45
	propellantTanks_Shuttle_MassCoeff = 0.4

	// Propellants tanks cost coeffs for various tech levels
	propellantTanks_I_CostCoeff       = 0.45
	propellantTanks_II_CostCoeff      = 0.52
	propellantTanks_III_CostCoeff     = 0.6
	propellantTanks_IV_CostCoeff      = 0.7
	propellantTanks_V_CostCoeff       = 1.0
	propellantTanks_VI_CostCoeff      = 1.1
	propellantTanks_VII_CostCoeff     = 1.75
	propellantTanks_VIII_CostCoeff    = 2.2
	propellantTanks_Balloon_CostCoeff = 2.5
	propellantTanks_Shuttle_CostCoeff = 3.0

	// High-pressurized tanks variant
	propellantTanks_HP_MassCoeff     = 3.2
	propellantTanks_HP_CostCoeff     = 1.05

	// Additional params for balloon tanks (Atlas I)
	propellantTanks_Balloon_MaxTemp = 1500
	propellantTanks_Balloon_SkinMaxTemp = 1500
	propellantTanks_Balloon_CrashTolerance = 3
	propellantTanks_Balloon_BreakingForce = 50
	propellantTanks_Balloon_BreakingTorque = 50

	// Additional params for Shuttle External Tanks
	propellantTanks_Shuttle_MaxTemp = 1500
	propellantTanks_Shuttle_SkinMaxTemp = 1500
	propellantTanks_Shuttle_CrashTolerance = 4
	propellantTanks_Shuttle_BreakingForce = 100
	propellantTanks_Shuttle_BreakingTorque = 100

	// Propellants tanks upgrades costs
	propellantTanks_II_UpgradeCost      = 4000
	propellantTanks_III_UpgradeCost     = 8000
	propellantTanks_IV_UpgradeCost      = 16000
	propellantTanks_V_UpgradeCost       = 64000
	propellantTanks_VI_UpgradeCost      = 125000
	propellantTanks_VII_UpgradeCost     = 250000
	propellantTanks_VIII_UpgradeCost    = 500000

	// Balloon tanks surface attachment
	propellantTanks_Balloon_DisableSurfaceAttachment = false


	// It's no longer true:
	// Wings with built-in fuel tanks have no tech level switcher, instead they use fixed coefficients to determine their built-in fuel tank mass and cost
	//	propellantTanks_Wings_MassCoeff = 1.5  // somewhere in between of Al and DurAl Skin-Stringer Tanks
	//	propellantTanks_Wings_CostCoeff = 0.65 // somewhere in between of Al and DurAl Skin-Stringer Tanks

	// Various gases are stored at different pressures
	// It's basically a multiplier for gas amount inside tank, applied on top of propellantTanks_VolumeCoeff
	//
	// Storing H2 at 700 bars is only 89% as mass effective as storing LqdHydrogen (by propellants mass / dry tank mass ratio). But hydrogen gas has no boilooff.
	propellantTanks_HydrogenStoredAtPressure = 700     // in bars
	// Storing methane at 400 bars is only 67% as mass effective as storing LqdMethane (by propellants mass / dry tank mass ratio). But methane gas has no boilooff.
	propellantTanks_MethaneStoredAtPressure = 400      // in bars
	// Storing O2 at 200 bars is only 25% as mass effective as storing LOX (by propellants mass / dry tank mass ratio). But oxygen gas has no boilooff.
	propellantTanks_OxygenStoredAtPressure = 200       // in bars
	propellantTanks_CarbonDioxideStoredAtPressure = 60 // in bars
	propellantTanks_NitrogenStoredAtPressure = 180     // in bars
//	propellantTanks_XenonStoredAtPressure = 85         // in bars (should stock XenonGas poccess realistic density, which it doesn't)
	// Storing Xenon at 4.3555 bars is only 14.7% as mass effective as storing LqdXenon (by propellants mass / dry tank mass ratio). But xenon gas has no boilooff.
	propellantTanks_XenonStoredAtPressure = 4.3555     // in bars
	// Storing Argon at 68 bars is only 8.7% as mass effective as storing LqdArgon (by propellants mass / dry tank mass ratio). But argon gas has no boilooff.
	propellantTanks_ArgonStoredAtPressure = 68         // in bars

	// Boiloff insulation mechanics - depends on CryoTanks mod and will be disabled without CryoTanks.
	// Only zero-boiloff (ZBO) tanks can be cooled now at the cost of EC, and they are moved futher away in technology tree.
	// All other tanks WILL lose some cryogenic propellants as time passes,
	// you can only slow this process down by adding some boiloff insulation.
	// Calculations were made for Block-D (typical KeroLOX upper stage) and Centaur V (typical HydroLOX upper stage).
	// Earth days (24-hours) are used.
	// Typical space mission durations:
	// - 6 hours   - typical insertion time into geostationary orbit;
	// - 3 days    - lunar parking orbit burn after low-energy Hohmann transfer from Earth to Moon;
	// - 1 month   - trans-Earth injection burn after typical (?) mid-game Lunar mission;
	// - 9 months  - Mars parking orbit burn upon Mars SOI arrival (assuming low-energy Hohmann transfer from Earth to Mars);
	// - 26 months - trans-Earth injection burn from Mars parking orbit after approx. 500 days on Mars (assuming low-energy Hohmann transfer from Mars to Earth).
	//
	// No boiloff insulation gives:
	// - KeroLOX:   5% of delta-V loss due to boiloff in 6 hours, complete LOX boiloff in approximately a week;
	// - HydroLOX:  10% of delta-V loss due to boiloff in 1 hour, complete LH2 boiloff in approximately 14 hours.
	//
	// Boiloff insulation level 1 gives:
	// - KeroLOX:   5% of delta-V loss due to boiloff in 3 days, complete LOX boiloff in approximately 3 months;
	// - HydroLOX:  5% of delta-V loss due to boiloff in 6 hours, 50% delta-V loss in 3 days, and complete LH2 boiloff in approximately a week.
	//
	// Boiloff insulation level 2 gives:
	// - KeroLOX:   5% of delta-V loss due to boiloff in a month, complete LOX boiloff in approximately 25 months;
	// - HydroLOX:  5% of delta-V loss due to boiloff in 3 days, 50% delta-V loss in a month, and complete LH2 boiloff in approximately 3 months.
	//
	// Boiloff insulation level 3 gives:
	// - KeroLOX:   5% of delta-V loss due to boiloff in 9 months, 13.6% of delta-V loss in 26 months;
	// - HydroLOX:  5% of delta-V loss due to boiloff in 2 months, 20% delta-V loss in 9 months, 50% delta-V loss in 26 months.
	//
	// Zero-boiloff (ZBO) fuels tanks:
	// - In terms of additional mass and thermal insulation level they lie somewhere in between insulation levels 2 and 3;
	// - ZBO tanks can store cryogenic propellants for indefinite time, preventing boiloff completely at the cost of electricity.
	//
	// TLDR:
	// - Boiloff insulation is not really needed for any lower/mid stages of launch vehicles (burning up to 10 minutes since launch);
	// - Cryogenic upper stages, intended to be burned anywhere beyond low Earth/Kerbin orbit, or after hours after launch, should have some boiloff insulation;
	// - KeroLOX upper stages could be a viable choice even for martian missions (up to 2 years), if equipped with maximum boiloff insulation (level 3);
	// - HydroLOX upper stages even with maximum insulation (level 3) are not really a viable choice for missions beyond Earth/Kerbin SOI;
	// - Zero-boiloff fuel tanks are a must have for any long-term deep space missions, using Lqd.Hydrogen as a propellant.

	// Fuel tanks dry mass coeffs for various boiloff insulation levels
	propellantTanks_Insulation1_MassCoeff = 1.02
	propellantTanks_Insulation2_MassCoeff = 1.1
	propellantTanks_Insulation3_MassCoeff = 1.35
	propellantTanks_ZBO_MassCoeff         = 1.2

	// Fuel tanks cost coeffs for various boiloff insulation levels
	propellantTanks_Insulation1_CostCoeff = 1.2
	propellantTanks_Insulation2_CostCoeff = 1.4
	propellantTanks_Insulation3_CostCoeff = 1.6
	propellantTanks_ZBO_CostCoeff         = 1.5

	// Propellants tanks insulation upgrades
	propellantTanks_Insulation1_UpgradeCost = 4000
	propellantTanks_Insulation2_UpgradeCost = 15000
	propellantTanks_Insulation3_UpgradeCost = 50000
	propellantTanks_ZBO_UpgradeCost         = 250000

	// Boiloff rates
	boiloffRate_NoInsulation = 0.88          // base boiloff rate
	boiloffRate_Insulation1_Coeff = 0.083
	boiloffRate_Insulation2_Coeff = 0.00695
	boiloffRate_Insulation3_Coeff = 0.00032
	boiloffRate_ZBO_Coeff         = 0.005
	// Specific propellants boiloff rates
	boiloffRate_LH2 = 7.9
	boiloffRate_LqdMethane = 1.0
	boiloffRate_LOX = 1.0
	boiloffRate_LqdAmmonia = 0.1
	boiloffRate_LqdArgon = 0.1
	boiloffRate_LqdXenon = 0.1
	boiloffRate_LqdHe3 = 2.0
	boiloffRate_LqdDeuterium = 7.9
	// In EC/sec per 1000 units of propellant
	propellantTanks_ZBO_CoolingCost = 0.002
	// % of propellant mass, which is converted to gas during boiloff (remainder will be lost)
	boiloffRate_GasGenerationPercent = 50
	// Flow mode for gas, generated during boiloff
	boiloffRate_GasFlowMode = STAGE_STACK_FLOW_BALANCE

	// SystemHeat boiloff settings
	//
	// SystemHeat loop volume for tank (in m3) is determined from tank volume (in stock units)
	SHBoiloff_LoopVolumeCoeff = 0.0003125
	// 
	SHBoiloff_LH2_CoolingHeatCost = 0.3
	SHBoiloff_LH2_CryoCoolerTemperature = 300
	// 
	SHBoiloff_LqdMethane_CoolingHeatCost = 0.15
	SHBoiloff_LqdMethane_CryoCoolerTemperature = 400
	// 
	SHBoiloff_LOX_CoolingHeatCost = 0.3
	SHBoiloff_LOX_CryoCoolerTemperature = 300
	// 
	SHBoiloff_LqdAmmonia_CoolingHeatCost = 0.3
	SHBoiloff_LqdAmmonia_CryoCoolerTemperature = 300
	// 
	SHBoiloff_LqdArgon_CoolingHeatCost = 0.3
	SHBoiloff_LqdArgon_CryoCoolerTemperature = 300
	// 
	SHBoiloff_LqdXenon_CoolingHeatCost = 0.3
	SHBoiloff_LqdXenon_CryoCoolerTemperature = 300
	// 
	SHBoiloff_LqdHe3_CoolingHeatCost = 0.22
	SHBoiloff_LqdHe3_CryoCoolerTemperature = 350
	// 
	SHBoiloff_LqdDeuterium_CoolingHeatCost = 0.25
	SHBoiloff_LqdDeuterium_CryoCoolerTemperature = 300

	//
	// RCS
	//
	// If true, by default all RCS modules on parts will be not active and will activate on staging
	RCS_Stageable = true
	RCS_PropellantsFlowMode = STAGE_PRIORITY_FLOW    // used for all RCS propellants, including pressurization gas (if applicable)
	RCS_DefaultVariant = BiPropellant1
	RCS_ThrustCoeff = 0.5                            // applies to all RCS thrusters
	// Propellant tank with ModuleRCS*
	// If propellant tank has RCS module(s), all volume will be dedicated to RCS propellants
	// (and will switch it's contents with RCS variant), but only if total tank volume is less than this threshold
	// Otherwise propellant tank will have all relevant switchers by itself, not tied to RCS variants switch
	RCS_CombinedWithFuelTank_Volume_Threshold = 201

	// RCS variants
	// BiPropellant RCS variant 1
	RCS_BiPropellant1_Propellants = Hypergolics
	RCS_BiPropellant1_Title = #LOC_RS_RCS_BiPropellant_Hypergolics_title
	RCS_BiPropellant1_Description = #LOC_RS_RCS_BiPropellant_Hypergolics_desc
	RCS_BiPropellant1_ISP_Vac = 312
	RCS_BiPropellant1_ISP_SL = 118
	RCS_BiPropellant1_Thrust_Coeff = 1.0
	RCS_BiPropellant1_EC_PerKN = 0.0
	RCS_BiPropellant1_PressureFed = true
	RCS_BiPropellant1_UpgradeRequired = RS_HypergolicBipropellant_RCS_Upgrade
	RCS_BiPropellant1_PropellantsVolumeRatio = 1.0
	// BiPropellant RCS variant 2
	RCS_BiPropellant2_Propellants = MethaLOX
	RCS_BiPropellant2_Title = #LOC_RS_RCS_BiPropellant_MethaLOX_title
	RCS_BiPropellant2_Description = #LOC_RS_RCS_BiPropellant_MethaLOX_desc
	RCS_BiPropellant2_ISP_Vac = 328
	RCS_BiPropellant2_ISP_SL = 174
	RCS_BiPropellant2_Thrust_Coeff = 0.8
	RCS_BiPropellant2_EC_PerKN = 1.0
	RCS_BiPropellant2_PressureFed = true
	RCS_BiPropellant2_UpgradeRequired = RS_MethaLOX_RCS_Upgrade
	RCS_BiPropellant2_PropellantsVolumeRatio = 1.0
	// BiPropellant RCS variant 3
	RCS_BiPropellant3_Propellants = HydroLOX
	RCS_BiPropellant3_Title = #LOC_RS_RCS_BiPropellant_HydroLOX_title
	RCS_BiPropellant3_Description = #LOC_RS_RCS_BiPropellant_HydroLOX_desc
	RCS_BiPropellant3_ISP_Vac = 410
	RCS_BiPropellant3_ISP_SL = 217
	RCS_BiPropellant3_Thrust_Coeff = 0.6
	RCS_BiPropellant3_EC_PerKN = 0.5
	RCS_BiPropellant3_PressureFed = true
	RCS_BiPropellant3_UpgradeRequired = RS_HydroLOX_RCS_Upgrade
	RCS_BiPropellant3_PropellantsVolumeRatio = 1.0
	// BiPropellant RCS variant 4
	RCS_BiPropellant4_Propellants = KeroLOX
	RCS_BiPropellant4_Title = #LOC_RS_RCS_BiPropellant_KeroLOX_title
	RCS_BiPropellant4_Description = #LOC_RS_RCS_BiPropellant_KeroLOX_desc
	RCS_BiPropellant4_ISP_Vac = 295
	RCS_BiPropellant4_ISP_SL = 160
	RCS_BiPropellant4_Thrust_Coeff = 0.9
	RCS_BiPropellant4_EC_PerKN = 0.5
	RCS_BiPropellant4_PressureFed = true
	RCS_BiPropellant4_UpgradeRequired = RS_KeroLOX_RCS_Upgrade
	RCS_BiPropellant4_PropellantsVolumeRatio = 1.0
	// BiPropellant RCS variant 5
	RCS_BiPropellant5_Propellants = NOT_USED
	RCS_BiPropellant5_Title = 
	RCS_BiPropellant5_Description = 
	RCS_BiPropellant5_ISP_Vac = 0
	RCS_BiPropellant5_ISP_SL = 0
	RCS_BiPropellant5_Thrust_Coeff = 1.0
	RCS_BiPropellant5_EC_PerKN = 0
	RCS_BiPropellant5_PressureFed = false
	RCS_BiPropellant5_UpgradeRequired = false
	RCS_BiPropellant5_PropellantsVolumeRatio = 1.0
	// MonoPropellant RCS variant 1
	RCS_MonoPropellant1_Propellant = Hydrazine
	RCS_MonoPropellant1_Title = #LOC_RS_RCS_MonoPropellant_Hydrazine_title
	RCS_MonoPropellant1_Description = #LOC_RS_RCS_MonoPropellant_Hydrazine_desc
	RCS_MonoPropellant1_ISP_Vac = 236
	RCS_MonoPropellant1_ISP_SL = 90
	RCS_MonoPropellant1_Thrust_Coeff = 0.6
	RCS_MonoPropellant1_EC_PerKN = 0.0
	RCS_MonoPropellant1_PressureFed = true
	RCS_MonoPropellant1_UpgradeRequired = RS_MonoPropellant_RCS_Upgrade
	RCS_MonoPropellant1_PropellantVolumeRatio = 1.0
	// MonoPropellant RCS variant 2
	RCS_MonoPropellant2_Propellant = NOT_USED
	RCS_MonoPropellant2_Title = 
	RCS_MonoPropellant2_Description = 
	RCS_MonoPropellant2_ISP_Vac = 0
	RCS_MonoPropellant2_ISP_SL = 0
	RCS_MonoPropellant2_Thrust_Coeff = 1.0
	RCS_MonoPropellant2_EC_PerKN = 0
	RCS_MonoPropellant2_PressureFed = false
	RCS_MonoPropellant2_UpgradeRequired = false
	RCS_MonoPropellant2_PropellantVolumeRatio = 1.0
	// MonoPropellant RCS variant 3
	RCS_MonoPropellant3_Propellant = NOT_USED
	RCS_MonoPropellant3_Title = 
	RCS_MonoPropellant3_Description = 
	RCS_MonoPropellant3_ISP_Vac = 0
	RCS_MonoPropellant3_ISP_SL = 0
	RCS_MonoPropellant3_Thrust_Coeff = 1.0
	RCS_MonoPropellant3_EC_PerKN = 0
	RCS_MonoPropellant3_PressureFed = false
	RCS_MonoPropellant3_UpgradeRequired = false
	RCS_MonoPropellant3_PropellantVolumeRatio = 1.0
	// MonoPropellant RCS variant 4
	RCS_MonoPropellant4_Propellant = NOT_USED
	RCS_MonoPropellant4_Title = 
	RCS_MonoPropellant4_Description = 
	RCS_MonoPropellant4_ISP_Vac = 0
	RCS_MonoPropellant4_ISP_SL = 0
	RCS_MonoPropellant4_Thrust_Coeff = 1.0
	RCS_MonoPropellant4_EC_PerKN = 0
	RCS_MonoPropellant4_PressureFed = false
	RCS_MonoPropellant4_UpgradeRequired = false
	RCS_MonoPropellant4_PropellantVolumeRatio = 1.0
	// MonoPropellant RCS variant 5
	RCS_MonoPropellant5_Propellant = NOT_USED
	RCS_MonoPropellant5_Title = 
	RCS_MonoPropellant5_Description = 
	RCS_MonoPropellant5_ISP_Vac = 0
	RCS_MonoPropellant5_ISP_SL = 0
	RCS_MonoPropellant5_Thrust_Coeff = 1.0
	RCS_MonoPropellant5_EC_PerKN = 0
	RCS_MonoPropellant5_PressureFed = false
	RCS_MonoPropellant5_UpgradeRequired = false
	RCS_MonoPropellant5_PropellantVolumeRatio = 1.0
	// Cold gas RCS variant 1
	RCS_ColdGas1_Propellant = Nitrogen
	RCS_ColdGas1_Title = #LOC_RS_RCS_ColdGas_Nitrogen_title
	RCS_ColdGas1_Description = #LOC_RS_RCS_ColdGas_Nitrogen_desc
	RCS_ColdGas1_ISP_Vac = 73
	RCS_ColdGas1_ISP_SL = 36
	RCS_ColdGas1_Thrust_Coeff = 0.25
	RCS_ColdGas1_EC_PerKN = 0.0
	RCS_ColdGas1_UpgradeRequired = false
	RCS_ColdGas1_PropellantVolumeRatio = 200.0
	// Cold gas RCS variant 2
	RCS_ColdGas2_Propellant = NOT_USED
	RCS_ColdGas2_Title = 
	RCS_ColdGas2_Description = 
	RCS_ColdGas2_ISP_Vac = 0
	RCS_ColdGas2_ISP_SL = 0
	RCS_ColdGas2_Thrust_Coeff = 1.0
	RCS_ColdGas2_EC_PerKN = 0.0
	RCS_ColdGas2_UpgradeRequired = false
	RCS_ColdGas2_PropellantVolumeRatio = 1.0
	// Cold gas RCS variant 3
	RCS_ColdGas3_Propellant = NOT_USED
	RCS_ColdGas3_Title = 
	RCS_ColdGas3_Description = 
	RCS_ColdGas3_ISP_Vac = 0
	RCS_ColdGas3_ISP_SL = 0
	RCS_ColdGas3_Thrust_Coeff = 1.0
	RCS_ColdGas3_EC_PerKN = 0.0
	RCS_ColdGas3_UpgradeRequired = false
	RCS_ColdGas3_PropellantVolumeRatio = 1.0
	// Cold gas RCS variant 4
	RCS_ColdGas4_Propellant = NOT_USED
	RCS_ColdGas4_Title = 
	RCS_ColdGas4_Description = 
	RCS_ColdGas4_ISP_Vac = 0
	RCS_ColdGas4_ISP_SL = 0
	RCS_ColdGas4_Thrust_Coeff = 1.0
	RCS_ColdGas4_EC_PerKN = 0.0
	RCS_ColdGas4_UpgradeRequired = false
	RCS_ColdGas4_PropellantVolumeRatio = 1.0
	// Cold gas RCS variant 5
	RCS_ColdGas5_Propellant = NOT_USED
	RCS_ColdGas5_Title = 
	RCS_ColdGas5_Description = 
	RCS_ColdGas5_ISP_Vac = 0
	RCS_ColdGas5_ISP_SL = 0
	RCS_ColdGas5_Thrust_Coeff = 1.0
	RCS_ColdGas5_EC_PerKN = 0.0
	RCS_ColdGas5_UpgradeRequired = false
	RCS_ColdGas5_PropellantVolumeRatio = 1.0

	// // Cold gas RCS variant 2
	// RCS_ColdGas2_Propellant = Hydrogen
	// RCS_ColdGas2_Title = #LOC_RS_RCS_ColdGas_Hydrogen_title
	// RCS_ColdGas2_Description = #LOC_RS_RCS_ColdGas_Hydrogen_desc
	// RCS_ColdGas2_ISP_Vac = 272
	// RCS_ColdGas2_ISP_SL = 136
	// RCS_ColdGas2_Thrust_Coeff = 0.125
	// RCS_ColdGas2_EC_PerKN = 0.0
	// RCS_ColdGas2_UpgradeRequired = false
	// RCS_ColdGas2_PropellantVolumeRatio = 200.0
	// // Cold gas RCS variant 3
	// RCS_ColdGas3_Propellant = Methane
	// RCS_ColdGas3_Title = #LOC_RS_RCS_ColdGas_Methane_title
	// RCS_ColdGas3_Description = #LOC_RS_RCS_ColdGas_Methane_desc
	// RCS_ColdGas3_ISP_Vac = 105
	// RCS_ColdGas3_ISP_SL = 52
	// RCS_ColdGas3_Thrust_Coeff = 0.2
	// RCS_ColdGas3_EC_PerKN = 0.0
	// RCS_ColdGas3_UpgradeRequired = false
	// RCS_ColdGas3_PropellantVolumeRatio = 200.0

	// Engines reliability
	//
	// Kerbalism
	// Kerbalism authors notes: "Engines are guaranteed to get 35% of the rated burn duration without a failure to material fatigue,
	// and after that the probability of a failure raises exponentially. If my math doesn't fail me,
	// this means that you will get, roughly rounded:
	// 0% failures up to 35% of the rated duration
	// 3% failures at 50% of the rated duration
	// 20% failures at 75% of the rated duration
	// 56% failures at 100% of the rated duration
	// 80% failures at 110% of the rated duration
	// 100% failures at ~117% of the rated duration"
	//
	// TLDR: for Kerbalism reliability mechanics, kerbalism_Engines_RatedBurnTime_Coeff should be about 2.0
	kerbalism_Engines_RatedBurnTime_Coeff = 1.8
	// failure probability on ignition
	kerbalism_Engines_BaseTurnOnFailureProbability = 0.007
	kerbalism_AirBreathingEngines_TurnOnFailureProbability_Coeff = 1.0 // applies on top of kerbalism_Engines_BaseTurnOnFailureProbability
	kerbalism_LowerStageEngines_TurnOnFailureProbability_Coeff = 1.0   // applies on top of kerbalism_Engines_BaseTurnOnFailureProbability
	kerbalism_UpperStageEngines_TurnOnFailureProbability_Coeff = 1.0   // applies on top of kerbalism_Engines_BaseTurnOnFailureProbability
	kerbalism_SustainerEngines_TurnOnFailureProbability_Coeff = 1.0    // applies on top of kerbalism_Engines_BaseTurnOnFailureProbability
	kerbalism_OMSEngines_TurnOnFailureProbability_Coeff = 0.5          // applies on top of kerbalism_Engines_BaseTurnOnFailureProbability
	kerbalism_SRB_TurnOnFailureProbability_Coeff = 0.7                 // applies on top of kerbalism_Engines_BaseTurnOnFailureProbability
	kerbalism_NuclearEngines_TurnOnFailureProbability_Coeff = 0.7      // applies on top of kerbalism_Engines_BaseTurnOnFailureProbability
	kerbalism_ElectricEngines_TurnOnFailureProbability_Coeff = 0.7     // applies on top of kerbalism_Engines_BaseTurnOnFailureProbability
	kerbalism_PressureFedEngines_TurnOnFailureProbability_Coeff = 0.25 // applies on top of kerbalism_Engines_BaseTurnOnFailureProbability and coeffs above
	// "high quality" details settings
	// added mass. Actual mass added = engine mass * X_AddedMassCoeff
	kerbalism_Engines_HighQuality_AddedMassCoeff = 0.1
	kerbalism_AirBreathingEngines_HighQuality_AddedMassCoeff = 1.0     // applies on top of kerbalism_Engines_HighQuality_AddedMassCoeff
	kerbalism_LowerStageEngines_HighQuality_AddedMassCoeff = 1.0       // applies on top of kerbalism_Engines_HighQuality_AddedMassCoeff
	kerbalism_UpperStageEngines_HighQuality_AddedMassCoeff = 1.0       // applies on top of kerbalism_Engines_HighQuality_AddedMassCoeff
	kerbalism_SustainerEngines_HighQuality_AddedMassCoeff = 1.0        // applies on top of kerbalism_Engines_HighQuality_AddedMassCoeff
	kerbalism_OMSEngines_HighQuality_AddedMassCoeff = 0.25             // applies on top of kerbalism_Engines_HighQuality_AddedMassCoeff
	kerbalism_SRB_HighQuality_AddedMassCoeff = 0.1                     // applies on top of kerbalism_Engines_HighQuality_AddedMassCoeff
	kerbalism_NuclearEngines_HighQuality_AddedMassCoeff = 0.1          // applies on top of kerbalism_Engines_HighQuality_AddedMassCoeff
	kerbalism_ElectricEngines_HighQuality_AddedMassCoeff = 0.1         // applies on top of kerbalism_Engines_HighQuality_AddedMassCoeff
	// added cost. Actual cost added = engine cost * X_AddedCostCoeff
	kerbalism_Engines_HighQuality_AddedCostCoeff = 0.5
	kerbalism_AirBreathingEngines_HighQuality_AddedCostCoeff = 1.0     // applies on top of kerbalism_Engines_HighQuality_AddedCostCoeff
	kerbalism_LowerStageEngines_HighQuality_AddedCostCoeff = 1.0       // applies on top of kerbalism_Engines_HighQuality_AddedCostCoeff
	kerbalism_UpperStageEngines_HighQuality_AddedCostCoeff = 1.0       // applies on top of kerbalism_Engines_HighQuality_AddedCostCoeff
	kerbalism_SustainerEngines_HighQuality_AddedCostCoeff = 1.0        // applies on top of kerbalism_Engines_HighQuality_AddedCostCoeff
	kerbalism_OMSEngines_HighQuality_AddedCostCoeff = 1.0              // applies on top of kerbalism_Engines_HighQuality_AddedCostCoeff
	kerbalism_SRB_HighQuality_AddedCostCoeff = 1.0                     // applies on top of kerbalism_Engines_HighQuality_AddedCostCoeff
	kerbalism_NuclearEngines_HighQuality_AddedCostCoeff = 0.1          // applies on top of kerbalism_Engines_HighQuality_AddedCostCoeff
	kerbalism_ElectricEngines_HighQuality_AddedCostCoeff = 0.1         // applies on top of kerbalism_Engines_HighQuality_AddedCostCoeff

	// EngineIgnitor
	engineIgnitor_IgnitionChanceWhenUnstable = 0.2                     // affects EngineIgnitor ullage simulation system
	engineIgnitor_AutoIgnitionTemperature = 800

	// PayToPlay
	// lower stage engines
	payToPlay_LowerStageEngines_topBaseRatedTime_Coeff = 0.8           // topBaseRatedTime = payToPlay_topBaseRatedTime_Coeff * ratedBurnTime(*)
	payToPlay_LowerStageEngines_topMaxRatedTime_Coeff = 1.5            // topMaxRatedTime = payToPlay_topMaxRatedTime_Coeff * ratedBurnTime(*)
	payToPlay_LowerStageEngines_maxIgnitions_Multiplier = 3            // maxIgnitions = payToPlay_LowerStageEngines_maxIgnitions_Multiplier * ignitions(*)
	payToPlay_LowerStageEngines_maxCostIgnitionsCoeff = 0.1
	payToPlay_LowerStageEngines_maxMassIgnitionsCoeff = 0.1
	payToPlay_LowerStageEngines_maxIgnitionRestoreCostCoeff = 0.02
	payToPlay_LowerStageEngines_maxCostRatedTimeCoeff = 0.5
	payToPlay_LowerStageEngines_maxMassRatedTimeCoeff = 0.2
	payToPlay_LowerStageEngines_maintenanceAtRatedTimeCoeff = 0.067
	payToPlay_LowerStageEngines_maxFailureFixCostCoeff = 0.1
	// upper stage engines
	payToPlay_UpperStageEngines_topBaseRatedTime_Coeff = 0.8           // topBaseRatedTime = payToPlay_topBaseRatedTime_Coeff * ratedBurnTime(*)
	payToPlay_UpperStageEngines_topMaxRatedTime_Coeff = 2.0            // topMaxRatedTime = payToPlay_topMaxRatedTime_Coeff * ratedBurnTime(*)
	payToPlay_UpperStageEngines_maxIgnitions_Multiplier = 5            // maxIgnitions = payToPlay_UpperStageEngines_maxIgnitions_Multiplier * ignitions(*)
	payToPlay_UpperStageEngines_maxCostIgnitionsCoeff = 0.1
	payToPlay_UpperStageEngines_maxMassIgnitionsCoeff = 0.1
	payToPlay_UpperStageEngines_maxIgnitionRestoreCostCoeff = 0.02
	payToPlay_UpperStageEngines_maxCostRatedTimeCoeff = 0.7
	payToPlay_UpperStageEngines_maxMassRatedTimeCoeff = 0.25
	payToPlay_UpperStageEngines_maintenanceAtRatedTimeCoeff = 0.067
	payToPlay_UpperStageEngines_maxFailureFixCostCoeff = 0.1
	// sustainer engines
	payToPlay_SustainerEngines_topBaseRatedTime_Coeff = 0.8            // topBaseRatedTime = payToPlay_topBaseRatedTime_Coeff * ratedBurnTime(*)
	payToPlay_SustainerEngines_topMaxRatedTime_Coeff = 1.8             // topMaxRatedTime = payToPlay_topMaxRatedTime_Coeff * ratedBurnTime(*)
	payToPlay_SustainerEngines_maxIgnitions_Multiplier = 3             // maxIgnitions = payToPlay_SustainerEngines_maxIgnitions_Multiplier * ignitions(*)
	payToPlay_SustainerEngines_maxCostIgnitionsCoeff = 0.1
	payToPlay_SustainerEngines_maxMassIgnitionsCoeff = 0.1
	payToPlay_SustainerEngines_maxIgnitionRestoreCostCoeff = 0.02
	payToPlay_SustainerEngines_maxCostRatedTimeCoeff = 0.6
	payToPlay_SustainerEngines_maxMassRatedTimeCoeff = 0.2
	payToPlay_SustainerEngines_maintenanceAtRatedTimeCoeff = 0.067
	payToPlay_SustainerEngines_maxFailureFixCostCoeff = 0.1
	// OMS engines
	payToPlay_OMSEngines_topBaseRatedTime_Coeff = 0.8                  // topBaseRatedTime = payToPlay_topBaseRatedTime_Coeff * ratedBurnTime(*)
	payToPlay_OMSEngines_topMaxRatedTime_Coeff = 5.0                   // topMaxRatedTime = payToPlay_topMaxRatedTime_Coeff * ratedBurnTime(*)
	payToPlay_OMSEngines_maxIgnitions_Multiplier = 20                  // maxIgnitions = payToPlay_OMSEngines_maxIgnitions_Multiplier * ignitions(*)
	payToPlay_OMSEngines_maxCostIgnitionsCoeff = 0.1
	payToPlay_OMSEngines_maxMassIgnitionsCoeff = 0.2
	payToPlay_OMSEngines_maxIgnitionRestoreCostCoeff = 0.02
	payToPlay_OMSEngines_maxCostRatedTimeCoeff = 1.0
	payToPlay_OMSEngines_maxMassRatedTimeCoeff = 0.25
	payToPlay_OMSEngines_maintenanceAtRatedTimeCoeff = 0.067
	payToPlay_OMSEngines_maxFailureFixCostCoeff = 0.1
	// nuclear engines
	payToPlay_NuclearEngines_topBaseRatedTime_Coeff = 0.8              // topBaseRatedTime = payToPlay_topBaseRatedTime_Coeff * ratedBurnTime(*)
	payToPlay_NuclearEngines_topMaxRatedTime_Coeff = 5.0               // topMaxRatedTime = payToPlay_topMaxRatedTime_Coeff * ratedBurnTime(*)
	payToPlay_NuclearEngines_maxIgnitions_Multiplier = 20              // maxIgnitions = payToPlay_NuclearEngines_maxIgnitions_Multiplier * ignitions(*)
	payToPlay_NuclearEngines_maxCostIgnitionsCoeff = 0.1
	payToPlay_NuclearEngines_maxMassIgnitionsCoeff = 0.2
	payToPlay_NuclearEngines_maxIgnitionRestoreCostCoeff = 0.02
	payToPlay_NuclearEngines_maxCostRatedTimeCoeff = 1.0
	payToPlay_NuclearEngines_maxMassRatedTimeCoeff = 0.25
	payToPlay_NuclearEngines_maintenanceAtRatedTimeCoeff = 0.067
	payToPlay_NuclearEngines_maxFailureFixCostCoeff = 0.1
	// electric engines
	payToPlay_ElectricEngines_topBaseRatedTime_Coeff = 1.0              // topBaseRatedTime = payToPlay_topBaseRatedTime_Coeff * ratedBurnTime(*)
	payToPlay_ElectricEngines_topMaxRatedTime_Coeff = 100.0             // topMaxRatedTime = payToPlay_topMaxRatedTime_Coeff * ratedBurnTime(*)
	payToPlay_ElectricEngines_maxCostRatedTimeCoeff = 1.0
	payToPlay_ElectricEngines_maxMassRatedTimeCoeff = 0.25
	payToPlay_ElectricEngines_maintenanceAtRatedTimeCoeff = 0.067
	payToPlay_ElectricEngines_maxFailureFixCostCoeff = 0.1
	// air-breathing engines
	payToPlay_AirBreathingEngines_topBaseRatedTime_Coeff = 0.8          // topBaseRatedTime = payToPlay_topBaseRatedTime_Coeff * ratedBurnTime(*)
	payToPlay_AirBreathingEngines_topMaxRatedTime_Coeff = 5.0           // topMaxRatedTime = payToPlay_topMaxRatedTime_Coeff * ratedBurnTime(*)
	payToPlay_AirBreathingEngines_maxCostRatedTimeCoeff = 1.0
	payToPlay_AirBreathingEngines_maxMassRatedTimeCoeff = 0.25
	payToPlay_AirBreathingEngines_maintenanceAtRatedTimeCoeff = 0.067
	payToPlay_AirBreathingEngines_maxFailureFixCostCoeff = 0.1
	// SRBs
	payToPlay_SRB_maintenanceAtRatedTimeCoeff = 0.067
	payToPlay_SRB_ignitionIssuesChanceScale = 0.1
	payToPlay_SRB_maxFailureFixCostCoeff = 0.1
	                                                                    // (*) - values from engine config (engine model)


	// Kerbonauts RCS packs on EVA
	kerbalEVA_Propellant = Nitrogen
	kerbalEVA_PropellantDensity = 0.000001251   // From CRP, in metric tons/stock unit. Please update if your change kerbalEVA_Propellant
	kerbalEVA_ThrustCoeff = 0.2                 // Applied only to linear thrust (translation). Rotation controls are more or less fine
	// not used yet - TODO: implement configurable EVAPropellant patch
	kerbalEVA_ISP = 80                          // Kerbonaut RCS specific impulse
	kerbalEVA_DeltaV = 100                      // How much delta-v will Kerbonaut have with full RCS backpack
	// /not used yet

	// Default maxTemp and skinMaxTemp for parts without maxTemp or skinMaxTemp defined
	thermal_DefaultMaxTemp = 2000

	// Enable B9PS switcher for reentry protection level
	thermal_ReentryProtectionSwitch = true

	// Additional thermal protection for reentry - mass coefficients
	thermal_ReentryProtection1_MassCoeff = 1.15
	thermal_ReentryProtection2_MassCoeff = 1.25
	thermal_ReentryProtection3_MassCoeff = 1.5

	// Additional thermal protection for reentry - cost coefficients
	thermal_ReentryProtection1_CostCoeff = 1.1
	thermal_ReentryProtection2_CostCoeff = 1.2
	thermal_ReentryProtection3_CostCoeff = 1.3

	// Additional thermal protection for reentry - maximum temperatures
	thermal_ReentryProtection1_MaxTemp = 2500
	thermal_ReentryProtection2_MaxTemp = 2700
	thermal_ReentryProtection3_MaxTemp = 3000
	thermal_ReentryProtection1_SkinMaxTemp = 2500
	thermal_ReentryProtection2_SkinMaxTemp = 2700
	thermal_ReentryProtection3_SkinMaxTemp = 3000

	// Fuel/oxidizer ratio (by volume) for different propellant pairs
	// ! IMPORTANT: sum of propellant ratios should be equal to 1.0, otherwise fuel tanks balance will be somewhat broken
	// AlcoLOX
	AlcoLOX_Ethanol75_Ratio = 0.5      // 1:1 by volume, very close to realistic propellants ratio
	AlcoLOX_LOX_Ratio = 0.5
	// KeroLOX
	KeroLOX_Kerosene_Ratio = 0.3333    // 1:2 by volume, close to realistic ratio (1:1.78 average)
	KeroLOX_LOX_Ratio = 0.6667
	// HydroLOX
	HydroLOX_LH2_Ratio = 0.8           // 1:4 by volume, not very close to realistic ratio (1:3 average)
	HydroLOX_LOX_Ratio = 0.2           // made it 1:4 for gameplay reasons
	                                   // (easy LH2 and LOX tanks combinations for upper stages like DCSS or ICPS)
	// MethaLOX
	MethaLOX_LqdMethane_Ratio = 0.5    // 1:1 by volume, close to realistic ratio (1:1.3 average)
	MethaLOX_LOX_Ratio = 0.5
	// Hypergolic fuel and oxidizer
	Hypergolics_Fuel_Ratio = 0.5       // 1:1 by volume, close to realistic ratio (1:1.13 average)
	Hypergolics_Oxidizer_Ratio = 0.5
	// KeroLOX + LH2 (RD-701/704 tri-propellant mode)
	KeroLOXLH2_Kerosene_Ratio = 0.13
	KeroLOXLH2_LOX_Ratio = 0.8
	KeroLOXLH2_LH2_Ratio = 0.07

	//
	// Unconfigured engines settings
	// If some engine params are not explicitly defined, RealismSimplified will try it's best to determine params values automatically
	//
	// 1. Engines, having IntakeAir or IntakeAtm propellant, are considered air-breathing. LF will be switched to Kerosene.
	// 2. Engines, burning only liquid fuel, lqd.methane or lqd.hydrogen, are considered nuclear. LF will be switched to LH2.
	// 3. Engines, burning solid fuel, are considered solid rocket boosters (SRB).
	// 4. Engines, having ElectricCharge as propellant, and no IntakeAir or IntakeAtm propellants, are considered electric engines.
	// 5. Engines, burning monopropellant, or any fuel with oxidizer, are considered liquid fuel engines.
	//    For all liquid fuel engines:
	//    5.1. Thrust, mass, cost and entryCost will be multiplied by corresponding unconfiguredLFEngines_* coefficients.
	//    5.2. RS_EngineType (if not explicitly defined) will be defined by following rules:
	//         - engine burns monopropellant and engine thrust < 300 kN - OMS engine;
	//         - ISP ratio >= 1.5 and engine thrust < 300 kN            - OMS engine;
	//         - ISP ratio >= 1.27                                      - upper stage engine;
	//         - ISP ratio >= 1.15                                      - sustainer engine;
	//         - otherwise                                              - lower stage engine.
	//    * ISP ratio = ISP in vacuum / ISP at sea level     
	//    5.3. RS_EnginePropellants (if not explicitly defined) will be defined from engine vacuum ISP and RS_EngineType by following rules:
	//         5.3.1. OMS engines:
	//                - ISP(vac) >= 400 - HydroLOX
	//                - ISP(vac) >= 361 - MethaLOX
	//                - ISP(vac) >= 330 - KeroLOX
	//                - ISP(vac) >= 260 - Hypergolics (aerozine50+NTO by default)
	//                - otherwise       - Monopropellant (hydrazine by default)
	//         5.3.2. Upper stage engines:
	//                - ISP(vac) >= 400 - HydroLOX
	//                - ISP(vac) >= 361 - MethaLOX
	//                - ISP(vac) >= 300 - KeroLOX
	//                - otherwise       - Hypergolics (aerozine50+NTO by default)
	//         5.3.3. Sustainer engines:
	//                - ISP(vac) >= 373 - HydroLOX
	//                - ISP(vac) >= 345 - MethaLOX
	//                - ISP(vac) >= 270 - KeroLOX
	//                - otherwise       - AlcoLOX (if AlcoLOX engines are enabled, otherwise KeroLOX)
	//         5.3.4. Lower stage engines:
	//                - ISP(vac) >= 373 - HydroLOX
	//                - ISP(vac) >= 340 - MethaLOX
	//                - ISP(vac) >= 270 - KeroLOX
	//                - otherwise       - AlcoLOX (if AlcoLOX engines are enabled, otherwise KeroLOX)
	//    5.4. RS_EnginePressureFed (if not explicitly defined) will be defined by following rules:
	//         - if engine is OMS, hypergolic or monopropellant, and engine thrust < 90 kN - true (engine is pressure-fed);
	//         - otherwise                                                                 - false (engine is not pressure-fed).
	//    5.5. RS_EngineUllage (if not explicitly defined) will be defined by following rules:
	//         - if engine is OMS and pressure-fed, and engine thrust < 45 kN - false (engine does not require settling propellants prior to ignition);
	//         - otherwise                                                    - true (engine is subject to propellants ullage).
	//    5.6. Engine tech level (low, middle or high) will be defined from it's R&D tech node.
	//         Other params (like rated burn time, ignitions count, min thrust percent) are dependant of engine type and tech level (see settings below).
	//

	unconfiguredLFEngines_MassCoeff = 1.0
	unconfiguredLFEngines_ThrustCoeff = 4.0
	unconfiguredLFEngines_CostCoeff = 4.0
	unconfiguredLFEngines_EntryCostCoeff = 4.0
	// Lower stage
	unconfiguredEngines_LowerStage_MassCoeff = 1.0          // applies on top of unconfiguredLFEngines_MassCoeff
	unconfiguredEngines_LowerStage_ThrustCoeff = 1.0        // applies on top of unconfiguredLFEngines_ThrustCoeff
	unconfiguredEngines_LowerStage_CostCoeff = 1.0          // applies on top of unconfiguredLFEngines_CostCoeff
	unconfiguredEngines_LowerStage_EntryCostCoeff = 1.0     // applies on top of unconfiguredLFEngines_EntryCostCoeff
	// Lower stage low tech
	unconfiguredEngines_LowerStage_LowTech_MinThrustPercent = 100
	unconfiguredEngines_LowerStage_LowTech_Ignitions = 1
	unconfiguredEngines_LowerStage_LowTech_Ullage = true
	unconfiguredEngines_LowerStage_LowTech_PressureFed = false
	unconfiguredEngines_LowerStage_LowTech_RatedBurnTime = 150
	// Lower stage mid tech
	unconfiguredEngines_LowerStage_MidTech_MinThrustPercent = 100
	unconfiguredEngines_LowerStage_MidTech_Ignitions = 1
	unconfiguredEngines_LowerStage_MidTech_Ullage = true
	unconfiguredEngines_LowerStage_MidTech_PressureFed = false
	unconfiguredEngines_LowerStage_MidTech_RatedBurnTime = 200
	// Lower stage high tech
	unconfiguredEngines_LowerStage_HighTech_MinThrustPercent = 70
	unconfiguredEngines_LowerStage_HighTech_Ignitions = 2
	unconfiguredEngines_LowerStage_HighTech_Ullage = true
	unconfiguredEngines_LowerStage_HighTech_PressureFed = false
	unconfiguredEngines_LowerStage_HighTech_RatedBurnTime = 300
	// Upper stage
	unconfiguredEngines_UpperStage_MassCoeff = 1.0          // applies on top of unconfiguredLFEngines_MassCoeff
	unconfiguredEngines_UpperStage_ThrustCoeff = 1.0        // applies on top of unconfiguredLFEngines_ThrustCoeff
	unconfiguredEngines_UpperStage_CostCoeff = 1.0          // applies on top of unconfiguredLFEngines_CostCoeff
	unconfiguredEngines_UpperStage_EntryCostCoeff = 1.0     // applies on top of unconfiguredLFEngines_EntryCostCoeff
	// Upper stage low tech
	unconfiguredEngines_UpperStage_LowTech_MinThrustPercent = 100
	unconfiguredEngines_UpperStage_LowTech_Ignitions = 1
	unconfiguredEngines_UpperStage_LowTech_Ullage = true
	unconfiguredEngines_UpperStage_LowTech_PressureFed = false
	unconfiguredEngines_UpperStage_LowTech_RatedBurnTime = 300
	// Upper stage mid tech
	unconfiguredEngines_UpperStage_MidTech_MinThrustPercent = 70
	unconfiguredEngines_UpperStage_MidTech_Ignitions = 1
	unconfiguredEngines_UpperStage_MidTech_Ullage = true
	unconfiguredEngines_UpperStage_MidTech_PressureFed = false
	unconfiguredEngines_UpperStage_MidTech_RatedBurnTime = 500
	// Upper stage high tech
	unconfiguredEngines_UpperStage_HighTech_MinThrustPercent = 50
	unconfiguredEngines_UpperStage_HighTech_Ignitions = 3
	unconfiguredEngines_UpperStage_HighTech_Ullage = true
	unconfiguredEngines_UpperStage_HighTech_PressureFed = false
	unconfiguredEngines_UpperStage_HighTech_RatedBurnTime = 700
	// Sustainer engines
	unconfiguredEngines_Sustainer_MassCoeff = 1.0           // applies on top of unconfiguredLFEngines_MassCoeff
	unconfiguredEngines_Sustainer_ThrustCoeff = 1.0         // applies on top of unconfiguredLFEngines_ThrustCoeff
	unconfiguredEngines_Sustainer_CostCoeff = 1.0           // applies on top of unconfiguredLFEngines_CostCoeff
	unconfiguredEngines_Sustainer_EntryCostCoeff = 1.0      // applies on top of unconfiguredLFEngines_EntryCostCoeff
	// Sustainer low tech
	unconfiguredEngines_Sustainer_LowTech_MinThrustPercent = 100
	unconfiguredEngines_Sustainer_LowTech_Ignitions = 1
	unconfiguredEngines_Sustainer_LowTech_Ullage = true
	unconfiguredEngines_Sustainer_LowTech_PressureFed = false
	unconfiguredEngines_Sustainer_LowTech_RatedBurnTime = 300
	// Sustainer mid tech
	unconfiguredEngines_Sustainer_MidTech_MinThrustPercent = 85
	unconfiguredEngines_Sustainer_MidTech_Ignitions = 1
	unconfiguredEngines_Sustainer_MidTech_Ullage = true
	unconfiguredEngines_Sustainer_MidTech_PressureFed = false
	unconfiguredEngines_Sustainer_MidTech_RatedBurnTime = 400
	// Sustainer high tech
	unconfiguredEngines_Sustainer_HighTech_MinThrustPercent = 70
	unconfiguredEngines_Sustainer_HighTech_Ignitions = 2
	unconfiguredEngines_Sustainer_HighTech_Ullage = true
	unconfiguredEngines_Sustainer_HighTech_PressureFed = false
	unconfiguredEngines_Sustainer_HighTech_RatedBurnTime = 500
	// OMS engines
	unconfiguredEngines_OMS_MassCoeff = 0.8                 // applies on top of unconfiguredLFEngines_MassCoeff
	unconfiguredEngines_OMS_ThrustCoeff = 0.75              // applies on top of unconfiguredLFEngines_ThrustCoeff
	unconfiguredEngines_OMS_CostCoeff = 1.2                 // applies on top of unconfiguredLFEngines_CostCoeff
	unconfiguredEngines_OMS_EntryCostCoeff = 0.8            // applies on top of unconfiguredLFEngines_EntryCostCoeff
	// OMS low tech
	unconfiguredEngines_OMS_LowTech_MinThrustPercent = 50
	unconfiguredEngines_OMS_LowTech_Ignitions = 5
	unconfiguredEngines_OMS_LowTech_Ullage = true
	unconfiguredEngines_OMS_LowTech_PressureFed = true
	unconfiguredEngines_OMS_LowTech_RatedBurnTime = 500
	// OMS mid tech
	unconfiguredEngines_OMS_MidTech_MinThrustPercent = 25
	unconfiguredEngines_OMS_MidTech_Ignitions = -1
	unconfiguredEngines_OMS_MidTech_Ullage = true
	unconfiguredEngines_OMS_MidTech_PressureFed = true
	unconfiguredEngines_OMS_MidTech_RatedBurnTime = 1800
	// OMS high tech
	unconfiguredEngines_OMS_HighTech_MinThrustPercent = 10
	unconfiguredEngines_OMS_HighTech_Ignitions = -1
	unconfiguredEngines_OMS_HighTech_Ullage = true
	unconfiguredEngines_OMS_HighTech_PressureFed = false
	unconfiguredEngines_OMS_HighTech_RatedBurnTime = 7200
	// SRBs
	unconfiguredEngines_SRB_MassCoeff = 1.0
	unconfiguredEngines_SRB_ThrustCoeff = 4.2
	unconfiguredEngines_SRB_CostCoeff = 3.0
	unconfiguredEngines_SRB_EntryCostCoeff = 3.0
	unconfiguredEngines_SRB_SolidFuelAmountMultiplier = 4.2
	unconfiguredEngines_SRB_MinThrustPercent = 50
	unconfiguredEngines_SRB_Ignitions = 1
	unconfiguredEngines_SRB_DryMassRatio = 0.12                  // dryMass / solidFuelMass
	// Nuclear engines
	unconfiguredEngines_Nuclear_MassCoeff = 1.0
	unconfiguredEngines_Nuclear_ThrustCoeff = 1.0
	unconfiguredEngines_Nuclear_CostCoeff = 3.0
	unconfiguredEngines_Nuclear_EntryCostCoeff = 3.0
	unconfiguredEngines_Nuclear_MinThrustPercent = 0
	unconfiguredEngines_Nuclear_Ignitions = 100
	unconfiguredEngines_Nuclear_Ullage = true
	unconfiguredEngines_Nuclear_PressureFed = false
	unconfiguredEngines_Nuclear_RatedBurnTime = 43200
	// Electric engines
	unconfiguredEngines_Electric_MassCoeff = 1.0
	unconfiguredEngines_Electric_ThrustCoeff = 1.0
	unconfiguredEngines_Electric_CostCoeff = 1.0
	unconfiguredEngines_Electric_EntryCostCoeff = 1.0
	unconfiguredEngines_Electric_ECConsumptionCoeff = 1.0
	unconfiguredEngines_Electric_MinThrustPercent = 0
	unconfiguredEngines_Electric_Ignitions = -1
	unconfiguredEngines_Electric_Ullage = false
	unconfiguredEngines_Electric_PressureFed = false
	unconfiguredEngines_Electric_RatedBurnTime = 864000
	// Air-breathing engines
	unconfiguredEngines_AirBreathing_MassCoeff = 1.0
	unconfiguredEngines_AirBreathing_ThrustCoeff = 3.0
	unconfiguredEngines_AirBreathing_CostCoeff = 1.0
	unconfiguredEngines_AirBreathing_EntryCostCoeff = 1.0
	unconfiguredEngines_AirBreathing_MinThrustPercent = 0
	unconfiguredEngines_AirBreathing_Ignitions = -1
	unconfiguredEngines_AirBreathing_Ullage = false
	unconfiguredEngines_AirBreathing_PressureFed = false
	unconfiguredEngines_AirBreathing_RatedBurnTime = 86400

	// TweakScale settings for engines
	// In general, engines should not be allowed to be scaled, as it can ruin game balance, and is not realistic for most engines.
	// However, there are some exceptions, there some scaling could be allowed.
	// For example, pressure-fed engines are generally very simple and could be scaled up or down a bit if needed.
	// You can disable mod's interference into TweakScale settings completely by setting *_alterScaleSettings value to false
	// for specific engine category, or set some minimum and maximum scale percent.
	// It minScalePercent = maxScalePercent, TweakScale is disabled for specified engines category.
	//
	// SRBs
	tweakScale_SRB_alterScaleSettings = true
	tweakScale_SRB_minScalePercent = 75
	tweakScale_SRB_maxScalePercent = 100
	// Electric engines
	tweakScale_ElectricEngines_alterScaleSettings = true
	tweakScale_ElectricEngines_minScalePercent = 100
	tweakScale_ElectricEngines_maxScalePercent = 100
	// Air-breathing engines
	tweakScale_AirBreathingEngines_alterScaleSettings = true
	tweakScale_AirBreathingEngines_minScalePercent = 100
	tweakScale_AirBreathingEngines_maxScalePercent = 100
	// Nuclear engines
	tweakScale_NuclearEngines_alterScaleSettings = true
	tweakScale_NuclearEngines_minScalePercent = 100
	tweakScale_NuclearEngines_maxScalePercent = 100
	// Lower stage engines
	tweakScale_LowerStageEngines_alterScaleSettings = true
	tweakScale_LowerStageEngines_minScalePercent = 100
	tweakScale_LowerStageEngines_maxScalePercent = 100
	// Upper stage engines
	tweakScale_UpperStageEngines_alterScaleSettings = true
	tweakScale_UpperStageEngines_minScalePercent = 100
	tweakScale_UpperStageEngines_maxScalePercent = 100
	// Sustainer engines
	tweakScale_SustainerEngines_alterScaleSettings = true
	tweakScale_SustainerEngines_minScalePercent = 100
	tweakScale_SustainerEngines_maxScalePercent = 100
	// OMS engines
	tweakScale_OMSEngines_alterScaleSettings = true
	tweakScale_OMSEngines_minScalePercent = 100
	tweakScale_OMSEngines_maxScalePercent = 100
	// Pressure-fed engines
	tweakScale_PressureFedEngines_alterScaleSettings = true
	tweakScale_PressureFedEngines_minScalePercent = 80
	tweakScale_PressureFedEngines_maxScalePercent = 110

	//
	// Localization strings templates for auto-generated messages
	//

	// English
	loc_En_ClusterEnginesCount = (%count% engines cluster)
	loc_En_B9PS_EngineVariantInfo_Template = <b>Propellants:</b> <color=#ffffb4>%propellants%</color><br><b>Max. thrust (vacuum):</b> <color=#ffffb4>%maxThrust% kN</color><br><b>ISP (vacuum):</b> <color=#ffffb4>%ISPVac% s</color><br><b>ISP (sea level):</b> <color=#ffffb4>%ISPSL% s</color><br><b>Ignitions:</b> <color=#ffffb4>%ignitions%</color>%ullage%%pressureFed%
	loc_En_IgnitionsInfinite = <color=#3fff3f>infinite</color>
	loc_En_NoUllage = <br><color=#3fff3f>Does not require propellants ullage before ignition</color>
	loc_En_PressureFed = <br><color=#ffffb4>Pressure-fed engine</color> <color=#ff3f3f>(requires high-pressurized tanks)</color>
	loc_En_B9PS_RCSVariantInfo_Template = <b>Propellants:</b> <color=#ffffb4>%propellants%</color><br><b>Thrust (vacuum):</b> <color=#ffffb4>%thrust% N</color><br><b>ISP (vacuum):</b> <color=#ffffb4>%ISPVac% s</color><br><b>ISP (sea level):</b> <color=#ffffb4>%ISPSL% s</color>%pressureFed%
	loc_En_RCSPressureFed = <br><color=#ffffb4>Pressure-fed RCS</color> <color=#ff3f3f>(requires high-pressurized tanks)</color>
	loc_En_AlcoLOX = Ethanol75 + LOX
	loc_En_KeroLOX = Kerosene + LOX
	loc_En_KeroGOX = Kerosene + Oxygen
	loc_En_HydroLOX = Lqd.Hydrogen + LOX
	loc_En_MethaLOX = Lqd.Methane + LOX
	loc_En_Hypergolics = Aerozine50 + NTO
	loc_En_Hydrazine = Hydrazine
	loc_En_HTP = HTP
	loc_En_AvGas = AvGas
	loc_En_Kerosene = Kerosene
	loc_En_LqdHydrogen = Lqd.Hydrogen
	loc_En_LqdMethane = Lqd.Methane
	loc_En_SolidFuel = Solid Fuel
	loc_En_Nitrogen = Nitrogen
	loc_En_Methane = Methane
	loc_En_Hydrogen = Hydrogen
	loc_En_Oxygen = Oxygen
	loc_En_IntakeAtm = IntakeAtm
	loc_En_PlusEC = + Electric Charge

	// Russian
	loc_Ru_ClusterEnginesCount = (кластер из %count% двигателей)
	loc_Ru_B9PS_EngineVariantInfo_Template = <b>Топливо/окислитель:</b> <color=#ffffb4>%propellants%</color><br><b>Макс. тяга (в вакууме):</b> <color=#ffffb4>%maxThrust% КН</color><br><b>УИ (в вакууме):</b> <color=#ffffb4>%ISPVac% сек.</color><br><b>УИ (на уровне моря):</b> <color=#ffffb4>%ISPSL% сек.</color><br><b>Зажигания:</b> <color=#ffffb4>%ignitions%</color>%ullage%%pressureFed%
	loc_Ru_IgnitionsInfinite = <color=#3fff3f>бесконечное кол-во</color>
	loc_Ru_NoUllage = <br><color=#3fff3f>Не требует осадки топлива перед зажиганием</color>
	loc_Ru_PressureFed = <br><color=#ffffb4>Двигатель с вытеснительной подачей топлива</color> <color=#ff3f3f>(необходимы баки высокого давления)</color>
	loc_Ru_B9PS_RCSVariantInfo_Template = <b>Топливо/окислитель:</b> <color=#ffffb4>%propellants%</color><br>Тяга (в вакууме): <color=#ffffb4>%thrust% Н</color><br><b>УИ (в вакууме):</b> <color=#ffffb4>%ISPVac% сек.</color><br><b>УИ (на уровне моря):</b> <color=#ffffb4>%ISPSL% сек.</color>%pressureFed%
	loc_Ru_RCSPressureFed = <br><color=#ffffb4>РСУ с вытеснительной подачей топлива</color> <color=#ff3f3f>(необходимы баки высокого давления)</color>
	loc_Ru_AlcoLOX = этанол (75%) + ж.кислород
	loc_Ru_KeroLOX = керосин + ж.кислород
	loc_Ru_KeroGOX = керосин + кислород
	loc_Ru_HydroLOX = ж.водород + ж.кислород
	loc_Ru_MethaLOX = ж.метан + ж.кислород
	loc_Ru_Hypergolics = аэрозин + тетраксид азота
	loc_Ru_Hydrazine = гидразин
	loc_Ru_HTP = перекись водорода
	loc_Ru_AvGas = авиационный бензин
	loc_Ru_Kerosene = керосин
	loc_Ru_LqdHydrogen = ж.водород
	loc_Ru_LqdMethane = ж.метан
	loc_Ru_SolidFuel = твёрдое топливо
	loc_Ru_Nitrogen = азот
	loc_Ru_Methane = метан
	loc_Ru_Hydrogen = водород
	loc_Ru_Oxygen = кислород
	loc_Ru_IntakeAtm = атмосферные газы
	loc_Ru_PlusEC = + электричество

	// RO parts scale factor
	// Not used yet
	RO_PartScaleFactor = 1.5625

	// (o_O) ?
	I_Hate_Evil_Clowns = false
}
